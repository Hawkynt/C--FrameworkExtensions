<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
#region (c)2010-2020 Hawkynt
/*
  This file is part of Hawkynt's .NET Framework extensions.

    Hawkynt's .NET Framework extensions are free software: 
    you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Hawkynt's .NET Framework extensions is distributed in the hope that 
    it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
    warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
    the GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Hawkynt's .NET Framework extensions.  
    If not, see <http://www.gnu.org/licenses/>.
*/
#endregion

/* ATTENTION: This file is generated by a tool. All changes will be reverted upon next run ! */

using System.Diagnostics.Contracts;

namespace System {
  internal static partial class ActionExtensions {
    /// <summary>
    /// Tries to invoke the given delegate.
    /// </summary>
    /// <param name="This">This Action.</param>
    /// <param name="repeatCount">The repeat count, until execution is aborted.</param>
    /// <returns>
    ///   <c>true</c> on success; otherwise, <c>false</c>.
    /// </returns>
    public static bool TryInvoke(this Action This, int repeatCount = 1) {
      Contract.Requires(This != null);
      Contract.Requires(repeatCount > 0);

      while (--repeatCount >= 0) {
        try {
          This();
          return (true);
        } catch (Exception) {

        }
      }
      return (false);
    }

    #region Async action calls
    <#for(var i=0;i<17;++i){
      var dataType=i<1?string.Empty:string.Format("<{0}>",string.Join(", ",Enumerable.Range(1,i).Select(j=>"T"+j)));
      var paramList=i<1?string.Empty:string.Join(", ",Enumerable.Range(1,i).Select(j=>"T"+j+" arg"+j))+", ";
      var argList=i<1?string.Empty:string.Join(", ",Enumerable.Range(1,i).Select(j=>"arg"+j))+", ";
    #>

    public static IAsyncResult Async<#=dataType#>(this Action<#=dataType#> @this, <#=paramList#>object state = null) {
      Contract.Requires(@this!=null);
      return (@this.BeginInvoke(<#=argList#>@this.EndInvoke, state));
    }

    public static IAsyncResult BeginInvoke<#=dataType#>(this Action<#=dataType#> @this, <#=paramList#>AsyncCallback callback) {
      Contract.Requires(@this!=null);
      Contract.Requires(callback!=null);
      return (@this.BeginInvoke(<#=argList#>callback, null));
    }

    <#}#>

    #endregion
  }
}