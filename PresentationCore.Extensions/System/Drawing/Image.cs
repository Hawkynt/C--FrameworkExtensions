#region (c)2010-2042 Hawkynt
/*
  This file is part of Hawkynt's .NET Framework extensions.

    Hawkynt's .NET Framework extensions are free software: 
    you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Hawkynt's .NET Framework extensions is distributed in the hope that 
    it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
    warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
    the GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Hawkynt's .NET Framework extensions.  
    If not, see <http://www.gnu.org/licenses/>.
*/
#endregion

#if NET40_OR_GREATER || NET5_0_OR_GREATER || NETCOREAPP || NETSTANDARD
#define SUPPORTS_CONTRACTS 
#endif


/* ATTENTION: This file is generated by a tool. All changes will be reverted upon next run ! */
#if SUPPORTS_CONTRACTS
using System.Diagnostics.Contracts;
#endif
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Windows.Media.Imaging;

// ReSharper disable MemberCanBePrivate.Global
// ReSharper disable UnusedMember.Global
// ReSharper disable PartialTypeWithSinglePart

namespace System.Drawing {

#if COMPILE_TO_EXTENSION_DLL
  public
#else
  internal
#endif
  static partial class ImageExtensions {

    /// <summary>
    /// Converts a GDI+ image into a WPF BitmapImage.
    /// </summary>
    /// <param name="image">The image.</param>
    /// <returns>The BitmapImage</returns>
    public static BitmapImage ToBitmapImage(this Image image) {
#if SUPPORTS_CONTRACTS
      Contract.Requires(image != null);
#endif
      using (var memoryStream = new MemoryStream()) {
        image.Save(memoryStream, ImageFormat.Png);
        memoryStream.Position = 0;
        var result = new BitmapImage();
        result.BeginInit();
        result.CacheOption = BitmapCacheOption.OnLoad;
        result.UriSource = null;
        result.StreamSource = memoryStream;
        result.EndInit();
        return (result);
      }
    }

  }
}
