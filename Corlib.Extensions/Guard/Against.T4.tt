<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
#region (c)2010-2042 Hawkynt
/*
  This file is part of Hawkynt's .NET Framework extensions.

    Hawkynt's .NET Framework extensions are free software: 
    you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Hawkynt's .NET Framework extensions is distributed in the hope that 
    it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
    warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
    the GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Hawkynt's .NET Framework extensions.  
    If not, see <http://www.gnu.org/licenses/>.
*/
#endregion

// ReSharper disable UnusedMember.Global
namespace Guard;

using System.Diagnostics;
using System.Runtime.CompilerServices;

partial class Against {

<#foreach (var type in new[]{"sbyte", "byte", "short", "ushort", "int", "uint", "long", "ulong", "float", "double", "decimal"}) {#>

  /// <summary>
  /// Checks the given parameter for 0 and throws an <see cref="System.ArgumentOutOfRangeException"/>.
  /// </summary>
  /// <param name="value">The value to check.</param>
  /// <param name="caller">The calling method.</param>
  /// <param name="expression">The name or epxression of the value</param>
  /// <exception cref="System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> = 0.</exception>
  [DebuggerHidden]
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static void ValueIsZero(<#=type#> value, [CallerMemberName] string caller = null, [CallerArgumentExpression(nameof(value))] string expression = null) {
    if (value == 0)
      AlwaysThrow.ArgumentOutOfRangeException(expression ?? nameof(value), $@"Parameter ""{expression ?? nameof(value)}"" must not be zero.", caller);
  }

  /// <summary>
  /// Checks the given parameter whether it is outside of a given range and throws an <see cref="System.ArgumentOutOfRangeException"/>.
  /// </summary>
  /// <param name="value">The value to check.</param>
  /// <param name="minimum">The minimum valid value.</param>
  /// <param name="maximum">The maximum valid value.</param>
  /// <param name="caller">The calling method.</param>
  /// <param name="expression">The name or epxression of the value</param>
  /// <exception cref="System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> &lt; <paramref name="minimum"/> or <paramref name="value"/> &gt; <paramref name="maximum"/>.</exception>
  [DebuggerHidden]
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static void ValuesOutOfRange(<#=type#> value, <#=type#> minimum, <#=type#> maximum, [CallerMemberName] string caller = null, [CallerArgumentExpression(nameof(value))] string expression = null) {
    if (value < minimum)
      AlwaysThrow.ArgumentBelowRangeException(expression ?? nameof(value), value, minimum, caller);
    if (value > maximum)
      AlwaysThrow.ArgumentAboveRangeException(expression ?? nameof(value), value, maximum, caller);
  }

  /// <summary>
  /// Checks the given parameter whether it is inside of a given range and throws an <see cref="System.ArgumentOutOfRangeException"/>.
  /// </summary>
  /// <param name="value">The value to check.</param>
  /// <param name="minimum">The minimum invalid value.</param>
  /// <param name="maximum">The maximum invalid value.</param>
  /// <param name="caller">The calling method.</param>
  /// <param name="expression">The name or epxression of the value</param>
  /// <exception cref="System.ArgumentOutOfRangeException">Thrown if <paramref name="minimum"/> &lt;= <paramref name="value"/> &gt;= <paramref name="maximum"/>.</exception>
  [DebuggerHidden]
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static void ValuesInRange(<#=type#> value, <#=type#> minimum, <#=type#> maximum, [CallerMemberName] string caller = null, [CallerArgumentExpression(nameof(value))] string expression = null) {
    if (value >= minimum && value <=maximum)
      AlwaysThrow.ArgumentOutOfRangeException(expression ?? nameof(value), $@"Parameter ""{expression ?? nameof(value)}"" must not be {value} < {minimum} or {value} > {maximum}.", caller);
  }

  /// <summary>
  /// Checks the given parameter whether it is below a given value and throws an <see cref="System.ArgumentOutOfRangeException"/>.
  /// </summary>
  /// <param name="value">The value to check.</param>
  /// <param name="minimum">The minimum valid value.</param>
  /// <param name="caller">The calling method.</param>
  /// <param name="expression">The name or epxression of the value</param>
  /// <exception cref="System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> &lt; <paramref name="minimum"/>.</exception>
  [DebuggerHidden]
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static void ValuesBelow(<#=type#> value, <#=type#> minimum, [CallerMemberName] string caller = null, [CallerArgumentExpression(nameof(value))] string expression = null) {
    if (value < minimum)
      AlwaysThrow.ArgumentBelowRangeException(expression ?? nameof(value), value, minimum, caller);
  }

  /// <summary>
  /// Checks the given parameter whether it is below or equal a given value and throws an <see cref="System.ArgumentOutOfRangeException"/>.
  /// </summary>
  /// <param name="value">The value to check.</param>
  /// <param name="minimum">The maximum invalid value.</param>
  /// <param name="caller">The calling method.</param>
  /// <param name="expression">The name or epxression of the value</param>
  /// <exception cref="System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> &lt;= <paramref name="minimum"/>.</exception>
  [DebuggerHidden]
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static void ValuesBelowOrEqual(<#=type#> value, <#=type#> minimum, [CallerMemberName] string caller = null, [CallerArgumentExpression(nameof(value))] string expression = null) {
    if (value <= minimum)
      AlwaysThrow.ArgumentBelowOrEqualRangeException(expression ?? nameof(value), value, minimum, caller);
  }

  /// <summary>
  /// Checks the given parameter whether it is above a given value and throws an <see cref="System.ArgumentOutOfRangeException"/>.
  /// </summary>
  /// <param name="value">The value to check.</param>
  /// <param name="maximum">The maximum valid value.</param>
  /// <param name="caller">The calling method.</param>
  /// <param name="expression">The name or epxression of the value</param>
  /// <exception cref="System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> &gt; <paramref name="maximum"/>.</exception>
  [DebuggerHidden]
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static void ValuesAbove(<#=type#> value, <#=type#> maximum, [CallerMemberName] string caller = null, [CallerArgumentExpression(nameof(value))] string expression = null) {
    if (value > maximum)
      AlwaysThrow.ArgumentAboveRangeException(expression ?? nameof(value), value, maximum, caller);
  }

  /// <summary>
  /// Checks the given parameter whether it is above or equal a given value and throws an <see cref="System.ArgumentOutOfRangeException"/>.
  /// </summary>
  /// <param name="value">The value to check.</param>
  /// <param name="maximum">The minimum invalid value.</param>
  /// <param name="caller">The calling method.</param>
  /// <param name="expression">The name or epxression of the value</param>
  /// <exception cref="System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> &gt;= <paramref name="maximum"/>.</exception>
  [DebuggerHidden]
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static void ValuesAboveOrEqual(<#=type#> value, <#=type#> maximum, [CallerMemberName] string caller = null, [CallerArgumentExpression(nameof(value))] string expression = null) {
    if (value >= maximum)
      AlwaysThrow.ArgumentAboveOrEqualRangeException(expression ?? nameof(value), value, maximum, caller);
  }

<#}#>

<#foreach (var type in new[]{"sbyte", "short", "int", "long", "float", "double", "decimal"}) {#>

  /// <summary>
  /// Checks the given parameter for negative values and throws an <see cref="System.ArgumentOutOfRangeException"/>.
  /// </summary>
  /// <param name="value">The value to check.</param>
  /// <param name="caller">The calling method.</param>
  /// <param name="expression">The name or epxression of the value</param>
  /// <exception cref="System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> &lt; 0.</exception>
  [DebuggerHidden]
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static void NegativeValues(<#=type#> value, [CallerMemberName] string caller = null, [CallerArgumentExpression(nameof(value))] string expression = null) {
    if (value < 0)
      AlwaysThrow.ArgumentBelowRangeException(expression ?? nameof(value), value, 0, caller);
  }

  /// <summary>
  /// Checks the given parameter for negative values and 0 and throws an <see cref="System.ArgumentOutOfRangeException"/>.
  /// </summary>
  /// <param name="value">The value to check.</param>
  /// <param name="caller">The calling method.</param>
  /// <param name="expression">The name or epxression of the value</param>
  /// <exception cref="System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> &lt;= 0.</exception>
  [DebuggerHidden]
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static void NegativeValuesAndZero(<#=type#> value, [CallerMemberName] string caller = null, [CallerArgumentExpression(nameof(value))] string expression = null) {
    if (value <= 0)
      AlwaysThrow.ArgumentBelowOrEqualRangeException(expression ?? nameof(value), value, 0, caller);
  }

  /// <summary>
  /// Checks the given parameter for positive values and throws an <see cref="System.ArgumentOutOfRangeException"/>.
  /// </summary>
  /// <param name="value">The value to check.</param>
  /// <param name="caller">The calling method.</param>
  /// <param name="expression">The name or epxression of the value</param>
  /// <exception cref="System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> &gt; 0.</exception>
  [DebuggerHidden]
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static void PositiveValues(<#=type#> value, [CallerMemberName] string caller = null, [CallerArgumentExpression(nameof(value))] string expression = null) {
    if (value > 0)
      AlwaysThrow.ArgumentAboveRangeException(expression ?? nameof(value), value, 0, caller);
  }

  /// <summary>
  /// Checks the given parameter for positive values and 0 and throws an <see cref="System.ArgumentOutOfRangeException"/>.
  /// </summary>
  /// <param name="value">The value to check.</param>
  /// <param name="caller">The calling method.</param>
  /// <param name="expression">The name or epxression of the value</param>
  /// <exception cref="System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> &gt;= 0.</exception>
  [DebuggerHidden]
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static void PositiveValuesAndZero(<#=type#> value, [CallerMemberName] string caller = null, [CallerArgumentExpression(nameof(value))] string expression = null) {
    if (value >= 0)
      AlwaysThrow.ArgumentAboveOrEqualRangeException(expression ?? nameof(value), value, 0, caller);
  }

<#}#>

<#foreach (var type in new[]{"float", "double"}) {#>
  
  /// <summary>
  /// Checks the given parameter for infinity and throws an <see cref="System.ArgumentOutOfRangeException"/>.
  /// </summary>
  /// <param name="value">The value to check.</param>
  /// <param name="caller">The calling method.</param>
  /// <param name="expression">The name or epxression of the value</param>
  /// <exception cref="System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is either positive or negative infinity.</exception>
  [DebuggerHidden]
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static void ValueIsInfinity(<#=type#> value, [CallerMemberName] string caller = null, [CallerArgumentExpression(nameof(value))] string expression = null) {
    if (<#=type#>.IsInfinity(value))
      AlwaysThrow.ArgumentOutOfRangeException(expression ?? nameof(value), $@"Parameter ""{expression ?? nameof(value)}"" must not be infinity.", caller);
  }

  /// <summary>
  /// Checks the given parameter for positive infinity and throws an <see cref="System.ArgumentOutOfRangeException"/>.
  /// </summary>
  /// <param name="value">The value to check.</param>
  /// <param name="caller">The calling method.</param>
  /// <param name="expression">The name or epxression of the value</param>
  /// <exception cref="System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is positive infinity.</exception>
  [DebuggerHidden]
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static void ValueIsPositiveInfinity(<#=type#> value, [CallerMemberName] string caller = null, [CallerArgumentExpression(nameof(value))] string expression = null) {
    if (<#=type#>.IsPositiveInfinity(value))
      AlwaysThrow.ArgumentOutOfRangeException(expression ?? nameof(value), $@"Parameter ""{expression ?? nameof(value)}"" must not be +infinity.", caller);
  }

  /// <summary>
  /// Checks the given parameter for negative infinity and throws an <see cref="System.ArgumentOutOfRangeException"/>.
  /// </summary>
  /// <param name="value">The value to check.</param>
  /// <param name="caller">The calling method.</param>
  /// <param name="expression">The name or epxression of the value</param>
  /// <exception cref="System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is negative infinity.</exception>
  [DebuggerHidden]
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static void ValueIsNegativeInfinity(<#=type#> value, [CallerMemberName] string caller = null, [CallerArgumentExpression(nameof(value))] string expression = null) {
    if (<#=type#>.IsNegativeInfinity(value))
      AlwaysThrow.ArgumentOutOfRangeException(expression ?? nameof(value), $@"Parameter ""{expression ?? nameof(value)}"" must not be -infinity.", caller);
  }

  /// <summary>
  /// Checks the given parameter for 'not a number' and throws an <see cref="System.ArgumentOutOfRangeException"/>.
  /// </summary>
  /// <param name="value">The value to check.</param>
  /// <param name="caller">The calling method.</param>
  /// <param name="expression">The name or epxression of the value</param>
  /// <exception cref="System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is NaN.</exception>
  [DebuggerHidden]
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static void ValueIsNaN(<#=type#> value, [CallerMemberName] string caller = null, [CallerArgumentExpression(nameof(value))] string expression = null) {
    if (<#=type#>.IsNaN(value))
      AlwaysThrow.ArgumentOutOfRangeException(expression ?? nameof(value), $@"Parameter ""{expression ?? nameof(value)}"" must not be NaN.", caller);
  }

  /// <summary>
  /// Checks the given parameter for any non-numeric value and throws an <see cref="System.ArgumentOutOfRangeException"/>.
  /// </summary>
  /// <param name="value">The value to check.</param>
  /// <param name="caller">The calling method.</param>
  /// <param name="expression">The name or epxression of the value</param>
  /// <exception cref="System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is any infinity or NaN.</exception>
  [DebuggerHidden]
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static void ValueIsNonNumeric(<#=type#> value, [CallerMemberName] string caller = null, [CallerArgumentExpression(nameof(value))] string expression = null) {
    if (<#=type#>.IsInfinity(value) || <#=type#>.IsNaN(value))
      AlwaysThrow.ArgumentOutOfRangeException(expression ?? nameof(value), $@"Parameter ""{expression ?? nameof(value)}"" must not be numeric value ({value}).", caller);
  }

<#}#>

}