<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
#region (c)2010-2042 Hawkynt
/*
  This file is part of Hawkynt's .NET Framework extensions.

    Hawkynt's .NET Framework extensions are free software: 
    you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Hawkynt's .NET Framework extensions is distributed in the hope that 
    it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
    warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
    the GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Hawkynt's .NET Framework extensions.  
    If not, see <http://www.gnu.org/licenses/>.
*/
#endregion

/* ATTENTION: This file is generated by a tool. All changes will be reverted upon next run ! */

using System.Linq;
using Guard;

// This file holds statistical routines on enumerations.

namespace System.Collections.Generic;

public static partial class EnumerableExtensions {
  #region Sum
  #region TimeSpan
  /// <summary>
  /// Sums the specified elements in an enumeration.
  /// </summary>
  /// <param name="this">This enumeration.</param>
  /// <returns>The sum of all given elements.</returns>
  public static TimeSpan Sum(this IEnumerable<TimeSpan> @this) {
    Against.ThisIsNull(@this);

    return TimeSpan.FromMilliseconds(@this.Select(i => i.TotalMilliseconds).Sum());
  }

  /// <summary>
  /// Sums the specified elements in an enumeration using a selector.
  /// </summary>
  /// <typeparam name="TIn">The type of the items in the enumeration.</typeparam>
  /// <param name="this">This Enumeration.</param>
  /// <param name="selector">The selector.</param>
  /// <returns>The sum of all given elements.</returns>
  public static TimeSpan Sum<TIn>(this IEnumerable<TIn> @this, Func<TIn, TimeSpan> selector) {
    Against.ThisIsNull(@this);
    Against.ArgumentIsNull(selector);

    return @this.Select(selector).Sum();
  }
  #endregion
<#foreach(var i in new[]{"ushort","uint","ulong"}){#>
  #region <#=i#>
  /// <summary>
  /// Sums the specified elements in an enumeration.
  /// </summary>
  /// <param name="this">This enumeration.</param>
  /// <returns>The sum of all given elements.</returns>
  public static <#=i#> Sum(this IEnumerable<<#=i#>> @this) {
    Against.ThisIsNull(@this);

    // ReSharper disable once RedundantCast
    return @this.Aggregate((<#=i#>)0, (current, i) => (<#=i#>)(current + i));
  }

  /// <summary>
  /// Sums the specified elements in an enumeration using a selector.
  /// </summary>
  /// <typeparam name="TIn">The type of the items in the enumeration.</typeparam>
  /// <param name="this">This Enumeration.</param>
  /// <param name="selector">The selector.</param>
  /// <returns>The sum of all given elements.</returns>
  public static <#=i#> Sum<TIn>(this IEnumerable<TIn> @this, Func<TIn, <#=i#>> selector) {
    Against.ThisIsNull(@this);
    Against.ArgumentIsNull(selector);

    return @this.Select(selector).Sum();
  }
  #endregion
<#}#>

  #endregion
<#foreach(var j in new[]{"Min","Max"}){#>
  #region <#=j#>
<#foreach(var i in new[]{"sbyte","byte","short","ushort","uint","ulong"}){#>
  #region <#=i#>
  public static <#=i#> <#=j#>(this IEnumerable<<#=i#>> @this) {
    Against.ThisIsNull(@this);

    using var enumerator=@this.GetEnumerator();
    if(!enumerator.MoveNext())
      AlwaysThrow.InvalidOperationException("Enumeration is empty.");
        
    var result = enumerator.Current;
    while(enumerator.MoveNext())
      if (enumerator.Current <#=j=="Min"?"<":">"#> result)
        result = enumerator.Current;
      
    return result;
  }

  public static <#=i#> <#=j#><TItem>(this IEnumerable<TItem> @this, Func<TItem, <#=i#>> selector) {
    Against.ThisIsNull(@this);
    Against.ArgumentIsNull(selector);

    return @this.Select(selector).<#=j#>();
  }
  #endregion
<#}#>
  #endregion
  #region <#=j#>OrDefault
<#foreach(var i in new[]{"sbyte","byte","short","ushort","int","uint","long","ulong","float","double","decimal"}){#>
  #region <#=i#>
  public static <#=i#> <#=j#>OrDefault(this IEnumerable<<#=i#>> @this, <#=i#> defaultValue = default) {
    Against.ThisIsNull(@this);

    var items = @this as ICollection<<#=i#>> ?? @this.ToList();
    return items.Count == 0 ? defaultValue : items.<#=j#>();
  }

  public static <#=i#> <#=j#>OrDefault<TItem>(this IEnumerable<TItem> @this, Func<TItem, <#=i#>> selector, <#=i#> defaultValue = default) {
    Against.ThisIsNull(@this);
    Against.ArgumentIsNull(selector);

    return @this.Select(selector).<#=j#>OrDefault();
  }
  #endregion
  #region <#=i#>?
  public static <#=i#>? <#=j#>OrDefault(this IEnumerable<<#=i#>?> @this, <#=i#>? defaultValue = null) {
    Against.ThisIsNull(@this);

    var items = @this.Where(x => x.HasValue).ToList();
    // ReSharper disable once PossibleInvalidOperationException
    return items.Count == 0 ? defaultValue : items.<#=j#>(x=>x.Value);
  }
  #endregion
<#}#>
  #endregion
<#}#>
  #region AverageOrDefault
<#foreach(var i in new[]{"float","double","decimal"}){#>
  #region <#=i#>
  public static <#=i#> AverageOrDefault(this IEnumerable<<#=i#>> @this, <#=i#> defaultValue = default) {
    if (@this == null)
      return defaultValue;

    <#=i#> result = 0;
    var count = 0;
    foreach (var item in @this) {
      result += item;
      ++count;
    }

    return count == 0 ? defaultValue : result / count;
  }

  public static <#=i#> AverageOrDefault<TItem>(this IEnumerable<TItem> @this, Func<TItem,<#=i#>> selector, <#=i#> defaultValue = default) {
    Against.ArgumentIsNull(selector);

    return @this == null ? defaultValue : @this.Select(selector).AverageOrDefault(defaultValue);
  }
  #endregion
  #region <#=i#>?
  public static <#=i#>? AverageOrDefault(this IEnumerable<<#=i#>?> @this, <#=i#>? defaultValue = null) {
    if (@this == null)
      return defaultValue;

    <#=i#> result = 0;
    var count = 0;
    foreach (var item in @this.Where(x => x.HasValue)) {
      result += item.Value;
      ++count;
    }

    return count == 0 ? defaultValue : result / count;
  }
  #endregion
<#}#>
  #region TimeSpan
  /// <summary>
  /// Averages the specified elements in an enumeration.
  /// </summary>
  /// <param name="this">This enumeration.</param>
  /// <returns>The average of all given elements.</returns>
  public static TimeSpan Average(this IEnumerable<TimeSpan> @this) {
    Against.ThisIsNull(@this);

    return new((long)@this.Average(i => i.Ticks));
  }

  /// <summary>
  /// Averages the specified elements in an enumeration using a selector.
  /// </summary>
  /// <typeparam name="TIn">The type of the items in the enumeration.</typeparam>
  /// <param name="this">This Enumeration.</param>
  /// <param name="selector">The selector.</param>
  /// <returns>The average of all given elements.</returns>
  public static TimeSpan Average<TIn>(this IEnumerable<TIn> @this, Func<TIn, TimeSpan> selector) {
    Against.ThisIsNull(@this);
    Against.ArgumentIsNull(selector);

    return new((long)@this.Average(i => selector(i).Ticks));
  }
  #endregion
  #endregion
  #region Variance
<#foreach(var i in new[]{"float","double","decimal"}){#>
  #region <#=i#>
  /// <summary>
  /// Variance is the measure of the amount of variation of all the scores for a variable (not just the extremes which give the range).
  /// </summary>
  /// <param name="this">This Enumeration.</param>
  /// <returns></returns>
  public static <#=i#> Variance(this IEnumerable<<#=i#>> @this) {
    Against.ThisIsNull(@this);

    var collection = @this as ICollection<<#=i#>> ?? @this.ToList();
    var count = collection.Count;
    var mean = collection.Aggregate((<#=i#>)0, (r, x) => r + x) / count;
    var sum = collection.Aggregate((<#=i#>)0, (r, x) => r + (x - mean) * (x - mean));
    var result = sum / (count - 1);
    return result;
  }
    
  /// <summary>
  /// Variance is the measure of the amount of variation of all the scores for a variable (not just the extremes which give the range).
  /// </summary>
  /// <param name="this">This Enumeration.</param>
  /// <param name="selector">The selector.</param>
  /// <returns></returns>
  public static <#=i#> Variance<TItem>(this IEnumerable<TItem> @this, Func<TItem,<#=i#>> selector) {
    Against.ThisIsNull(@this);
    Against.ArgumentIsNull(selector);

    return @this.Select(selector).Variance();
  }
  #endregion
  #region <#=i#>?
  /// <summary>
  /// Variance is the measure of the amount of variation of all the scores for a variable (not just the extremes which give the range).
  /// </summary>
  /// <param name="this">This Enumeration.</param>
  /// <returns></returns>
  public static <#=i#> Variance(this IEnumerable<<#=i#>?> @this) {
    Against.ThisIsNull(@this);

    // ReSharper disable once PossibleInvalidOperationException
    return @this.Where(x => x.HasValue).Variance(x => x.Value);
  }
  #endregion
<#}#>
  #endregion
  #region Standard Deviation
<#foreach(var i in new[]{"float","double","decimal"}){#>
  #region <#=i#>
  /// <summary>
  /// The Standard Deviation of a statistical population, a data set, or a probability distribution is the square root of its variance.
  /// </summary>
  /// <param name="this">This Enumeration.</param>
  /// <returns></returns>
  public static <#=i#> StdDev(this IEnumerable<<#=i#>> @this) => @this.Variance().Sqrt();
    
  /// <summary>
  /// The Standard Deviation of a statistical population, a data set, or a probability distribution is the square root of its variance.
  /// </summary>
  /// <param name="this">This Enumeration.</param>
  /// <param name="selector">The selector.</param>
  /// <returns></returns>
  public static <#=i#> StdDev<TItem>(this IEnumerable<TItem> @this, Func<TItem,<#=i#>> selector) {
    Against.ThisIsNull(@this);
    Against.ArgumentIsNull(selector);

    return @this.Select(selector).StdDev();
  }
  #endregion
  #region <#=i#>?
  /// <summary>
  /// The Standard Deviation of a statistical population, a data set, or a probability distribution is the square root of its variance.
  /// </summary>
  /// <param name="this">This Enumeration.</param>
  /// <returns></returns>
  public static <#=i#> StdDev(this IEnumerable<<#=i#>?> @this) {
    // ReSharper disable once PossibleInvalidOperationException
    return @this.Where(x => x.HasValue).StdDev(x => x.Value);
  }
  #endregion
<#}#>
  #endregion
  #region Center
<#foreach(var i in new[]{"float","double","decimal"}){#>
  #region <#=i#>
  /// <summary>
  /// Median is the number separating the higher half of a sample, a population, or a probability distribution, from the lower half.
  /// </summary>
  /// <param name="this">This Enumeration.</param>
  /// <returns></returns>
  public static <#=i#> Center(this IEnumerable<<#=i#>> @this) {
    Against.ThisIsNull(@this);

    var sortedList = @this.OrderBy(v => v).ToList();
    var index = sortedList.Count >> 1;
    return (sortedList.Count & 1) == 0 ? (sortedList[index] + sortedList[index - 1]) / 2 : sortedList[index];
  }
    
  /// <summary>
  /// Median is the number separating the higher half of a sample, a population, or a probability distribution, from the lower half.
  /// </summary>
  /// <param name="this">This Enumeration.</param>
  /// <param name="selector">The selector.</param>
  /// <returns></returns>
  public static <#=i#> Center<TItem>(this IEnumerable<TItem> @this,Func<TItem,<#=i#>> selector) {
    Against.ThisIsNull(@this);
    Against.ArgumentIsNull(selector);

    return @this.Select(selector).Center();
  }
  #endregion
  #region <#=i#>?
  /// <summary>
  /// Median is the number separating the higher half of a sample, a population, or a probability distribution, from the lower half.
  /// </summary>
  /// <param name="this">This Enumeration.</param>
  /// <returns></returns>
  public static <#=i#> Center(this IEnumerable<<#=i#>?> @this) {
    Against.ThisIsNull(@this);

    // ReSharper disable once PossibleInvalidOperationException
    return @this.Where(x => x.HasValue).Center(x => x.Value);
  }
  #endregion
<#}#>
  #endregion
  #region Median
<#foreach(var i in new[]{"float","double","decimal"}){#>
  #region <#=i#>
  /// <summary>
  /// Median is the number separating the higher half of a sample, a population, or a probability distribution, from the lower half.
  /// </summary>
  /// <param name="this">This Enumeration.</param>
  /// <returns></returns>
  public static <#=i#> Median(this IEnumerable<<#=i#>> @this) {
    Against.ThisIsNull(@this);

    return @this.Min() + @this.Range() / 2;
  }
    
  /// <summary>
  /// Median is the number separating the higher half of a sample, a population, or a probability distribution, from the lower half.
  /// </summary>
  /// <param name="this">This Enumeration.</param>
  /// <param name="selector">The selector.</param>
  /// <returns></returns>
  public static <#=i#> Median<TItem>(this IEnumerable<TItem> @this, Func<TItem,<#=i#>> selector) {
    Against.ThisIsNull(@this);
    Against.ArgumentIsNull(selector);

    return @this.Select(selector).Median();
  }
  #endregion
  #region <#=i#>?
  /// <summary>
  /// Median is the number separating the higher half of a sample, a population, or a probability distribution, from the lower half.
  /// </summary>
  /// <param name="this">This Enumeration.</param>
  /// <returns></returns>
  public static <#=i#> Median(this IEnumerable<<#=i#>?> @this) {
    Against.ThisIsNull(@this);

    // ReSharper disable once PossibleInvalidOperationException
    return @this.Where(x => x.HasValue).Median(x => x.Value);
  }
  #endregion
<#}#>
  #endregion
  #region Mode
  /// <summary>
  /// Mode is the value that occurs the most frequently in a data set or a probability distribution.
  /// </summary>
  /// <typeparam name="T"></typeparam>
  /// <param name="this">This Enumeration.</param>
  /// <returns></returns>
  public static T Mode<T>(this IEnumerable<T> @this) {
    Against.ThisIsNull(@this);

    return (
      from v in @this
      group v by v
        into i
        select new { i.Key, Count = i.Count() } into j
        orderby j.Count descending
        select j.Key
      ).First();
  }
  #endregion
  #region Range
<#foreach(var i in new[]{"sbyte","byte","short","ushort","int","uint","long","ulong","float","double","decimal"}){#>
  #region <#=i#>
  /// <summary>
  /// Range is the length of the smallest interval which contains all the data.
  /// </summary>
  /// <param name="this">This Enumeration.</param>
  /// <returns></returns>
  public static <#=i#> Range(this IEnumerable<<#=i#>> @this) {
    Against.ThisIsNull(@this);

    <#=i#> min;
    <#=i#> max;

    using(var enumerator = @this.GetEnumerator()) {
      if(!enumerator.MoveNext())
        AlwaysThrow.InvalidOperationException("Enumeration is empty.");
        
      min = max = enumerator.Current;
      while (enumerator.MoveNext()) {
        var x = enumerator.Current;
        if (x < min) {
          min = x;
          continue;
        }
        if (x > max)
          max = x;
      }
    }
      
    // ReSharper disable once RedundantCast
    return (<#=i#>)(max - min);
  }
    
  /// <summary>
  /// Range is the length of the smallest interval which contains all the data.
  /// </summary>
  /// <param name="this">This Enumeration.</param>
  /// <param name="selector">The selector.</param>
  /// <returns></returns>
  public static <#=i#> Range<TItem>(this IEnumerable<TItem> @this, Func<TItem,<#=i#>> selector) {
    Against.ThisIsNull(@this);
    Against.ArgumentIsNull(selector);

    return @this.Select(selector).Range();
  }
  #endregion
  #region <#=i#>?
  /// <summary>
  /// Range is the length of the smallest interval which contains all the data.
  /// </summary>
  /// <param name="this">This Enumeration.</param>
  /// <returns></returns>
  public static <#=i#> Range(this IEnumerable<<#=i#>?> @this) {
    Against.ThisIsNull(@this);

    // ReSharper disable once PossibleInvalidOperationException
    return @this.Where(x => x.HasValue).Range(x => x.Value);
  }
  #endregion
<#}#> 
  #endregion
  #region Covariance
<#foreach(var i in new[]{"float","double","decimal"}){#>
  #region <#=i#>
  /// <summary>
  /// Covariance is a measure of how much two variables change together.
  /// </summary>
  /// <param name="this">This Enumeration.</param>
  /// <param name="other">The other enumeration.</param>
  /// <returns></returns>
  public static <#=i#> Covariance(this IEnumerable<<#=i#>> @this, IEnumerable<<#=i#>> other) {
    Against.ThisIsNull(@this);
    Against.ArgumentIsNull(other);

    var a = @this as IList<<#=i#>> ?? @this.ToList();
    var b = other as IList<<#=i#>> ?? other.ToList();
    var avga = a.Average();
    var avgb = b.Average();
    var result = (<#=i#>)0;
    var length = Math.Min(a.Count, b.Count);
    for (var i = length - 1; i >= 0; --i)
      result += (a[i] - avga) * (b[i] - avgb);

    return (result / length);
  }

  /// <summary>
  /// Covariance is a measure of how much two variables change together.
  /// </summary>
  /// <param name="this">This Enumeration.</param>
  /// <param name="other">The other enumeration.</param>
  /// <param name="selector">The selector.</param>
  /// <returns></returns>
  public static <#=i#> Covariance<TItem>(this IEnumerable<TItem> @this, IEnumerable<TItem> other, Func<TItem,<#=i#>> selector) {
    Against.ThisIsNull(@this);
    Against.ArgumentIsNull(other);
    Against.ArgumentIsNull(selector);

    return @this.Select(selector).Covariance(other.Select(selector));
  }
    
  /// <summary>
  /// Covariance is a measure of how much two variables change together.
  /// </summary>
  /// <param name="this">This Enumeration.</param>
  /// <param name="other">The other enumeration.</param>
  /// <param name="selector1">The selector.</param>
  /// <param name="selector2">The selector for the other enumeration.</param>
  /// <returns></returns>
  public static <#=i#> Covariance<TItem>(this IEnumerable<TItem> @this, Func<TItem,<#=i#>> selector1, IEnumerable<TItem> other, Func<TItem,<#=i#>> selector2) {
    Against.ThisIsNull(@this);
    Against.ArgumentIsNull(selector1);
    Against.ArgumentIsNull(other);
    Against.ArgumentIsNull(selector2);

    return @this.Select(selector1).Covariance(other.Select(selector2));
  }
  #endregion
  #region <#=i#>?
  /// <summary>
  /// Covariance is a measure of how much two variables change together.
  /// </summary>
  /// <param name="this">This Enumeration.</param>
  /// <param name="other">The other enumeration.</param>
  /// <returns></returns>
  public static <#=i#> Covariance(this IEnumerable<<#=i#>?> @this, IEnumerable<<#=i#>?> other) {
    Against.ThisIsNull(@this);
    Against.ArgumentIsNull(other);

    // ReSharper disable PossibleInvalidOperationException
    return @this.Where(x => x.HasValue).Covariance(x => x.Value, other.Where(x => x.HasValue), x => x.Value);
    // ReSharper restore PossibleInvalidOperationException
  }
  #endregion
<#}#>
  #endregion
}
