<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
#region (c)2010-2042 Hawkynt
/*
  This file is part of Hawkynt's .NET Framework extensions.

    Hawkynt's .NET Framework extensions are free software: 
    you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Hawkynt's .NET Framework extensions is distributed in the hope that 
    it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
    warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
    the GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Hawkynt's .NET Framework extensions.  
    If not, see <http://www.gnu.org/licenses/>.
*/
#endregion

/* ATTENTION: This file is generated by a tool. All changes will be reverted upon next run ! */

using System.Text;
using Guard;
#if SUPPORTS_INLINING
using System.Runtime.CompilerServices;
#endif

namespace System;

// ReSharper disable BuiltInTypeReferenceStyle
<# foreach (var type in new[] { "Byte", "SByte", "UInt16", "Int16", "UInt32", "Int32", "UInt64", "Int64" }) {#>

// ReSharper disable once PartialTypeWithSinglePart
#if COMPILE_TO_EXTENSION_DLL
public
#else
internal
#endif
static partial class <#=type#>Extensions {

  /// <summary>
  /// Repeats an <see cref="Action"/> a given number of times.
  /// </summary>
  /// <param name="this">How often the <see cref="Action"/> should be performed</param>
  /// <param name="action">What to execute</param>
  public static void Times(this <#=type#> @this, Action action) {
    Against.ArgumentIsNull(action);
    Against.ValuesBelow(@this,  <#=GetOne(type)#>);

    while (@this-- > 0)
      action();
  }

  /// <summary>
  /// Repeats an <see cref="Action{T}"/> a given number of times.
  /// </summary>
  /// <param name="this">How often the <see cref="Action{T}"/> should be performed</param>
  /// <param name="action">What to execute</param>
  public static void Times(this <#=type#> @this, Action<<#=type#>> action) {
    Against.ArgumentIsNull(action);
    Against.ValuesBelow(@this,  <#=GetOne(type)#>);

    <#=type#> i = 0;
    while (i < @this)
      action(i++);
  }

  /// <summary>
  /// Repeats a <see cref="string"/> multiple times.
  /// </summary>
  /// <param name="this">How often the string should be repeated</param>
  /// <param name="text">The text to repeat</param>
  /// <returns>The concatenated <see cref="string"/></returns>
  <# if (NeedsCast(type)) {#>
  public static string Times(this <#=type#> @this, string text) {
    Against.ValuesBelow(@this,  <#=GetOne(type)#>);

    if (text == null)
      return null;

    StringBuilder result = new(<#if (CanComputeCapacity(type)) {#>text.Length * @this<#} else {#>text.Length<#}#>);
    while (@this-- > 0)
      result.Append(text);

    return result.ToString();
  }
  <#} else {#>
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static string Times(this <#=type#> @this, string text)
    => text.Repeat(@this)
    ;
  <#}#>

  /// <summary>
  /// Repeats the given <see cref="char"/> multiple times
  /// </summary>
  /// <param name="this">The number of times to repeat the <see cref="char"/></param>
  /// <param name="character">The <see cref="char"/> to repeat</param>
  /// <returns>A <see cref="string"/> with containing the <see cref="char"/> n times</returns>
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static string Times(this <#=type#> @this, char character) {
    Against.ValuesBelow(@this,  <#=GetOne(type)#>);

    return new(character, <#if (NeedsCast(type)) {#>(int)<#}#>@this);
  }

}
<#}#>

<#+
  bool IsSigned(string typeName) => typeName == "SByte" || typeName == "Int16" || typeName == "Int32" || typeName == "Int64";
  bool CanComputeCapacity(string typeName) => typeName != "UInt32" && typeName != "UInt64" && typeName != "Int64";
  bool NeedsCast(string typeName) => typeName == "UInt32" || typeName == "UInt64" || typeName == "Int64";
  string GetOne(string typeName) => NeedsCast(typeName) || typeName == "Int32" ? "1" : "(" + typeName + ")1";
#>