#region (c)2010-2042 Hawkynt
/*
  This file is part of Hawkynt's .NET Framework extensions.

    Hawkynt's .NET Framework extensions are free software:
    you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Hawkynt's .NET Framework extensions is distributed in the hope that
    it will be useful, but WITHOUT ANY WARRANTY; without even the implied
    warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
    the GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Hawkynt's .NET Framework extensions.
    If not, see <http://www.gnu.org/licenses/>.
*/
#endregion

/* ATTENTION: This file is generated by a tool. All changes will be reverted upon next run ! */

using System.Runtime.InteropServices;

#if SUPPORTS_INLINING
using System.Runtime.CompilerServices;
#endif

// ReSharper disable UnusedMember.Local
internal static class MemoryManipulation {

  [StructLayout(LayoutKind.Sequential, Size = 1)] 
  public struct Block1 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block1* @this, Block1* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block1* @this, Block1* other) {
      return *(byte*)@this == *(byte*) other;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block1* @this, Block1* other) {
      return *(byte*)@this == *(byte*) other;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block1* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block1* @this, byte value) {
      *(byte*)@this = value;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block1* @this, byte value) {
      *(byte*)@this = value;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block1* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block1* @this) {
      *(byte*)@this = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block1* @this) {
      *(byte*)@this = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block1* @this, Block1* operand, Block1* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block1* @this, Block1* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block1* @this, Block1* operand, Block1* target) {
      var result0 = *(byte*)@this;
      result0 &= *(byte*)operand;
      *(byte*)target = result0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block1* @this, Block1* operand, Block1* target) {
      var result0 = *(byte*)@this;
      result0 &= *(byte*)operand;
      *(byte*)target = result0;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block1* @this, Block1* operand, Block1* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block1* @this, Block1* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block1* @this, Block1* operand, Block1* target) {
      var result0 = *(byte*)@this;
      result0 &= *(byte*)operand;
      result0 = _Not(result0);
      *(byte*)target = result0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block1* @this, Block1* operand, Block1* target) {
      var result0 = *(byte*)@this;
      result0 &= *(byte*)operand;
      result0 = _Not(result0);
      *(byte*)target = result0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block1* @this, Block1* operand, Block1* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block1* @this, Block1* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block1* @this, Block1* operand, Block1* target) {
      var result0 = *(byte*)@this;
      result0 |= *(byte*)operand;
      *(byte*)target = result0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block1* @this, Block1* operand, Block1* target) {
      var result0 = *(byte*)@this;
      result0 |= *(byte*)operand;
      *(byte*)target = result0;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block1* @this, Block1* operand, Block1* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block1* @this, Block1* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block1* @this, Block1* operand, Block1* target) {
      var result0 = *(byte*)@this;
      result0 |= *(byte*)operand;
      result0 = _Not(result0);
      *(byte*)target = result0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block1* @this, Block1* operand, Block1* target) {
      var result0 = *(byte*)@this;
      result0 |= *(byte*)operand;
      result0 = _Not(result0);
      *(byte*)target = result0;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block1* @this, Block1* operand, Block1* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block1* @this, Block1* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block1* @this, Block1* operand, Block1* target) {
      var result0 = *(byte*)@this;
      result0 ^= *(byte*)operand;
      *(byte*)target = result0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block1* @this, Block1* operand, Block1* target) {
      var result0 = *(byte*)@this;
      result0 ^= *(byte*)operand;
      *(byte*)target = result0;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block1* @this, Block1* operand, Block1* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block1* @this, Block1* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block1* @this, Block1* operand, Block1* target) {
      var result0 = *(byte*)@this;
      result0 ^= *(byte*)operand;
      result0 = _Not(result0);
      *(byte*)target = result0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block1* @this, Block1* operand, Block1* target) {
      var result0 = *(byte*)@this;
      result0 ^= *(byte*)operand;
      result0 = _Not(result0);
      *(byte*)target = result0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block1* @this, Block1* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block1* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block1* @this, Block1* target) {
      var result0 = *(byte*)@this;
      result0 = _Not(result0);
      *(byte*)target = result0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block1* @this, Block1* target) {
      var result0 = *(byte*)@this;
      result0 = _Not(result0);
      *(byte*)target = result0;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 2)] 
  public struct Block2 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block2* @this, Block2* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block2* @this, Block2* other) {
      return *(ushort*)@this == *(ushort*) other;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block2* @this, Block2* other) {
      return *(ushort*)@this == *(ushort*) other;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block2* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block2* @this, byte value) {
      var word = (ushort)(0x0101 * value);
      *(ushort*)@this = word;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block2* @this, byte value) {
      var word = (ushort)(0x0101 * value);
      *(ushort*)@this = word;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block2* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block2* @this) {
      *(ushort*)@this = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block2* @this) {
      *(ushort*)@this = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block2* @this, Block2* operand, Block2* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block2* @this, Block2* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block2* @this, Block2* operand, Block2* target) {
      var result0 = *(ushort*)@this;
      result0 &= *(ushort*)operand;
      *(ushort*)target = result0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block2* @this, Block2* operand, Block2* target) {
      var result0 = *(ushort*)@this;
      result0 &= *(ushort*)operand;
      *(ushort*)target = result0;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block2* @this, Block2* operand, Block2* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block2* @this, Block2* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block2* @this, Block2* operand, Block2* target) {
      var result0 = *(ushort*)@this;
      result0 &= *(ushort*)operand;
      result0 = _Not(result0);
      *(ushort*)target = result0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block2* @this, Block2* operand, Block2* target) {
      var result0 = *(ushort*)@this;
      result0 &= *(ushort*)operand;
      result0 = _Not(result0);
      *(ushort*)target = result0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block2* @this, Block2* operand, Block2* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block2* @this, Block2* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block2* @this, Block2* operand, Block2* target) {
      var result0 = *(ushort*)@this;
      result0 |= *(ushort*)operand;
      *(ushort*)target = result0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block2* @this, Block2* operand, Block2* target) {
      var result0 = *(ushort*)@this;
      result0 |= *(ushort*)operand;
      *(ushort*)target = result0;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block2* @this, Block2* operand, Block2* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block2* @this, Block2* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block2* @this, Block2* operand, Block2* target) {
      var result0 = *(ushort*)@this;
      result0 |= *(ushort*)operand;
      result0 = _Not(result0);
      *(ushort*)target = result0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block2* @this, Block2* operand, Block2* target) {
      var result0 = *(ushort*)@this;
      result0 |= *(ushort*)operand;
      result0 = _Not(result0);
      *(ushort*)target = result0;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block2* @this, Block2* operand, Block2* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block2* @this, Block2* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block2* @this, Block2* operand, Block2* target) {
      var result0 = *(ushort*)@this;
      result0 ^= *(ushort*)operand;
      *(ushort*)target = result0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block2* @this, Block2* operand, Block2* target) {
      var result0 = *(ushort*)@this;
      result0 ^= *(ushort*)operand;
      *(ushort*)target = result0;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block2* @this, Block2* operand, Block2* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block2* @this, Block2* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block2* @this, Block2* operand, Block2* target) {
      var result0 = *(ushort*)@this;
      result0 ^= *(ushort*)operand;
      result0 = _Not(result0);
      *(ushort*)target = result0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block2* @this, Block2* operand, Block2* target) {
      var result0 = *(ushort*)@this;
      result0 ^= *(ushort*)operand;
      result0 = _Not(result0);
      *(ushort*)target = result0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block2* @this, Block2* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block2* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block2* @this, Block2* target) {
      var result0 = *(ushort*)@this;
      result0 = _Not(result0);
      *(ushort*)target = result0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block2* @this, Block2* target) {
      var result0 = *(ushort*)@this;
      result0 = _Not(result0);
      *(ushort*)target = result0;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 3)] 
  public struct Block3 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block3* @this, Block3* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block3* @this, Block3* other) {
      var result0 = *(ushort*)@this;
      var result1 = ((byte*)@this)[2];
      result0 ^= *(ushort*)other;
      result1 ^= ((byte*)other)[2];
      result0 |= result1;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block3* @this, Block3* other) {
      var result0 = *(ushort*)@this;
      var result1 = ((byte*)@this)[2];
      result0 ^= *(ushort*)other;
      result1 ^= ((byte*)other)[2];
      result0 |= result1;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block3* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block3* @this, byte value) {
      var word = (ushort)(0x0101 * value);
      *(ushort*)@this = word;
      ((byte*)@this)[2] = value;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block3* @this, byte value) {
      var word = (ushort)(0x0101 * value);
      *(ushort*)@this = word;
      ((byte*)@this)[2] = value;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block3* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block3* @this) {
      *(ushort*)@this = 0;
      ((byte*)@this)[2] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block3* @this) {
      *(ushort*)@this = 0;
      ((byte*)@this)[2] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block3* @this, Block3* operand, Block3* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block3* @this, Block3* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block3* @this, Block3* operand, Block3* target) {
      var result0 = *(ushort*)@this;
      var result1 = ((byte*)@this)[2];
      result0 &= *(ushort*)operand;
      result1 &= ((byte*)operand)[2];
      *(ushort*)target = result0;
      ((byte*)target)[2] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block3* @this, Block3* operand, Block3* target) {
      var result0 = *(ushort*)@this;
      var result1 = ((byte*)@this)[2];
      result0 &= *(ushort*)operand;
      result1 &= ((byte*)operand)[2];
      *(ushort*)target = result0;
      ((byte*)target)[2] = result1;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block3* @this, Block3* operand, Block3* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block3* @this, Block3* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block3* @this, Block3* operand, Block3* target) {
      var result0 = *(ushort*)@this;
      var result1 = ((byte*)@this)[2];
      result0 &= *(ushort*)operand;
      result1 &= ((byte*)operand)[2];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(ushort*)target = result0;
      ((byte*)target)[2] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block3* @this, Block3* operand, Block3* target) {
      var result0 = *(ushort*)@this;
      var result1 = ((byte*)@this)[2];
      result0 &= *(ushort*)operand;
      result1 &= ((byte*)operand)[2];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(ushort*)target = result0;
      ((byte*)target)[2] = result1;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block3* @this, Block3* operand, Block3* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block3* @this, Block3* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block3* @this, Block3* operand, Block3* target) {
      var result0 = *(ushort*)@this;
      var result1 = ((byte*)@this)[2];
      result0 |= *(ushort*)operand;
      result1 |= ((byte*)operand)[2];
      *(ushort*)target = result0;
      ((byte*)target)[2] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block3* @this, Block3* operand, Block3* target) {
      var result0 = *(ushort*)@this;
      var result1 = ((byte*)@this)[2];
      result0 |= *(ushort*)operand;
      result1 |= ((byte*)operand)[2];
      *(ushort*)target = result0;
      ((byte*)target)[2] = result1;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block3* @this, Block3* operand, Block3* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block3* @this, Block3* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block3* @this, Block3* operand, Block3* target) {
      var result0 = *(ushort*)@this;
      var result1 = ((byte*)@this)[2];
      result0 |= *(ushort*)operand;
      result1 |= ((byte*)operand)[2];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(ushort*)target = result0;
      ((byte*)target)[2] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block3* @this, Block3* operand, Block3* target) {
      var result0 = *(ushort*)@this;
      var result1 = ((byte*)@this)[2];
      result0 |= *(ushort*)operand;
      result1 |= ((byte*)operand)[2];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(ushort*)target = result0;
      ((byte*)target)[2] = result1;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block3* @this, Block3* operand, Block3* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block3* @this, Block3* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block3* @this, Block3* operand, Block3* target) {
      var result0 = *(ushort*)@this;
      var result1 = ((byte*)@this)[2];
      result0 ^= *(ushort*)operand;
      result1 ^= ((byte*)operand)[2];
      *(ushort*)target = result0;
      ((byte*)target)[2] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block3* @this, Block3* operand, Block3* target) {
      var result0 = *(ushort*)@this;
      var result1 = ((byte*)@this)[2];
      result0 ^= *(ushort*)operand;
      result1 ^= ((byte*)operand)[2];
      *(ushort*)target = result0;
      ((byte*)target)[2] = result1;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block3* @this, Block3* operand, Block3* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block3* @this, Block3* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block3* @this, Block3* operand, Block3* target) {
      var result0 = *(ushort*)@this;
      var result1 = ((byte*)@this)[2];
      result0 ^= *(ushort*)operand;
      result1 ^= ((byte*)operand)[2];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(ushort*)target = result0;
      ((byte*)target)[2] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block3* @this, Block3* operand, Block3* target) {
      var result0 = *(ushort*)@this;
      var result1 = ((byte*)@this)[2];
      result0 ^= *(ushort*)operand;
      result1 ^= ((byte*)operand)[2];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(ushort*)target = result0;
      ((byte*)target)[2] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block3* @this, Block3* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block3* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block3* @this, Block3* target) {
      var result0 = *(ushort*)@this;
      var result1 = ((byte*)@this)[2];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(ushort*)target = result0;
      ((byte*)target)[2] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block3* @this, Block3* target) {
      var result0 = *(ushort*)@this;
      var result1 = ((byte*)@this)[2];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(ushort*)target = result0;
      ((byte*)target)[2] = result1;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 4)] 
  public struct Block4 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block4* @this, Block4* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block4* @this, Block4* other) {
      return *(uint*)@this == *(uint*) other;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block4* @this, Block4* other) {
      return *(uint*)@this == *(uint*) other;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block4* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block4* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block4* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block4* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block4* @this) {
      *(uint*)@this = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block4* @this) {
      *(uint*)@this = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block4* @this, Block4* operand, Block4* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block4* @this, Block4* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block4* @this, Block4* operand, Block4* target) {
      var result0 = *(uint*)@this;
      result0 &= *(uint*)operand;
      *(uint*)target = result0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block4* @this, Block4* operand, Block4* target) {
      var result0 = *(uint*)@this;
      result0 &= *(uint*)operand;
      *(uint*)target = result0;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block4* @this, Block4* operand, Block4* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block4* @this, Block4* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block4* @this, Block4* operand, Block4* target) {
      var result0 = *(uint*)@this;
      result0 &= *(uint*)operand;
      result0 = _Not(result0);
      *(uint*)target = result0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block4* @this, Block4* operand, Block4* target) {
      var result0 = *(uint*)@this;
      result0 &= *(uint*)operand;
      result0 = _Not(result0);
      *(uint*)target = result0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block4* @this, Block4* operand, Block4* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block4* @this, Block4* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block4* @this, Block4* operand, Block4* target) {
      var result0 = *(uint*)@this;
      result0 |= *(uint*)operand;
      *(uint*)target = result0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block4* @this, Block4* operand, Block4* target) {
      var result0 = *(uint*)@this;
      result0 |= *(uint*)operand;
      *(uint*)target = result0;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block4* @this, Block4* operand, Block4* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block4* @this, Block4* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block4* @this, Block4* operand, Block4* target) {
      var result0 = *(uint*)@this;
      result0 |= *(uint*)operand;
      result0 = _Not(result0);
      *(uint*)target = result0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block4* @this, Block4* operand, Block4* target) {
      var result0 = *(uint*)@this;
      result0 |= *(uint*)operand;
      result0 = _Not(result0);
      *(uint*)target = result0;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block4* @this, Block4* operand, Block4* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block4* @this, Block4* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block4* @this, Block4* operand, Block4* target) {
      var result0 = *(uint*)@this;
      result0 ^= *(uint*)operand;
      *(uint*)target = result0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block4* @this, Block4* operand, Block4* target) {
      var result0 = *(uint*)@this;
      result0 ^= *(uint*)operand;
      *(uint*)target = result0;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block4* @this, Block4* operand, Block4* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block4* @this, Block4* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block4* @this, Block4* operand, Block4* target) {
      var result0 = *(uint*)@this;
      result0 ^= *(uint*)operand;
      result0 = _Not(result0);
      *(uint*)target = result0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block4* @this, Block4* operand, Block4* target) {
      var result0 = *(uint*)@this;
      result0 ^= *(uint*)operand;
      result0 = _Not(result0);
      *(uint*)target = result0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block4* @this, Block4* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block4* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block4* @this, Block4* target) {
      var result0 = *(uint*)@this;
      result0 = _Not(result0);
      *(uint*)target = result0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block4* @this, Block4* target) {
      var result0 = *(uint*)@this;
      result0 = _Not(result0);
      *(uint*)target = result0;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 5)] 
  public struct Block5 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block5* @this, Block5* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block5* @this, Block5* other) {
      var result0 = *(uint*)@this;
      var result1 = ((byte*)@this)[4];
      result0 ^= *(uint*)other;
      result1 ^= ((byte*)other)[4];
      result0 |= result1;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block5* @this, Block5* other) {
      var result0 = *(uint*)@this;
      var result1 = ((byte*)@this)[4];
      result0 ^= *(uint*)other;
      result1 ^= ((byte*)other)[4];
      result0 |= result1;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block5* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block5* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((byte*)@this)[4] = value;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block5* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((byte*)@this)[4] = value;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block5* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block5* @this) {
      *(uint*)@this = 0;
      ((byte*)@this)[4] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block5* @this) {
      *(uint*)@this = 0;
      ((byte*)@this)[4] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block5* @this, Block5* operand, Block5* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block5* @this, Block5* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block5* @this, Block5* operand, Block5* target) {
      var result0 = *(uint*)@this;
      var result1 = ((byte*)@this)[4];
      result0 &= *(uint*)operand;
      result1 &= ((byte*)operand)[4];
      *(uint*)target = result0;
      ((byte*)target)[4] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block5* @this, Block5* operand, Block5* target) {
      var result0 = *(uint*)@this;
      var result1 = ((byte*)@this)[4];
      result0 &= *(uint*)operand;
      result1 &= ((byte*)operand)[4];
      *(uint*)target = result0;
      ((byte*)target)[4] = result1;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block5* @this, Block5* operand, Block5* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block5* @this, Block5* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block5* @this, Block5* operand, Block5* target) {
      var result0 = *(uint*)@this;
      var result1 = ((byte*)@this)[4];
      result0 &= *(uint*)operand;
      result1 &= ((byte*)operand)[4];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(uint*)target = result0;
      ((byte*)target)[4] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block5* @this, Block5* operand, Block5* target) {
      var result0 = *(uint*)@this;
      var result1 = ((byte*)@this)[4];
      result0 &= *(uint*)operand;
      result1 &= ((byte*)operand)[4];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(uint*)target = result0;
      ((byte*)target)[4] = result1;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block5* @this, Block5* operand, Block5* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block5* @this, Block5* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block5* @this, Block5* operand, Block5* target) {
      var result0 = *(uint*)@this;
      var result1 = ((byte*)@this)[4];
      result0 |= *(uint*)operand;
      result1 |= ((byte*)operand)[4];
      *(uint*)target = result0;
      ((byte*)target)[4] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block5* @this, Block5* operand, Block5* target) {
      var result0 = *(uint*)@this;
      var result1 = ((byte*)@this)[4];
      result0 |= *(uint*)operand;
      result1 |= ((byte*)operand)[4];
      *(uint*)target = result0;
      ((byte*)target)[4] = result1;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block5* @this, Block5* operand, Block5* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block5* @this, Block5* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block5* @this, Block5* operand, Block5* target) {
      var result0 = *(uint*)@this;
      var result1 = ((byte*)@this)[4];
      result0 |= *(uint*)operand;
      result1 |= ((byte*)operand)[4];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(uint*)target = result0;
      ((byte*)target)[4] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block5* @this, Block5* operand, Block5* target) {
      var result0 = *(uint*)@this;
      var result1 = ((byte*)@this)[4];
      result0 |= *(uint*)operand;
      result1 |= ((byte*)operand)[4];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(uint*)target = result0;
      ((byte*)target)[4] = result1;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block5* @this, Block5* operand, Block5* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block5* @this, Block5* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block5* @this, Block5* operand, Block5* target) {
      var result0 = *(uint*)@this;
      var result1 = ((byte*)@this)[4];
      result0 ^= *(uint*)operand;
      result1 ^= ((byte*)operand)[4];
      *(uint*)target = result0;
      ((byte*)target)[4] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block5* @this, Block5* operand, Block5* target) {
      var result0 = *(uint*)@this;
      var result1 = ((byte*)@this)[4];
      result0 ^= *(uint*)operand;
      result1 ^= ((byte*)operand)[4];
      *(uint*)target = result0;
      ((byte*)target)[4] = result1;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block5* @this, Block5* operand, Block5* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block5* @this, Block5* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block5* @this, Block5* operand, Block5* target) {
      var result0 = *(uint*)@this;
      var result1 = ((byte*)@this)[4];
      result0 ^= *(uint*)operand;
      result1 ^= ((byte*)operand)[4];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(uint*)target = result0;
      ((byte*)target)[4] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block5* @this, Block5* operand, Block5* target) {
      var result0 = *(uint*)@this;
      var result1 = ((byte*)@this)[4];
      result0 ^= *(uint*)operand;
      result1 ^= ((byte*)operand)[4];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(uint*)target = result0;
      ((byte*)target)[4] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block5* @this, Block5* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block5* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block5* @this, Block5* target) {
      var result0 = *(uint*)@this;
      var result1 = ((byte*)@this)[4];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(uint*)target = result0;
      ((byte*)target)[4] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block5* @this, Block5* target) {
      var result0 = *(uint*)@this;
      var result1 = ((byte*)@this)[4];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(uint*)target = result0;
      ((byte*)target)[4] = result1;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 6)] 
  public struct Block6 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block6* @this, Block6* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block6* @this, Block6* other) {
      var result0 = *(uint*)@this;
      var result1 = ((ushort*)@this)[2];
      result0 ^= *(uint*)other;
      result1 ^= ((ushort*)other)[2];
      result0 |= result1;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block6* @this, Block6* other) {
      var result0 = *(uint*)@this;
      var result1 = ((ushort*)@this)[2];
      result0 ^= *(uint*)other;
      result1 ^= ((ushort*)other)[2];
      result0 |= result1;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block6* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block6* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[2] = word;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block6* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[2] = word;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block6* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block6* @this) {
      *(uint*)@this = 0;
      ((ushort*)@this)[2] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block6* @this) {
      *(uint*)@this = 0;
      ((ushort*)@this)[2] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block6* @this, Block6* operand, Block6* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block6* @this, Block6* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block6* @this, Block6* operand, Block6* target) {
      var result0 = *(uint*)@this;
      var result1 = ((ushort*)@this)[2];
      result0 &= *(uint*)operand;
      result1 &= ((ushort*)operand)[2];
      *(uint*)target = result0;
      ((ushort*)target)[2] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block6* @this, Block6* operand, Block6* target) {
      var result0 = *(uint*)@this;
      var result1 = ((ushort*)@this)[2];
      result0 &= *(uint*)operand;
      result1 &= ((ushort*)operand)[2];
      *(uint*)target = result0;
      ((ushort*)target)[2] = result1;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block6* @this, Block6* operand, Block6* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block6* @this, Block6* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block6* @this, Block6* operand, Block6* target) {
      var result0 = *(uint*)@this;
      var result1 = ((ushort*)@this)[2];
      result0 &= *(uint*)operand;
      result1 &= ((ushort*)operand)[2];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(uint*)target = result0;
      ((ushort*)target)[2] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block6* @this, Block6* operand, Block6* target) {
      var result0 = *(uint*)@this;
      var result1 = ((ushort*)@this)[2];
      result0 &= *(uint*)operand;
      result1 &= ((ushort*)operand)[2];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(uint*)target = result0;
      ((ushort*)target)[2] = result1;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block6* @this, Block6* operand, Block6* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block6* @this, Block6* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block6* @this, Block6* operand, Block6* target) {
      var result0 = *(uint*)@this;
      var result1 = ((ushort*)@this)[2];
      result0 |= *(uint*)operand;
      result1 |= ((ushort*)operand)[2];
      *(uint*)target = result0;
      ((ushort*)target)[2] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block6* @this, Block6* operand, Block6* target) {
      var result0 = *(uint*)@this;
      var result1 = ((ushort*)@this)[2];
      result0 |= *(uint*)operand;
      result1 |= ((ushort*)operand)[2];
      *(uint*)target = result0;
      ((ushort*)target)[2] = result1;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block6* @this, Block6* operand, Block6* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block6* @this, Block6* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block6* @this, Block6* operand, Block6* target) {
      var result0 = *(uint*)@this;
      var result1 = ((ushort*)@this)[2];
      result0 |= *(uint*)operand;
      result1 |= ((ushort*)operand)[2];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(uint*)target = result0;
      ((ushort*)target)[2] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block6* @this, Block6* operand, Block6* target) {
      var result0 = *(uint*)@this;
      var result1 = ((ushort*)@this)[2];
      result0 |= *(uint*)operand;
      result1 |= ((ushort*)operand)[2];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(uint*)target = result0;
      ((ushort*)target)[2] = result1;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block6* @this, Block6* operand, Block6* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block6* @this, Block6* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block6* @this, Block6* operand, Block6* target) {
      var result0 = *(uint*)@this;
      var result1 = ((ushort*)@this)[2];
      result0 ^= *(uint*)operand;
      result1 ^= ((ushort*)operand)[2];
      *(uint*)target = result0;
      ((ushort*)target)[2] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block6* @this, Block6* operand, Block6* target) {
      var result0 = *(uint*)@this;
      var result1 = ((ushort*)@this)[2];
      result0 ^= *(uint*)operand;
      result1 ^= ((ushort*)operand)[2];
      *(uint*)target = result0;
      ((ushort*)target)[2] = result1;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block6* @this, Block6* operand, Block6* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block6* @this, Block6* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block6* @this, Block6* operand, Block6* target) {
      var result0 = *(uint*)@this;
      var result1 = ((ushort*)@this)[2];
      result0 ^= *(uint*)operand;
      result1 ^= ((ushort*)operand)[2];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(uint*)target = result0;
      ((ushort*)target)[2] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block6* @this, Block6* operand, Block6* target) {
      var result0 = *(uint*)@this;
      var result1 = ((ushort*)@this)[2];
      result0 ^= *(uint*)operand;
      result1 ^= ((ushort*)operand)[2];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(uint*)target = result0;
      ((ushort*)target)[2] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block6* @this, Block6* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block6* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block6* @this, Block6* target) {
      var result0 = *(uint*)@this;
      var result1 = ((ushort*)@this)[2];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(uint*)target = result0;
      ((ushort*)target)[2] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block6* @this, Block6* target) {
      var result0 = *(uint*)@this;
      var result1 = ((ushort*)@this)[2];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(uint*)target = result0;
      ((ushort*)target)[2] = result1;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 7)] 
  public struct Block7 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block7* @this, Block7* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block7* @this, Block7* other) {
      var result0 = *(uint*)@this;
      var result1 = ((ushort*)@this)[2];
      var result2 = ((byte*)@this)[6];
      result0 ^= *(uint*)other;
      result1 ^= ((ushort*)other)[2];
      result2 ^= ((byte*)other)[6];
      result0 |= result1;
      result0 |= result2;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block7* @this, Block7* other) {
      var result0 = *(uint*)@this;
      var result1 = ((ushort*)@this)[2];
      var result2 = ((byte*)@this)[6];
      result0 ^= *(uint*)other;
      result1 ^= ((ushort*)other)[2];
      result2 ^= ((byte*)other)[6];
      result0 |= result1;
      result0 |= result2;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block7* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block7* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[2] = word;
      ((byte*)@this)[6] = value;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block7* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[2] = word;
      ((byte*)@this)[6] = value;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block7* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block7* @this) {
      *(uint*)@this = 0;
      ((ushort*)@this)[2] = 0;
      ((byte*)@this)[6] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block7* @this) {
      *(uint*)@this = 0;
      ((ushort*)@this)[2] = 0;
      ((byte*)@this)[6] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block7* @this, Block7* operand, Block7* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block7* @this, Block7* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block7* @this, Block7* operand, Block7* target) {
      var result0 = *(uint*)@this;
      var result1 = ((ushort*)@this)[2];
      var result2 = ((byte*)@this)[6];
      result0 &= *(uint*)operand;
      result1 &= ((ushort*)operand)[2];
      result2 &= ((byte*)operand)[6];
      *(uint*)target = result0;
      ((ushort*)target)[2] = result1;
      ((byte*)target)[6] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block7* @this, Block7* operand, Block7* target) {
      var result0 = *(uint*)@this;
      var result1 = ((ushort*)@this)[2];
      var result2 = ((byte*)@this)[6];
      result0 &= *(uint*)operand;
      result1 &= ((ushort*)operand)[2];
      result2 &= ((byte*)operand)[6];
      *(uint*)target = result0;
      ((ushort*)target)[2] = result1;
      ((byte*)target)[6] = result2;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block7* @this, Block7* operand, Block7* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block7* @this, Block7* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block7* @this, Block7* operand, Block7* target) {
      var result0 = *(uint*)@this;
      var result1 = ((ushort*)@this)[2];
      var result2 = ((byte*)@this)[6];
      result0 &= *(uint*)operand;
      result1 &= ((ushort*)operand)[2];
      result2 &= ((byte*)operand)[6];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(uint*)target = result0;
      ((ushort*)target)[2] = result1;
      ((byte*)target)[6] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block7* @this, Block7* operand, Block7* target) {
      var result0 = *(uint*)@this;
      var result1 = ((ushort*)@this)[2];
      var result2 = ((byte*)@this)[6];
      result0 &= *(uint*)operand;
      result1 &= ((ushort*)operand)[2];
      result2 &= ((byte*)operand)[6];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(uint*)target = result0;
      ((ushort*)target)[2] = result1;
      ((byte*)target)[6] = result2;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block7* @this, Block7* operand, Block7* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block7* @this, Block7* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block7* @this, Block7* operand, Block7* target) {
      var result0 = *(uint*)@this;
      var result1 = ((ushort*)@this)[2];
      var result2 = ((byte*)@this)[6];
      result0 |= *(uint*)operand;
      result1 |= ((ushort*)operand)[2];
      result2 |= ((byte*)operand)[6];
      *(uint*)target = result0;
      ((ushort*)target)[2] = result1;
      ((byte*)target)[6] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block7* @this, Block7* operand, Block7* target) {
      var result0 = *(uint*)@this;
      var result1 = ((ushort*)@this)[2];
      var result2 = ((byte*)@this)[6];
      result0 |= *(uint*)operand;
      result1 |= ((ushort*)operand)[2];
      result2 |= ((byte*)operand)[6];
      *(uint*)target = result0;
      ((ushort*)target)[2] = result1;
      ((byte*)target)[6] = result2;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block7* @this, Block7* operand, Block7* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block7* @this, Block7* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block7* @this, Block7* operand, Block7* target) {
      var result0 = *(uint*)@this;
      var result1 = ((ushort*)@this)[2];
      var result2 = ((byte*)@this)[6];
      result0 |= *(uint*)operand;
      result1 |= ((ushort*)operand)[2];
      result2 |= ((byte*)operand)[6];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(uint*)target = result0;
      ((ushort*)target)[2] = result1;
      ((byte*)target)[6] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block7* @this, Block7* operand, Block7* target) {
      var result0 = *(uint*)@this;
      var result1 = ((ushort*)@this)[2];
      var result2 = ((byte*)@this)[6];
      result0 |= *(uint*)operand;
      result1 |= ((ushort*)operand)[2];
      result2 |= ((byte*)operand)[6];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(uint*)target = result0;
      ((ushort*)target)[2] = result1;
      ((byte*)target)[6] = result2;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block7* @this, Block7* operand, Block7* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block7* @this, Block7* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block7* @this, Block7* operand, Block7* target) {
      var result0 = *(uint*)@this;
      var result1 = ((ushort*)@this)[2];
      var result2 = ((byte*)@this)[6];
      result0 ^= *(uint*)operand;
      result1 ^= ((ushort*)operand)[2];
      result2 ^= ((byte*)operand)[6];
      *(uint*)target = result0;
      ((ushort*)target)[2] = result1;
      ((byte*)target)[6] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block7* @this, Block7* operand, Block7* target) {
      var result0 = *(uint*)@this;
      var result1 = ((ushort*)@this)[2];
      var result2 = ((byte*)@this)[6];
      result0 ^= *(uint*)operand;
      result1 ^= ((ushort*)operand)[2];
      result2 ^= ((byte*)operand)[6];
      *(uint*)target = result0;
      ((ushort*)target)[2] = result1;
      ((byte*)target)[6] = result2;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block7* @this, Block7* operand, Block7* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block7* @this, Block7* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block7* @this, Block7* operand, Block7* target) {
      var result0 = *(uint*)@this;
      var result1 = ((ushort*)@this)[2];
      var result2 = ((byte*)@this)[6];
      result0 ^= *(uint*)operand;
      result1 ^= ((ushort*)operand)[2];
      result2 ^= ((byte*)operand)[6];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(uint*)target = result0;
      ((ushort*)target)[2] = result1;
      ((byte*)target)[6] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block7* @this, Block7* operand, Block7* target) {
      var result0 = *(uint*)@this;
      var result1 = ((ushort*)@this)[2];
      var result2 = ((byte*)@this)[6];
      result0 ^= *(uint*)operand;
      result1 ^= ((ushort*)operand)[2];
      result2 ^= ((byte*)operand)[6];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(uint*)target = result0;
      ((ushort*)target)[2] = result1;
      ((byte*)target)[6] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block7* @this, Block7* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block7* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block7* @this, Block7* target) {
      var result0 = *(uint*)@this;
      var result1 = ((ushort*)@this)[2];
      var result2 = ((byte*)@this)[6];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(uint*)target = result0;
      ((ushort*)target)[2] = result1;
      ((byte*)target)[6] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block7* @this, Block7* target) {
      var result0 = *(uint*)@this;
      var result1 = ((ushort*)@this)[2];
      var result2 = ((byte*)@this)[6];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(uint*)target = result0;
      ((ushort*)target)[2] = result1;
      ((byte*)target)[6] = result2;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 8)] 
  public struct Block8 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block8* @this, Block8* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block8* @this, Block8* other) {
      return *(ulong*)@this == *(ulong*) other;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block8* @this, Block8* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result0 |= result1;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block8* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block8* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block8* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block8* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block8* @this) {
      *(ulong*)@this = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block8* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block8* @this, Block8* operand, Block8* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block8* @this, Block8* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block8* @this, Block8* operand, Block8* target) {
      var result0 = *(ulong*)@this;
      result0 &= *(ulong*)operand;
      *(ulong*)target = result0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block8* @this, Block8* operand, Block8* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block8* @this, Block8* operand, Block8* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block8* @this, Block8* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block8* @this, Block8* operand, Block8* target) {
      var result0 = *(ulong*)@this;
      result0 &= *(ulong*)operand;
      result0 = _Not(result0);
      *(ulong*)target = result0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block8* @this, Block8* operand, Block8* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block8* @this, Block8* operand, Block8* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block8* @this, Block8* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block8* @this, Block8* operand, Block8* target) {
      var result0 = *(ulong*)@this;
      result0 |= *(ulong*)operand;
      *(ulong*)target = result0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block8* @this, Block8* operand, Block8* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block8* @this, Block8* operand, Block8* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block8* @this, Block8* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block8* @this, Block8* operand, Block8* target) {
      var result0 = *(ulong*)@this;
      result0 |= *(ulong*)operand;
      result0 = _Not(result0);
      *(ulong*)target = result0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block8* @this, Block8* operand, Block8* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block8* @this, Block8* operand, Block8* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block8* @this, Block8* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block8* @this, Block8* operand, Block8* target) {
      var result0 = *(ulong*)@this;
      result0 ^= *(ulong*)operand;
      *(ulong*)target = result0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block8* @this, Block8* operand, Block8* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block8* @this, Block8* operand, Block8* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block8* @this, Block8* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block8* @this, Block8* operand, Block8* target) {
      var result0 = *(ulong*)@this;
      result0 ^= *(ulong*)operand;
      result0 = _Not(result0);
      *(ulong*)target = result0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block8* @this, Block8* operand, Block8* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block8* @this, Block8* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block8* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block8* @this, Block8* target) {
      var result0 = *(ulong*)@this;
      result0 = _Not(result0);
      *(ulong*)target = result0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block8* @this, Block8* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 9)] 
  public struct Block9 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block9* @this, Block9* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block9* @this, Block9* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((byte*)@this)[8];
      result0 ^= *(ulong*)other;
      result1 ^= ((byte*)other)[8];
      result0 |= result1;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block9* @this, Block9* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((byte*)@this)[8];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((byte*)other)[8];
      result0 |= result1;
      result0 |= result2;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block9* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block9* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((byte*)@this)[8] = value;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block9* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((byte*)@this)[8] = value;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block9* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block9* @this) {
      *(ulong*)@this = 0;
      ((byte*)@this)[8] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block9* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((byte*)@this)[8] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block9* @this, Block9* operand, Block9* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block9* @this, Block9* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block9* @this, Block9* operand, Block9* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((byte*)@this)[8];
      result0 &= *(ulong*)operand;
      result1 &= ((byte*)operand)[8];
      *(ulong*)target = result0;
      ((byte*)target)[8] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block9* @this, Block9* operand, Block9* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((byte*)@this)[8];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((byte*)operand)[8];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((byte*)target)[8] = result2;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block9* @this, Block9* operand, Block9* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block9* @this, Block9* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block9* @this, Block9* operand, Block9* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((byte*)@this)[8];
      result0 &= *(ulong*)operand;
      result1 &= ((byte*)operand)[8];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(ulong*)target = result0;
      ((byte*)target)[8] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block9* @this, Block9* operand, Block9* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((byte*)@this)[8];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((byte*)operand)[8];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((byte*)target)[8] = result2;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block9* @this, Block9* operand, Block9* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block9* @this, Block9* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block9* @this, Block9* operand, Block9* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((byte*)@this)[8];
      result0 |= *(ulong*)operand;
      result1 |= ((byte*)operand)[8];
      *(ulong*)target = result0;
      ((byte*)target)[8] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block9* @this, Block9* operand, Block9* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((byte*)@this)[8];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((byte*)operand)[8];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((byte*)target)[8] = result2;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block9* @this, Block9* operand, Block9* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block9* @this, Block9* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block9* @this, Block9* operand, Block9* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((byte*)@this)[8];
      result0 |= *(ulong*)operand;
      result1 |= ((byte*)operand)[8];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(ulong*)target = result0;
      ((byte*)target)[8] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block9* @this, Block9* operand, Block9* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((byte*)@this)[8];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((byte*)operand)[8];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((byte*)target)[8] = result2;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block9* @this, Block9* operand, Block9* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block9* @this, Block9* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block9* @this, Block9* operand, Block9* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((byte*)@this)[8];
      result0 ^= *(ulong*)operand;
      result1 ^= ((byte*)operand)[8];
      *(ulong*)target = result0;
      ((byte*)target)[8] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block9* @this, Block9* operand, Block9* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((byte*)@this)[8];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((byte*)operand)[8];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((byte*)target)[8] = result2;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block9* @this, Block9* operand, Block9* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block9* @this, Block9* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block9* @this, Block9* operand, Block9* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((byte*)@this)[8];
      result0 ^= *(ulong*)operand;
      result1 ^= ((byte*)operand)[8];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(ulong*)target = result0;
      ((byte*)target)[8] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block9* @this, Block9* operand, Block9* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((byte*)@this)[8];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((byte*)operand)[8];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((byte*)target)[8] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block9* @this, Block9* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block9* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block9* @this, Block9* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((byte*)@this)[8];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(ulong*)target = result0;
      ((byte*)target)[8] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block9* @this, Block9* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((byte*)@this)[8];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((byte*)target)[8] = result2;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 10)] 
  public struct Block10 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block10* @this, Block10* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block10* @this, Block10* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ushort*)@this)[4];
      result0 ^= *(ulong*)other;
      result1 ^= ((ushort*)other)[4];
      result0 |= result1;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block10* @this, Block10* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((ushort*)@this)[4];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((ushort*)other)[4];
      result0 |= result1;
      result0 |= result2;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block10* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block10* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[4] = word;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block10* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[4] = word;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block10* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block10* @this) {
      *(ulong*)@this = 0;
      ((ushort*)@this)[4] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block10* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((ushort*)@this)[4] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block10* @this, Block10* operand, Block10* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block10* @this, Block10* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block10* @this, Block10* operand, Block10* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ushort*)@this)[4];
      result0 &= *(ulong*)operand;
      result1 &= ((ushort*)operand)[4];
      *(ulong*)target = result0;
      ((ushort*)target)[4] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block10* @this, Block10* operand, Block10* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((ushort*)@this)[4];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((ushort*)operand)[4];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((ushort*)target)[4] = result2;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block10* @this, Block10* operand, Block10* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block10* @this, Block10* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block10* @this, Block10* operand, Block10* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ushort*)@this)[4];
      result0 &= *(ulong*)operand;
      result1 &= ((ushort*)operand)[4];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(ulong*)target = result0;
      ((ushort*)target)[4] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block10* @this, Block10* operand, Block10* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((ushort*)@this)[4];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((ushort*)operand)[4];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((ushort*)target)[4] = result2;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block10* @this, Block10* operand, Block10* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block10* @this, Block10* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block10* @this, Block10* operand, Block10* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ushort*)@this)[4];
      result0 |= *(ulong*)operand;
      result1 |= ((ushort*)operand)[4];
      *(ulong*)target = result0;
      ((ushort*)target)[4] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block10* @this, Block10* operand, Block10* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((ushort*)@this)[4];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((ushort*)operand)[4];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((ushort*)target)[4] = result2;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block10* @this, Block10* operand, Block10* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block10* @this, Block10* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block10* @this, Block10* operand, Block10* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ushort*)@this)[4];
      result0 |= *(ulong*)operand;
      result1 |= ((ushort*)operand)[4];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(ulong*)target = result0;
      ((ushort*)target)[4] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block10* @this, Block10* operand, Block10* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((ushort*)@this)[4];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((ushort*)operand)[4];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((ushort*)target)[4] = result2;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block10* @this, Block10* operand, Block10* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block10* @this, Block10* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block10* @this, Block10* operand, Block10* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ushort*)@this)[4];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ushort*)operand)[4];
      *(ulong*)target = result0;
      ((ushort*)target)[4] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block10* @this, Block10* operand, Block10* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((ushort*)@this)[4];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((ushort*)operand)[4];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((ushort*)target)[4] = result2;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block10* @this, Block10* operand, Block10* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block10* @this, Block10* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block10* @this, Block10* operand, Block10* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ushort*)@this)[4];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ushort*)operand)[4];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(ulong*)target = result0;
      ((ushort*)target)[4] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block10* @this, Block10* operand, Block10* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((ushort*)@this)[4];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((ushort*)operand)[4];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((ushort*)target)[4] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block10* @this, Block10* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block10* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block10* @this, Block10* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ushort*)@this)[4];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(ulong*)target = result0;
      ((ushort*)target)[4] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block10* @this, Block10* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((ushort*)@this)[4];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((ushort*)target)[4] = result2;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 11)] 
  public struct Block11 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block11* @this, Block11* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block11* @this, Block11* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ushort*)@this)[4];
      var result2 = ((byte*)@this)[10];
      result0 ^= *(ulong*)other;
      result1 ^= ((ushort*)other)[4];
      result2 ^= ((byte*)other)[10];
      result0 |= result1;
      result0 |= result2;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block11* @this, Block11* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((ushort*)@this)[4];
      var result3 = ((byte*)@this)[10];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((ushort*)other)[4];
      result3 ^= ((byte*)other)[10];
      result0 |= result1;
      result2 |= result3;
      result0 |= result2;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block11* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block11* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[4] = word;
      ((byte*)@this)[10] = value;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block11* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[4] = word;
      ((byte*)@this)[10] = value;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block11* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block11* @this) {
      *(ulong*)@this = 0;
      ((ushort*)@this)[4] = 0;
      ((byte*)@this)[10] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block11* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((ushort*)@this)[4] = 0;
      ((byte*)@this)[10] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block11* @this, Block11* operand, Block11* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block11* @this, Block11* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block11* @this, Block11* operand, Block11* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ushort*)@this)[4];
      var result2 = ((byte*)@this)[10];
      result0 &= *(ulong*)operand;
      result1 &= ((ushort*)operand)[4];
      result2 &= ((byte*)operand)[10];
      *(ulong*)target = result0;
      ((ushort*)target)[4] = result1;
      ((byte*)target)[10] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block11* @this, Block11* operand, Block11* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((ushort*)@this)[4];
      var result3 = ((byte*)@this)[10];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((ushort*)operand)[4];
      result3 &= ((byte*)operand)[10];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((ushort*)target)[4] = result2;
      ((byte*)target)[10] = result3;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block11* @this, Block11* operand, Block11* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block11* @this, Block11* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block11* @this, Block11* operand, Block11* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ushort*)@this)[4];
      var result2 = ((byte*)@this)[10];
      result0 &= *(ulong*)operand;
      result1 &= ((ushort*)operand)[4];
      result2 &= ((byte*)operand)[10];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(ulong*)target = result0;
      ((ushort*)target)[4] = result1;
      ((byte*)target)[10] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block11* @this, Block11* operand, Block11* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((ushort*)@this)[4];
      var result3 = ((byte*)@this)[10];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((ushort*)operand)[4];
      result3 &= ((byte*)operand)[10];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((ushort*)target)[4] = result2;
      ((byte*)target)[10] = result3;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block11* @this, Block11* operand, Block11* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block11* @this, Block11* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block11* @this, Block11* operand, Block11* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ushort*)@this)[4];
      var result2 = ((byte*)@this)[10];
      result0 |= *(ulong*)operand;
      result1 |= ((ushort*)operand)[4];
      result2 |= ((byte*)operand)[10];
      *(ulong*)target = result0;
      ((ushort*)target)[4] = result1;
      ((byte*)target)[10] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block11* @this, Block11* operand, Block11* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((ushort*)@this)[4];
      var result3 = ((byte*)@this)[10];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((ushort*)operand)[4];
      result3 |= ((byte*)operand)[10];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((ushort*)target)[4] = result2;
      ((byte*)target)[10] = result3;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block11* @this, Block11* operand, Block11* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block11* @this, Block11* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block11* @this, Block11* operand, Block11* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ushort*)@this)[4];
      var result2 = ((byte*)@this)[10];
      result0 |= *(ulong*)operand;
      result1 |= ((ushort*)operand)[4];
      result2 |= ((byte*)operand)[10];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(ulong*)target = result0;
      ((ushort*)target)[4] = result1;
      ((byte*)target)[10] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block11* @this, Block11* operand, Block11* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((ushort*)@this)[4];
      var result3 = ((byte*)@this)[10];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((ushort*)operand)[4];
      result3 |= ((byte*)operand)[10];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((ushort*)target)[4] = result2;
      ((byte*)target)[10] = result3;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block11* @this, Block11* operand, Block11* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block11* @this, Block11* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block11* @this, Block11* operand, Block11* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ushort*)@this)[4];
      var result2 = ((byte*)@this)[10];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ushort*)operand)[4];
      result2 ^= ((byte*)operand)[10];
      *(ulong*)target = result0;
      ((ushort*)target)[4] = result1;
      ((byte*)target)[10] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block11* @this, Block11* operand, Block11* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((ushort*)@this)[4];
      var result3 = ((byte*)@this)[10];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((ushort*)operand)[4];
      result3 ^= ((byte*)operand)[10];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((ushort*)target)[4] = result2;
      ((byte*)target)[10] = result3;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block11* @this, Block11* operand, Block11* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block11* @this, Block11* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block11* @this, Block11* operand, Block11* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ushort*)@this)[4];
      var result2 = ((byte*)@this)[10];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ushort*)operand)[4];
      result2 ^= ((byte*)operand)[10];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(ulong*)target = result0;
      ((ushort*)target)[4] = result1;
      ((byte*)target)[10] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block11* @this, Block11* operand, Block11* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((ushort*)@this)[4];
      var result3 = ((byte*)@this)[10];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((ushort*)operand)[4];
      result3 ^= ((byte*)operand)[10];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((ushort*)target)[4] = result2;
      ((byte*)target)[10] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block11* @this, Block11* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block11* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block11* @this, Block11* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ushort*)@this)[4];
      var result2 = ((byte*)@this)[10];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(ulong*)target = result0;
      ((ushort*)target)[4] = result1;
      ((byte*)target)[10] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block11* @this, Block11* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((ushort*)@this)[4];
      var result3 = ((byte*)@this)[10];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((ushort*)target)[4] = result2;
      ((byte*)target)[10] = result3;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 12)] 
  public struct Block12 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block12* @this, Block12* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block12* @this, Block12* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((uint*)@this)[2];
      result0 ^= *(ulong*)other;
      result1 ^= ((uint*)other)[2];
      result0 |= result1;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block12* @this, Block12* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result0 |= result1;
      result0 |= result2;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block12* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block12* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      var dword = 0x01010101U * value;
      ((uint*)@this)[2] = dword;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block12* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block12* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block12* @this) {
      *(ulong*)@this = 0;
      ((uint*)@this)[2] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block12* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block12* @this, Block12* operand, Block12* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block12* @this, Block12* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block12* @this, Block12* operand, Block12* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((uint*)@this)[2];
      result0 &= *(ulong*)operand;
      result1 &= ((uint*)operand)[2];
      *(ulong*)target = result0;
      ((uint*)target)[2] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block12* @this, Block12* operand, Block12* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block12* @this, Block12* operand, Block12* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block12* @this, Block12* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block12* @this, Block12* operand, Block12* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((uint*)@this)[2];
      result0 &= *(ulong*)operand;
      result1 &= ((uint*)operand)[2];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(ulong*)target = result0;
      ((uint*)target)[2] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block12* @this, Block12* operand, Block12* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block12* @this, Block12* operand, Block12* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block12* @this, Block12* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block12* @this, Block12* operand, Block12* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((uint*)@this)[2];
      result0 |= *(ulong*)operand;
      result1 |= ((uint*)operand)[2];
      *(ulong*)target = result0;
      ((uint*)target)[2] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block12* @this, Block12* operand, Block12* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block12* @this, Block12* operand, Block12* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block12* @this, Block12* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block12* @this, Block12* operand, Block12* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((uint*)@this)[2];
      result0 |= *(ulong*)operand;
      result1 |= ((uint*)operand)[2];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(ulong*)target = result0;
      ((uint*)target)[2] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block12* @this, Block12* operand, Block12* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block12* @this, Block12* operand, Block12* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block12* @this, Block12* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block12* @this, Block12* operand, Block12* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((uint*)@this)[2];
      result0 ^= *(ulong*)operand;
      result1 ^= ((uint*)operand)[2];
      *(ulong*)target = result0;
      ((uint*)target)[2] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block12* @this, Block12* operand, Block12* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block12* @this, Block12* operand, Block12* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block12* @this, Block12* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block12* @this, Block12* operand, Block12* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((uint*)@this)[2];
      result0 ^= *(ulong*)operand;
      result1 ^= ((uint*)operand)[2];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(ulong*)target = result0;
      ((uint*)target)[2] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block12* @this, Block12* operand, Block12* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block12* @this, Block12* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block12* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block12* @this, Block12* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((uint*)@this)[2];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(ulong*)target = result0;
      ((uint*)target)[2] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block12* @this, Block12* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 13)] 
  public struct Block13 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block13* @this, Block13* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block13* @this, Block13* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((uint*)@this)[2];
      var result2 = ((byte*)@this)[12];
      result0 ^= *(ulong*)other;
      result1 ^= ((uint*)other)[2];
      result2 ^= ((byte*)other)[12];
      result0 |= result1;
      result0 |= result2;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block13* @this, Block13* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((byte*)@this)[12];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((byte*)other)[12];
      result0 |= result1;
      result2 |= result3;
      result0 |= result2;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block13* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block13* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      var dword = 0x01010101U * value;
      ((uint*)@this)[2] = dword;
      ((byte*)@this)[12] = value;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block13* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((byte*)@this)[12] = value;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block13* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block13* @this) {
      *(ulong*)@this = 0;
      ((uint*)@this)[2] = 0;
      ((byte*)@this)[12] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block13* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((byte*)@this)[12] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block13* @this, Block13* operand, Block13* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block13* @this, Block13* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block13* @this, Block13* operand, Block13* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((uint*)@this)[2];
      var result2 = ((byte*)@this)[12];
      result0 &= *(ulong*)operand;
      result1 &= ((uint*)operand)[2];
      result2 &= ((byte*)operand)[12];
      *(ulong*)target = result0;
      ((uint*)target)[2] = result1;
      ((byte*)target)[12] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block13* @this, Block13* operand, Block13* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((byte*)@this)[12];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((byte*)operand)[12];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((byte*)target)[12] = result3;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block13* @this, Block13* operand, Block13* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block13* @this, Block13* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block13* @this, Block13* operand, Block13* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((uint*)@this)[2];
      var result2 = ((byte*)@this)[12];
      result0 &= *(ulong*)operand;
      result1 &= ((uint*)operand)[2];
      result2 &= ((byte*)operand)[12];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(ulong*)target = result0;
      ((uint*)target)[2] = result1;
      ((byte*)target)[12] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block13* @this, Block13* operand, Block13* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((byte*)@this)[12];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((byte*)operand)[12];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((byte*)target)[12] = result3;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block13* @this, Block13* operand, Block13* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block13* @this, Block13* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block13* @this, Block13* operand, Block13* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((uint*)@this)[2];
      var result2 = ((byte*)@this)[12];
      result0 |= *(ulong*)operand;
      result1 |= ((uint*)operand)[2];
      result2 |= ((byte*)operand)[12];
      *(ulong*)target = result0;
      ((uint*)target)[2] = result1;
      ((byte*)target)[12] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block13* @this, Block13* operand, Block13* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((byte*)@this)[12];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((byte*)operand)[12];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((byte*)target)[12] = result3;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block13* @this, Block13* operand, Block13* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block13* @this, Block13* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block13* @this, Block13* operand, Block13* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((uint*)@this)[2];
      var result2 = ((byte*)@this)[12];
      result0 |= *(ulong*)operand;
      result1 |= ((uint*)operand)[2];
      result2 |= ((byte*)operand)[12];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(ulong*)target = result0;
      ((uint*)target)[2] = result1;
      ((byte*)target)[12] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block13* @this, Block13* operand, Block13* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((byte*)@this)[12];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((byte*)operand)[12];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((byte*)target)[12] = result3;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block13* @this, Block13* operand, Block13* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block13* @this, Block13* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block13* @this, Block13* operand, Block13* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((uint*)@this)[2];
      var result2 = ((byte*)@this)[12];
      result0 ^= *(ulong*)operand;
      result1 ^= ((uint*)operand)[2];
      result2 ^= ((byte*)operand)[12];
      *(ulong*)target = result0;
      ((uint*)target)[2] = result1;
      ((byte*)target)[12] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block13* @this, Block13* operand, Block13* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((byte*)@this)[12];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((byte*)operand)[12];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((byte*)target)[12] = result3;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block13* @this, Block13* operand, Block13* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block13* @this, Block13* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block13* @this, Block13* operand, Block13* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((uint*)@this)[2];
      var result2 = ((byte*)@this)[12];
      result0 ^= *(ulong*)operand;
      result1 ^= ((uint*)operand)[2];
      result2 ^= ((byte*)operand)[12];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(ulong*)target = result0;
      ((uint*)target)[2] = result1;
      ((byte*)target)[12] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block13* @this, Block13* operand, Block13* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((byte*)@this)[12];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((byte*)operand)[12];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((byte*)target)[12] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block13* @this, Block13* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block13* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block13* @this, Block13* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((uint*)@this)[2];
      var result2 = ((byte*)@this)[12];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(ulong*)target = result0;
      ((uint*)target)[2] = result1;
      ((byte*)target)[12] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block13* @this, Block13* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((byte*)@this)[12];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((byte*)target)[12] = result3;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 14)] 
  public struct Block14 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block14* @this, Block14* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block14* @this, Block14* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((uint*)@this)[2];
      var result2 = ((ushort*)@this)[6];
      result0 ^= *(ulong*)other;
      result1 ^= ((uint*)other)[2];
      result2 ^= ((ushort*)other)[6];
      result0 |= result1;
      result0 |= result2;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block14* @this, Block14* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((ushort*)@this)[6];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((ushort*)other)[6];
      result0 |= result1;
      result2 |= result3;
      result0 |= result2;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block14* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block14* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      var dword = 0x01010101U * value;
      ((uint*)@this)[2] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[6] = word;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block14* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[6] = word;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block14* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block14* @this) {
      *(ulong*)@this = 0;
      ((uint*)@this)[2] = 0;
      ((ushort*)@this)[6] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block14* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((ushort*)@this)[6] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block14* @this, Block14* operand, Block14* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block14* @this, Block14* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block14* @this, Block14* operand, Block14* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((uint*)@this)[2];
      var result2 = ((ushort*)@this)[6];
      result0 &= *(ulong*)operand;
      result1 &= ((uint*)operand)[2];
      result2 &= ((ushort*)operand)[6];
      *(ulong*)target = result0;
      ((uint*)target)[2] = result1;
      ((ushort*)target)[6] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block14* @this, Block14* operand, Block14* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((ushort*)@this)[6];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((ushort*)operand)[6];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((ushort*)target)[6] = result3;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block14* @this, Block14* operand, Block14* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block14* @this, Block14* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block14* @this, Block14* operand, Block14* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((uint*)@this)[2];
      var result2 = ((ushort*)@this)[6];
      result0 &= *(ulong*)operand;
      result1 &= ((uint*)operand)[2];
      result2 &= ((ushort*)operand)[6];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(ulong*)target = result0;
      ((uint*)target)[2] = result1;
      ((ushort*)target)[6] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block14* @this, Block14* operand, Block14* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((ushort*)@this)[6];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((ushort*)operand)[6];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((ushort*)target)[6] = result3;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block14* @this, Block14* operand, Block14* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block14* @this, Block14* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block14* @this, Block14* operand, Block14* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((uint*)@this)[2];
      var result2 = ((ushort*)@this)[6];
      result0 |= *(ulong*)operand;
      result1 |= ((uint*)operand)[2];
      result2 |= ((ushort*)operand)[6];
      *(ulong*)target = result0;
      ((uint*)target)[2] = result1;
      ((ushort*)target)[6] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block14* @this, Block14* operand, Block14* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((ushort*)@this)[6];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((ushort*)operand)[6];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((ushort*)target)[6] = result3;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block14* @this, Block14* operand, Block14* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block14* @this, Block14* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block14* @this, Block14* operand, Block14* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((uint*)@this)[2];
      var result2 = ((ushort*)@this)[6];
      result0 |= *(ulong*)operand;
      result1 |= ((uint*)operand)[2];
      result2 |= ((ushort*)operand)[6];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(ulong*)target = result0;
      ((uint*)target)[2] = result1;
      ((ushort*)target)[6] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block14* @this, Block14* operand, Block14* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((ushort*)@this)[6];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((ushort*)operand)[6];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((ushort*)target)[6] = result3;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block14* @this, Block14* operand, Block14* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block14* @this, Block14* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block14* @this, Block14* operand, Block14* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((uint*)@this)[2];
      var result2 = ((ushort*)@this)[6];
      result0 ^= *(ulong*)operand;
      result1 ^= ((uint*)operand)[2];
      result2 ^= ((ushort*)operand)[6];
      *(ulong*)target = result0;
      ((uint*)target)[2] = result1;
      ((ushort*)target)[6] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block14* @this, Block14* operand, Block14* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((ushort*)@this)[6];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((ushort*)operand)[6];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((ushort*)target)[6] = result3;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block14* @this, Block14* operand, Block14* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block14* @this, Block14* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block14* @this, Block14* operand, Block14* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((uint*)@this)[2];
      var result2 = ((ushort*)@this)[6];
      result0 ^= *(ulong*)operand;
      result1 ^= ((uint*)operand)[2];
      result2 ^= ((ushort*)operand)[6];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(ulong*)target = result0;
      ((uint*)target)[2] = result1;
      ((ushort*)target)[6] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block14* @this, Block14* operand, Block14* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((ushort*)@this)[6];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((ushort*)operand)[6];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((ushort*)target)[6] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block14* @this, Block14* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block14* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block14* @this, Block14* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((uint*)@this)[2];
      var result2 = ((ushort*)@this)[6];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(ulong*)target = result0;
      ((uint*)target)[2] = result1;
      ((ushort*)target)[6] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block14* @this, Block14* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((ushort*)@this)[6];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((ushort*)target)[6] = result3;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 15)] 
  public struct Block15 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block15* @this, Block15* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block15* @this, Block15* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((uint*)@this)[2];
      var result2 = ((ushort*)@this)[6];
      var result3 = ((byte*)@this)[14];
      result0 ^= *(ulong*)other;
      result1 ^= ((uint*)other)[2];
      result2 ^= ((ushort*)other)[6];
      result3 ^= ((byte*)other)[14];
      result0 |= result1;
      result2 |= result3;
      result0 |= result2;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block15* @this, Block15* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((ushort*)@this)[6];
      var result4 = ((byte*)@this)[14];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((ushort*)other)[6];
      result4 ^= ((byte*)other)[14];
      result0 |= result1;
      result2 |= result3;
      result0 |= result2;
      result0 |= result4;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block15* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block15* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      var dword = 0x01010101U * value;
      ((uint*)@this)[2] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[6] = word;
      ((byte*)@this)[14] = value;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block15* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[6] = word;
      ((byte*)@this)[14] = value;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block15* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block15* @this) {
      *(ulong*)@this = 0;
      ((uint*)@this)[2] = 0;
      ((ushort*)@this)[6] = 0;
      ((byte*)@this)[14] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block15* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((ushort*)@this)[6] = 0;
      ((byte*)@this)[14] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block15* @this, Block15* operand, Block15* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block15* @this, Block15* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block15* @this, Block15* operand, Block15* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((uint*)@this)[2];
      var result2 = ((ushort*)@this)[6];
      var result3 = ((byte*)@this)[14];
      result0 &= *(ulong*)operand;
      result1 &= ((uint*)operand)[2];
      result2 &= ((ushort*)operand)[6];
      result3 &= ((byte*)operand)[14];
      *(ulong*)target = result0;
      ((uint*)target)[2] = result1;
      ((ushort*)target)[6] = result2;
      ((byte*)target)[14] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block15* @this, Block15* operand, Block15* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((ushort*)@this)[6];
      var result4 = ((byte*)@this)[14];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((ushort*)operand)[6];
      result4 &= ((byte*)operand)[14];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((ushort*)target)[6] = result3;
      ((byte*)target)[14] = result4;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block15* @this, Block15* operand, Block15* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block15* @this, Block15* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block15* @this, Block15* operand, Block15* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((uint*)@this)[2];
      var result2 = ((ushort*)@this)[6];
      var result3 = ((byte*)@this)[14];
      result0 &= *(ulong*)operand;
      result1 &= ((uint*)operand)[2];
      result2 &= ((ushort*)operand)[6];
      result3 &= ((byte*)operand)[14];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(ulong*)target = result0;
      ((uint*)target)[2] = result1;
      ((ushort*)target)[6] = result2;
      ((byte*)target)[14] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block15* @this, Block15* operand, Block15* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((ushort*)@this)[6];
      var result4 = ((byte*)@this)[14];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((ushort*)operand)[6];
      result4 &= ((byte*)operand)[14];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((ushort*)target)[6] = result3;
      ((byte*)target)[14] = result4;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block15* @this, Block15* operand, Block15* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block15* @this, Block15* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block15* @this, Block15* operand, Block15* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((uint*)@this)[2];
      var result2 = ((ushort*)@this)[6];
      var result3 = ((byte*)@this)[14];
      result0 |= *(ulong*)operand;
      result1 |= ((uint*)operand)[2];
      result2 |= ((ushort*)operand)[6];
      result3 |= ((byte*)operand)[14];
      *(ulong*)target = result0;
      ((uint*)target)[2] = result1;
      ((ushort*)target)[6] = result2;
      ((byte*)target)[14] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block15* @this, Block15* operand, Block15* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((ushort*)@this)[6];
      var result4 = ((byte*)@this)[14];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((ushort*)operand)[6];
      result4 |= ((byte*)operand)[14];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((ushort*)target)[6] = result3;
      ((byte*)target)[14] = result4;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block15* @this, Block15* operand, Block15* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block15* @this, Block15* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block15* @this, Block15* operand, Block15* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((uint*)@this)[2];
      var result2 = ((ushort*)@this)[6];
      var result3 = ((byte*)@this)[14];
      result0 |= *(ulong*)operand;
      result1 |= ((uint*)operand)[2];
      result2 |= ((ushort*)operand)[6];
      result3 |= ((byte*)operand)[14];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(ulong*)target = result0;
      ((uint*)target)[2] = result1;
      ((ushort*)target)[6] = result2;
      ((byte*)target)[14] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block15* @this, Block15* operand, Block15* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((ushort*)@this)[6];
      var result4 = ((byte*)@this)[14];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((ushort*)operand)[6];
      result4 |= ((byte*)operand)[14];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((ushort*)target)[6] = result3;
      ((byte*)target)[14] = result4;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block15* @this, Block15* operand, Block15* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block15* @this, Block15* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block15* @this, Block15* operand, Block15* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((uint*)@this)[2];
      var result2 = ((ushort*)@this)[6];
      var result3 = ((byte*)@this)[14];
      result0 ^= *(ulong*)operand;
      result1 ^= ((uint*)operand)[2];
      result2 ^= ((ushort*)operand)[6];
      result3 ^= ((byte*)operand)[14];
      *(ulong*)target = result0;
      ((uint*)target)[2] = result1;
      ((ushort*)target)[6] = result2;
      ((byte*)target)[14] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block15* @this, Block15* operand, Block15* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((ushort*)@this)[6];
      var result4 = ((byte*)@this)[14];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((ushort*)operand)[6];
      result4 ^= ((byte*)operand)[14];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((ushort*)target)[6] = result3;
      ((byte*)target)[14] = result4;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block15* @this, Block15* operand, Block15* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block15* @this, Block15* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block15* @this, Block15* operand, Block15* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((uint*)@this)[2];
      var result2 = ((ushort*)@this)[6];
      var result3 = ((byte*)@this)[14];
      result0 ^= *(ulong*)operand;
      result1 ^= ((uint*)operand)[2];
      result2 ^= ((ushort*)operand)[6];
      result3 ^= ((byte*)operand)[14];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(ulong*)target = result0;
      ((uint*)target)[2] = result1;
      ((ushort*)target)[6] = result2;
      ((byte*)target)[14] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block15* @this, Block15* operand, Block15* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((ushort*)@this)[6];
      var result4 = ((byte*)@this)[14];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((ushort*)operand)[6];
      result4 ^= ((byte*)operand)[14];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((ushort*)target)[6] = result3;
      ((byte*)target)[14] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block15* @this, Block15* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block15* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block15* @this, Block15* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((uint*)@this)[2];
      var result2 = ((ushort*)@this)[6];
      var result3 = ((byte*)@this)[14];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(ulong*)target = result0;
      ((uint*)target)[2] = result1;
      ((ushort*)target)[6] = result2;
      ((byte*)target)[14] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block15* @this, Block15* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((ushort*)@this)[6];
      var result4 = ((byte*)@this)[14];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((ushort*)target)[6] = result3;
      ((byte*)target)[14] = result4;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 16)] 
  public struct Block16 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block16* @this, Block16* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block16* @this, Block16* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result0 |= result1;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block16* @this, Block16* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result0 |= result1;
      result2 |= result3;
      result0 |= result2;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block16* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block16* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block16* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block16* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block16* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block16* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block16* @this, Block16* operand, Block16* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block16* @this, Block16* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block16* @this, Block16* operand, Block16* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block16* @this, Block16* operand, Block16* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block16* @this, Block16* operand, Block16* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block16* @this, Block16* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block16* @this, Block16* operand, Block16* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block16* @this, Block16* operand, Block16* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block16* @this, Block16* operand, Block16* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block16* @this, Block16* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block16* @this, Block16* operand, Block16* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block16* @this, Block16* operand, Block16* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block16* @this, Block16* operand, Block16* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block16* @this, Block16* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block16* @this, Block16* operand, Block16* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block16* @this, Block16* operand, Block16* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block16* @this, Block16* operand, Block16* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block16* @this, Block16* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block16* @this, Block16* operand, Block16* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block16* @this, Block16* operand, Block16* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block16* @this, Block16* operand, Block16* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block16* @this, Block16* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block16* @this, Block16* operand, Block16* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block16* @this, Block16* operand, Block16* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block16* @this, Block16* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block16* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block16* @this, Block16* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      result0 = _Not(result0);
      result1 = _Not(result1);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block16* @this, Block16* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 17)] 
  public struct Block17 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block17* @this, Block17* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block17* @this, Block17* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((byte*)@this)[16];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((byte*)other)[16];
      result0 |= result1;
      result0 |= result2;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block17* @this, Block17* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((byte*)@this)[16];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((byte*)other)[16];
      result0 |= result1;
      result2 |= result3;
      result0 |= result2;
      result0 |= result4;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block17* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block17* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((byte*)@this)[16] = value;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block17* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((byte*)@this)[16] = value;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block17* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block17* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((byte*)@this)[16] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block17* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((byte*)@this)[16] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block17* @this, Block17* operand, Block17* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block17* @this, Block17* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block17* @this, Block17* operand, Block17* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((byte*)@this)[16];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((byte*)operand)[16];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((byte*)target)[16] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block17* @this, Block17* operand, Block17* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((byte*)@this)[16];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((byte*)operand)[16];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((byte*)target)[16] = result4;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block17* @this, Block17* operand, Block17* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block17* @this, Block17* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block17* @this, Block17* operand, Block17* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((byte*)@this)[16];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((byte*)operand)[16];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((byte*)target)[16] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block17* @this, Block17* operand, Block17* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((byte*)@this)[16];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((byte*)operand)[16];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((byte*)target)[16] = result4;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block17* @this, Block17* operand, Block17* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block17* @this, Block17* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block17* @this, Block17* operand, Block17* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((byte*)@this)[16];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((byte*)operand)[16];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((byte*)target)[16] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block17* @this, Block17* operand, Block17* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((byte*)@this)[16];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((byte*)operand)[16];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((byte*)target)[16] = result4;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block17* @this, Block17* operand, Block17* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block17* @this, Block17* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block17* @this, Block17* operand, Block17* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((byte*)@this)[16];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((byte*)operand)[16];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((byte*)target)[16] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block17* @this, Block17* operand, Block17* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((byte*)@this)[16];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((byte*)operand)[16];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((byte*)target)[16] = result4;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block17* @this, Block17* operand, Block17* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block17* @this, Block17* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block17* @this, Block17* operand, Block17* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((byte*)@this)[16];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((byte*)operand)[16];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((byte*)target)[16] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block17* @this, Block17* operand, Block17* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((byte*)@this)[16];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((byte*)operand)[16];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((byte*)target)[16] = result4;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block17* @this, Block17* operand, Block17* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block17* @this, Block17* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block17* @this, Block17* operand, Block17* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((byte*)@this)[16];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((byte*)operand)[16];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((byte*)target)[16] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block17* @this, Block17* operand, Block17* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((byte*)@this)[16];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((byte*)operand)[16];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((byte*)target)[16] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block17* @this, Block17* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block17* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block17* @this, Block17* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((byte*)@this)[16];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((byte*)target)[16] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block17* @this, Block17* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((byte*)@this)[16];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((byte*)target)[16] = result4;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 18)] 
  public struct Block18 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block18* @this, Block18* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block18* @this, Block18* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ushort*)@this)[8];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ushort*)other)[8];
      result0 |= result1;
      result0 |= result2;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block18* @this, Block18* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((ushort*)@this)[8];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((ushort*)other)[8];
      result0 |= result1;
      result2 |= result3;
      result0 |= result2;
      result0 |= result4;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block18* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block18* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[8] = word;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block18* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[8] = word;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block18* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block18* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ushort*)@this)[8] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block18* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((ushort*)@this)[8] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block18* @this, Block18* operand, Block18* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block18* @this, Block18* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block18* @this, Block18* operand, Block18* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ushort*)@this)[8];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ushort*)operand)[8];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ushort*)target)[8] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block18* @this, Block18* operand, Block18* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((ushort*)@this)[8];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((ushort*)operand)[8];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((ushort*)target)[8] = result4;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block18* @this, Block18* operand, Block18* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block18* @this, Block18* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block18* @this, Block18* operand, Block18* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ushort*)@this)[8];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ushort*)operand)[8];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ushort*)target)[8] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block18* @this, Block18* operand, Block18* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((ushort*)@this)[8];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((ushort*)operand)[8];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((ushort*)target)[8] = result4;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block18* @this, Block18* operand, Block18* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block18* @this, Block18* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block18* @this, Block18* operand, Block18* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ushort*)@this)[8];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ushort*)operand)[8];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ushort*)target)[8] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block18* @this, Block18* operand, Block18* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((ushort*)@this)[8];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((ushort*)operand)[8];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((ushort*)target)[8] = result4;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block18* @this, Block18* operand, Block18* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block18* @this, Block18* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block18* @this, Block18* operand, Block18* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ushort*)@this)[8];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ushort*)operand)[8];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ushort*)target)[8] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block18* @this, Block18* operand, Block18* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((ushort*)@this)[8];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((ushort*)operand)[8];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((ushort*)target)[8] = result4;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block18* @this, Block18* operand, Block18* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block18* @this, Block18* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block18* @this, Block18* operand, Block18* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ushort*)@this)[8];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ushort*)operand)[8];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ushort*)target)[8] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block18* @this, Block18* operand, Block18* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((ushort*)@this)[8];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((ushort*)operand)[8];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((ushort*)target)[8] = result4;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block18* @this, Block18* operand, Block18* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block18* @this, Block18* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block18* @this, Block18* operand, Block18* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ushort*)@this)[8];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ushort*)operand)[8];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ushort*)target)[8] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block18* @this, Block18* operand, Block18* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((ushort*)@this)[8];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((ushort*)operand)[8];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((ushort*)target)[8] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block18* @this, Block18* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block18* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block18* @this, Block18* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ushort*)@this)[8];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ushort*)target)[8] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block18* @this, Block18* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((ushort*)@this)[8];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((ushort*)target)[8] = result4;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 19)] 
  public struct Block19 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block19* @this, Block19* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block19* @this, Block19* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ushort*)@this)[8];
      var result3 = ((byte*)@this)[18];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ushort*)other)[8];
      result3 ^= ((byte*)other)[18];
      result0 |= result1;
      result2 |= result3;
      result0 |= result2;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block19* @this, Block19* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((ushort*)@this)[8];
      var result5 = ((byte*)@this)[18];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((ushort*)other)[8];
      result5 ^= ((byte*)other)[18];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result0 |= result2;
      result0 |= result4;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block19* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block19* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[8] = word;
      ((byte*)@this)[18] = value;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block19* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[8] = word;
      ((byte*)@this)[18] = value;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block19* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block19* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ushort*)@this)[8] = 0;
      ((byte*)@this)[18] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block19* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((ushort*)@this)[8] = 0;
      ((byte*)@this)[18] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block19* @this, Block19* operand, Block19* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block19* @this, Block19* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block19* @this, Block19* operand, Block19* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ushort*)@this)[8];
      var result3 = ((byte*)@this)[18];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ushort*)operand)[8];
      result3 &= ((byte*)operand)[18];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ushort*)target)[8] = result2;
      ((byte*)target)[18] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block19* @this, Block19* operand, Block19* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((ushort*)@this)[8];
      var result5 = ((byte*)@this)[18];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((ushort*)operand)[8];
      result5 &= ((byte*)operand)[18];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((ushort*)target)[8] = result4;
      ((byte*)target)[18] = result5;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block19* @this, Block19* operand, Block19* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block19* @this, Block19* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block19* @this, Block19* operand, Block19* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ushort*)@this)[8];
      var result3 = ((byte*)@this)[18];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ushort*)operand)[8];
      result3 &= ((byte*)operand)[18];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ushort*)target)[8] = result2;
      ((byte*)target)[18] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block19* @this, Block19* operand, Block19* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((ushort*)@this)[8];
      var result5 = ((byte*)@this)[18];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((ushort*)operand)[8];
      result5 &= ((byte*)operand)[18];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((ushort*)target)[8] = result4;
      ((byte*)target)[18] = result5;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block19* @this, Block19* operand, Block19* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block19* @this, Block19* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block19* @this, Block19* operand, Block19* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ushort*)@this)[8];
      var result3 = ((byte*)@this)[18];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ushort*)operand)[8];
      result3 |= ((byte*)operand)[18];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ushort*)target)[8] = result2;
      ((byte*)target)[18] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block19* @this, Block19* operand, Block19* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((ushort*)@this)[8];
      var result5 = ((byte*)@this)[18];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((ushort*)operand)[8];
      result5 |= ((byte*)operand)[18];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((ushort*)target)[8] = result4;
      ((byte*)target)[18] = result5;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block19* @this, Block19* operand, Block19* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block19* @this, Block19* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block19* @this, Block19* operand, Block19* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ushort*)@this)[8];
      var result3 = ((byte*)@this)[18];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ushort*)operand)[8];
      result3 |= ((byte*)operand)[18];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ushort*)target)[8] = result2;
      ((byte*)target)[18] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block19* @this, Block19* operand, Block19* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((ushort*)@this)[8];
      var result5 = ((byte*)@this)[18];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((ushort*)operand)[8];
      result5 |= ((byte*)operand)[18];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((ushort*)target)[8] = result4;
      ((byte*)target)[18] = result5;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block19* @this, Block19* operand, Block19* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block19* @this, Block19* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block19* @this, Block19* operand, Block19* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ushort*)@this)[8];
      var result3 = ((byte*)@this)[18];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ushort*)operand)[8];
      result3 ^= ((byte*)operand)[18];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ushort*)target)[8] = result2;
      ((byte*)target)[18] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block19* @this, Block19* operand, Block19* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((ushort*)@this)[8];
      var result5 = ((byte*)@this)[18];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((ushort*)operand)[8];
      result5 ^= ((byte*)operand)[18];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((ushort*)target)[8] = result4;
      ((byte*)target)[18] = result5;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block19* @this, Block19* operand, Block19* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block19* @this, Block19* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block19* @this, Block19* operand, Block19* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ushort*)@this)[8];
      var result3 = ((byte*)@this)[18];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ushort*)operand)[8];
      result3 ^= ((byte*)operand)[18];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ushort*)target)[8] = result2;
      ((byte*)target)[18] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block19* @this, Block19* operand, Block19* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((ushort*)@this)[8];
      var result5 = ((byte*)@this)[18];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((ushort*)operand)[8];
      result5 ^= ((byte*)operand)[18];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((ushort*)target)[8] = result4;
      ((byte*)target)[18] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block19* @this, Block19* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block19* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block19* @this, Block19* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ushort*)@this)[8];
      var result3 = ((byte*)@this)[18];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ushort*)target)[8] = result2;
      ((byte*)target)[18] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block19* @this, Block19* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((ushort*)@this)[8];
      var result5 = ((byte*)@this)[18];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((ushort*)target)[8] = result4;
      ((byte*)target)[18] = result5;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 20)] 
  public struct Block20 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block20* @this, Block20* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block20* @this, Block20* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((uint*)@this)[4];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((uint*)other)[4];
      result0 |= result1;
      result0 |= result2;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block20* @this, Block20* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result0 |= result1;
      result2 |= result3;
      result0 |= result2;
      result0 |= result4;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block20* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block20* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      var dword = 0x01010101U * value;
      ((uint*)@this)[4] = dword;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block20* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block20* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block20* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((uint*)@this)[4] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block20* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block20* @this, Block20* operand, Block20* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block20* @this, Block20* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block20* @this, Block20* operand, Block20* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((uint*)@this)[4];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((uint*)operand)[4];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((uint*)target)[4] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block20* @this, Block20* operand, Block20* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block20* @this, Block20* operand, Block20* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block20* @this, Block20* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block20* @this, Block20* operand, Block20* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((uint*)@this)[4];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((uint*)operand)[4];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((uint*)target)[4] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block20* @this, Block20* operand, Block20* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block20* @this, Block20* operand, Block20* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block20* @this, Block20* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block20* @this, Block20* operand, Block20* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((uint*)@this)[4];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((uint*)operand)[4];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((uint*)target)[4] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block20* @this, Block20* operand, Block20* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block20* @this, Block20* operand, Block20* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block20* @this, Block20* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block20* @this, Block20* operand, Block20* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((uint*)@this)[4];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((uint*)operand)[4];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((uint*)target)[4] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block20* @this, Block20* operand, Block20* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block20* @this, Block20* operand, Block20* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block20* @this, Block20* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block20* @this, Block20* operand, Block20* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((uint*)@this)[4];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((uint*)operand)[4];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((uint*)target)[4] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block20* @this, Block20* operand, Block20* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block20* @this, Block20* operand, Block20* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block20* @this, Block20* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block20* @this, Block20* operand, Block20* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((uint*)@this)[4];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((uint*)operand)[4];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((uint*)target)[4] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block20* @this, Block20* operand, Block20* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block20* @this, Block20* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block20* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block20* @this, Block20* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((uint*)@this)[4];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((uint*)target)[4] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block20* @this, Block20* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 21)] 
  public struct Block21 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block21* @this, Block21* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block21* @this, Block21* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((uint*)@this)[4];
      var result3 = ((byte*)@this)[20];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((uint*)other)[4];
      result3 ^= ((byte*)other)[20];
      result0 |= result1;
      result2 |= result3;
      result0 |= result2;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block21* @this, Block21* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((byte*)@this)[20];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((byte*)other)[20];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result0 |= result2;
      result0 |= result4;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block21* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block21* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      var dword = 0x01010101U * value;
      ((uint*)@this)[4] = dword;
      ((byte*)@this)[20] = value;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block21* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((byte*)@this)[20] = value;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block21* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block21* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((uint*)@this)[4] = 0;
      ((byte*)@this)[20] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block21* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((byte*)@this)[20] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block21* @this, Block21* operand, Block21* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block21* @this, Block21* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block21* @this, Block21* operand, Block21* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((uint*)@this)[4];
      var result3 = ((byte*)@this)[20];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((uint*)operand)[4];
      result3 &= ((byte*)operand)[20];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((uint*)target)[4] = result2;
      ((byte*)target)[20] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block21* @this, Block21* operand, Block21* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((byte*)@this)[20];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((byte*)operand)[20];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((byte*)target)[20] = result5;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block21* @this, Block21* operand, Block21* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block21* @this, Block21* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block21* @this, Block21* operand, Block21* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((uint*)@this)[4];
      var result3 = ((byte*)@this)[20];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((uint*)operand)[4];
      result3 &= ((byte*)operand)[20];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((uint*)target)[4] = result2;
      ((byte*)target)[20] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block21* @this, Block21* operand, Block21* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((byte*)@this)[20];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((byte*)operand)[20];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((byte*)target)[20] = result5;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block21* @this, Block21* operand, Block21* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block21* @this, Block21* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block21* @this, Block21* operand, Block21* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((uint*)@this)[4];
      var result3 = ((byte*)@this)[20];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((uint*)operand)[4];
      result3 |= ((byte*)operand)[20];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((uint*)target)[4] = result2;
      ((byte*)target)[20] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block21* @this, Block21* operand, Block21* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((byte*)@this)[20];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((byte*)operand)[20];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((byte*)target)[20] = result5;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block21* @this, Block21* operand, Block21* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block21* @this, Block21* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block21* @this, Block21* operand, Block21* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((uint*)@this)[4];
      var result3 = ((byte*)@this)[20];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((uint*)operand)[4];
      result3 |= ((byte*)operand)[20];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((uint*)target)[4] = result2;
      ((byte*)target)[20] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block21* @this, Block21* operand, Block21* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((byte*)@this)[20];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((byte*)operand)[20];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((byte*)target)[20] = result5;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block21* @this, Block21* operand, Block21* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block21* @this, Block21* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block21* @this, Block21* operand, Block21* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((uint*)@this)[4];
      var result3 = ((byte*)@this)[20];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((uint*)operand)[4];
      result3 ^= ((byte*)operand)[20];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((uint*)target)[4] = result2;
      ((byte*)target)[20] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block21* @this, Block21* operand, Block21* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((byte*)@this)[20];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((byte*)operand)[20];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((byte*)target)[20] = result5;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block21* @this, Block21* operand, Block21* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block21* @this, Block21* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block21* @this, Block21* operand, Block21* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((uint*)@this)[4];
      var result3 = ((byte*)@this)[20];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((uint*)operand)[4];
      result3 ^= ((byte*)operand)[20];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((uint*)target)[4] = result2;
      ((byte*)target)[20] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block21* @this, Block21* operand, Block21* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((byte*)@this)[20];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((byte*)operand)[20];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((byte*)target)[20] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block21* @this, Block21* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block21* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block21* @this, Block21* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((uint*)@this)[4];
      var result3 = ((byte*)@this)[20];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((uint*)target)[4] = result2;
      ((byte*)target)[20] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block21* @this, Block21* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((byte*)@this)[20];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((byte*)target)[20] = result5;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 22)] 
  public struct Block22 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block22* @this, Block22* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block22* @this, Block22* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((uint*)@this)[4];
      var result3 = ((ushort*)@this)[10];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((uint*)other)[4];
      result3 ^= ((ushort*)other)[10];
      result0 |= result1;
      result2 |= result3;
      result0 |= result2;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block22* @this, Block22* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((ushort*)@this)[10];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((ushort*)other)[10];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result0 |= result2;
      result0 |= result4;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block22* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block22* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      var dword = 0x01010101U * value;
      ((uint*)@this)[4] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[10] = word;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block22* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[10] = word;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block22* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block22* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((uint*)@this)[4] = 0;
      ((ushort*)@this)[10] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block22* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((ushort*)@this)[10] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block22* @this, Block22* operand, Block22* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block22* @this, Block22* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block22* @this, Block22* operand, Block22* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((uint*)@this)[4];
      var result3 = ((ushort*)@this)[10];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((uint*)operand)[4];
      result3 &= ((ushort*)operand)[10];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((uint*)target)[4] = result2;
      ((ushort*)target)[10] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block22* @this, Block22* operand, Block22* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((ushort*)@this)[10];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((ushort*)operand)[10];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((ushort*)target)[10] = result5;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block22* @this, Block22* operand, Block22* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block22* @this, Block22* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block22* @this, Block22* operand, Block22* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((uint*)@this)[4];
      var result3 = ((ushort*)@this)[10];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((uint*)operand)[4];
      result3 &= ((ushort*)operand)[10];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((uint*)target)[4] = result2;
      ((ushort*)target)[10] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block22* @this, Block22* operand, Block22* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((ushort*)@this)[10];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((ushort*)operand)[10];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((ushort*)target)[10] = result5;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block22* @this, Block22* operand, Block22* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block22* @this, Block22* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block22* @this, Block22* operand, Block22* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((uint*)@this)[4];
      var result3 = ((ushort*)@this)[10];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((uint*)operand)[4];
      result3 |= ((ushort*)operand)[10];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((uint*)target)[4] = result2;
      ((ushort*)target)[10] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block22* @this, Block22* operand, Block22* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((ushort*)@this)[10];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((ushort*)operand)[10];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((ushort*)target)[10] = result5;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block22* @this, Block22* operand, Block22* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block22* @this, Block22* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block22* @this, Block22* operand, Block22* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((uint*)@this)[4];
      var result3 = ((ushort*)@this)[10];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((uint*)operand)[4];
      result3 |= ((ushort*)operand)[10];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((uint*)target)[4] = result2;
      ((ushort*)target)[10] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block22* @this, Block22* operand, Block22* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((ushort*)@this)[10];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((ushort*)operand)[10];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((ushort*)target)[10] = result5;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block22* @this, Block22* operand, Block22* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block22* @this, Block22* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block22* @this, Block22* operand, Block22* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((uint*)@this)[4];
      var result3 = ((ushort*)@this)[10];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((uint*)operand)[4];
      result3 ^= ((ushort*)operand)[10];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((uint*)target)[4] = result2;
      ((ushort*)target)[10] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block22* @this, Block22* operand, Block22* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((ushort*)@this)[10];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((ushort*)operand)[10];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((ushort*)target)[10] = result5;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block22* @this, Block22* operand, Block22* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block22* @this, Block22* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block22* @this, Block22* operand, Block22* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((uint*)@this)[4];
      var result3 = ((ushort*)@this)[10];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((uint*)operand)[4];
      result3 ^= ((ushort*)operand)[10];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((uint*)target)[4] = result2;
      ((ushort*)target)[10] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block22* @this, Block22* operand, Block22* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((ushort*)@this)[10];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((ushort*)operand)[10];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((ushort*)target)[10] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block22* @this, Block22* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block22* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block22* @this, Block22* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((uint*)@this)[4];
      var result3 = ((ushort*)@this)[10];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((uint*)target)[4] = result2;
      ((ushort*)target)[10] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block22* @this, Block22* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((ushort*)@this)[10];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((ushort*)target)[10] = result5;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 23)] 
  public struct Block23 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block23* @this, Block23* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block23* @this, Block23* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((uint*)@this)[4];
      var result3 = ((ushort*)@this)[10];
      var result4 = ((byte*)@this)[22];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((uint*)other)[4];
      result3 ^= ((ushort*)other)[10];
      result4 ^= ((byte*)other)[22];
      result0 |= result1;
      result2 |= result3;
      result0 |= result2;
      result0 |= result4;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block23* @this, Block23* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((ushort*)@this)[10];
      var result6 = ((byte*)@this)[22];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((ushort*)other)[10];
      result6 ^= ((byte*)other)[22];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block23* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block23* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      var dword = 0x01010101U * value;
      ((uint*)@this)[4] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[10] = word;
      ((byte*)@this)[22] = value;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block23* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[10] = word;
      ((byte*)@this)[22] = value;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block23* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block23* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((uint*)@this)[4] = 0;
      ((ushort*)@this)[10] = 0;
      ((byte*)@this)[22] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block23* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((ushort*)@this)[10] = 0;
      ((byte*)@this)[22] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block23* @this, Block23* operand, Block23* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block23* @this, Block23* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block23* @this, Block23* operand, Block23* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((uint*)@this)[4];
      var result3 = ((ushort*)@this)[10];
      var result4 = ((byte*)@this)[22];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((uint*)operand)[4];
      result3 &= ((ushort*)operand)[10];
      result4 &= ((byte*)operand)[22];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((uint*)target)[4] = result2;
      ((ushort*)target)[10] = result3;
      ((byte*)target)[22] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block23* @this, Block23* operand, Block23* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((ushort*)@this)[10];
      var result6 = ((byte*)@this)[22];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((ushort*)operand)[10];
      result6 &= ((byte*)operand)[22];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((ushort*)target)[10] = result5;
      ((byte*)target)[22] = result6;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block23* @this, Block23* operand, Block23* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block23* @this, Block23* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block23* @this, Block23* operand, Block23* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((uint*)@this)[4];
      var result3 = ((ushort*)@this)[10];
      var result4 = ((byte*)@this)[22];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((uint*)operand)[4];
      result3 &= ((ushort*)operand)[10];
      result4 &= ((byte*)operand)[22];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((uint*)target)[4] = result2;
      ((ushort*)target)[10] = result3;
      ((byte*)target)[22] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block23* @this, Block23* operand, Block23* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((ushort*)@this)[10];
      var result6 = ((byte*)@this)[22];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((ushort*)operand)[10];
      result6 &= ((byte*)operand)[22];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((ushort*)target)[10] = result5;
      ((byte*)target)[22] = result6;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block23* @this, Block23* operand, Block23* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block23* @this, Block23* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block23* @this, Block23* operand, Block23* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((uint*)@this)[4];
      var result3 = ((ushort*)@this)[10];
      var result4 = ((byte*)@this)[22];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((uint*)operand)[4];
      result3 |= ((ushort*)operand)[10];
      result4 |= ((byte*)operand)[22];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((uint*)target)[4] = result2;
      ((ushort*)target)[10] = result3;
      ((byte*)target)[22] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block23* @this, Block23* operand, Block23* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((ushort*)@this)[10];
      var result6 = ((byte*)@this)[22];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((ushort*)operand)[10];
      result6 |= ((byte*)operand)[22];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((ushort*)target)[10] = result5;
      ((byte*)target)[22] = result6;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block23* @this, Block23* operand, Block23* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block23* @this, Block23* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block23* @this, Block23* operand, Block23* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((uint*)@this)[4];
      var result3 = ((ushort*)@this)[10];
      var result4 = ((byte*)@this)[22];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((uint*)operand)[4];
      result3 |= ((ushort*)operand)[10];
      result4 |= ((byte*)operand)[22];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((uint*)target)[4] = result2;
      ((ushort*)target)[10] = result3;
      ((byte*)target)[22] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block23* @this, Block23* operand, Block23* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((ushort*)@this)[10];
      var result6 = ((byte*)@this)[22];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((ushort*)operand)[10];
      result6 |= ((byte*)operand)[22];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((ushort*)target)[10] = result5;
      ((byte*)target)[22] = result6;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block23* @this, Block23* operand, Block23* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block23* @this, Block23* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block23* @this, Block23* operand, Block23* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((uint*)@this)[4];
      var result3 = ((ushort*)@this)[10];
      var result4 = ((byte*)@this)[22];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((uint*)operand)[4];
      result3 ^= ((ushort*)operand)[10];
      result4 ^= ((byte*)operand)[22];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((uint*)target)[4] = result2;
      ((ushort*)target)[10] = result3;
      ((byte*)target)[22] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block23* @this, Block23* operand, Block23* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((ushort*)@this)[10];
      var result6 = ((byte*)@this)[22];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((ushort*)operand)[10];
      result6 ^= ((byte*)operand)[22];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((ushort*)target)[10] = result5;
      ((byte*)target)[22] = result6;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block23* @this, Block23* operand, Block23* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block23* @this, Block23* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block23* @this, Block23* operand, Block23* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((uint*)@this)[4];
      var result3 = ((ushort*)@this)[10];
      var result4 = ((byte*)@this)[22];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((uint*)operand)[4];
      result3 ^= ((ushort*)operand)[10];
      result4 ^= ((byte*)operand)[22];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((uint*)target)[4] = result2;
      ((ushort*)target)[10] = result3;
      ((byte*)target)[22] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block23* @this, Block23* operand, Block23* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((ushort*)@this)[10];
      var result6 = ((byte*)@this)[22];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((ushort*)operand)[10];
      result6 ^= ((byte*)operand)[22];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((ushort*)target)[10] = result5;
      ((byte*)target)[22] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block23* @this, Block23* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block23* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block23* @this, Block23* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((uint*)@this)[4];
      var result3 = ((ushort*)@this)[10];
      var result4 = ((byte*)@this)[22];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((uint*)target)[4] = result2;
      ((ushort*)target)[10] = result3;
      ((byte*)target)[22] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block23* @this, Block23* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((ushort*)@this)[10];
      var result6 = ((byte*)@this)[22];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((ushort*)target)[10] = result5;
      ((byte*)target)[22] = result6;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 24)] 
  public struct Block24 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block24* @this, Block24* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block24* @this, Block24* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result0 |= result1;
      result0 |= result2;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block24* @this, Block24* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result0 |= result2;
      result0 |= result4;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block24* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block24* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block24* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block24* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block24* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block24* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block24* @this, Block24* operand, Block24* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block24* @this, Block24* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block24* @this, Block24* operand, Block24* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block24* @this, Block24* operand, Block24* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block24* @this, Block24* operand, Block24* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block24* @this, Block24* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block24* @this, Block24* operand, Block24* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block24* @this, Block24* operand, Block24* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block24* @this, Block24* operand, Block24* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block24* @this, Block24* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block24* @this, Block24* operand, Block24* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block24* @this, Block24* operand, Block24* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block24* @this, Block24* operand, Block24* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block24* @this, Block24* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block24* @this, Block24* operand, Block24* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block24* @this, Block24* operand, Block24* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block24* @this, Block24* operand, Block24* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block24* @this, Block24* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block24* @this, Block24* operand, Block24* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block24* @this, Block24* operand, Block24* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block24* @this, Block24* operand, Block24* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block24* @this, Block24* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block24* @this, Block24* operand, Block24* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block24* @this, Block24* operand, Block24* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block24* @this, Block24* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block24* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block24* @this, Block24* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block24* @this, Block24* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 25)] 
  public struct Block25 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block25* @this, Block25* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block25* @this, Block25* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((byte*)@this)[24];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((byte*)other)[24];
      result0 |= result1;
      result2 |= result3;
      result0 |= result2;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block25* @this, Block25* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((byte*)@this)[24];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((byte*)other)[24];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block25* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block25* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((byte*)@this)[24] = value;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block25* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((byte*)@this)[24] = value;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block25* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block25* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((byte*)@this)[24] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block25* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((byte*)@this)[24] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block25* @this, Block25* operand, Block25* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block25* @this, Block25* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block25* @this, Block25* operand, Block25* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((byte*)@this)[24];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((byte*)operand)[24];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((byte*)target)[24] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block25* @this, Block25* operand, Block25* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((byte*)@this)[24];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((byte*)operand)[24];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((byte*)target)[24] = result6;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block25* @this, Block25* operand, Block25* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block25* @this, Block25* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block25* @this, Block25* operand, Block25* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((byte*)@this)[24];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((byte*)operand)[24];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((byte*)target)[24] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block25* @this, Block25* operand, Block25* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((byte*)@this)[24];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((byte*)operand)[24];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((byte*)target)[24] = result6;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block25* @this, Block25* operand, Block25* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block25* @this, Block25* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block25* @this, Block25* operand, Block25* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((byte*)@this)[24];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((byte*)operand)[24];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((byte*)target)[24] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block25* @this, Block25* operand, Block25* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((byte*)@this)[24];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((byte*)operand)[24];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((byte*)target)[24] = result6;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block25* @this, Block25* operand, Block25* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block25* @this, Block25* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block25* @this, Block25* operand, Block25* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((byte*)@this)[24];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((byte*)operand)[24];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((byte*)target)[24] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block25* @this, Block25* operand, Block25* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((byte*)@this)[24];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((byte*)operand)[24];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((byte*)target)[24] = result6;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block25* @this, Block25* operand, Block25* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block25* @this, Block25* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block25* @this, Block25* operand, Block25* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((byte*)@this)[24];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((byte*)operand)[24];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((byte*)target)[24] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block25* @this, Block25* operand, Block25* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((byte*)@this)[24];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((byte*)operand)[24];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((byte*)target)[24] = result6;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block25* @this, Block25* operand, Block25* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block25* @this, Block25* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block25* @this, Block25* operand, Block25* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((byte*)@this)[24];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((byte*)operand)[24];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((byte*)target)[24] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block25* @this, Block25* operand, Block25* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((byte*)@this)[24];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((byte*)operand)[24];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((byte*)target)[24] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block25* @this, Block25* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block25* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block25* @this, Block25* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((byte*)@this)[24];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((byte*)target)[24] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block25* @this, Block25* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((byte*)@this)[24];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((byte*)target)[24] = result6;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 26)] 
  public struct Block26 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block26* @this, Block26* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block26* @this, Block26* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ushort*)@this)[12];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ushort*)other)[12];
      result0 |= result1;
      result2 |= result3;
      result0 |= result2;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block26* @this, Block26* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((ushort*)@this)[12];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((ushort*)other)[12];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block26* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block26* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[12] = word;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block26* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[12] = word;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block26* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block26* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ushort*)@this)[12] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block26* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((ushort*)@this)[12] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block26* @this, Block26* operand, Block26* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block26* @this, Block26* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block26* @this, Block26* operand, Block26* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ushort*)@this)[12];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ushort*)operand)[12];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ushort*)target)[12] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block26* @this, Block26* operand, Block26* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((ushort*)@this)[12];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((ushort*)operand)[12];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((ushort*)target)[12] = result6;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block26* @this, Block26* operand, Block26* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block26* @this, Block26* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block26* @this, Block26* operand, Block26* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ushort*)@this)[12];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ushort*)operand)[12];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ushort*)target)[12] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block26* @this, Block26* operand, Block26* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((ushort*)@this)[12];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((ushort*)operand)[12];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((ushort*)target)[12] = result6;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block26* @this, Block26* operand, Block26* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block26* @this, Block26* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block26* @this, Block26* operand, Block26* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ushort*)@this)[12];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ushort*)operand)[12];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ushort*)target)[12] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block26* @this, Block26* operand, Block26* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((ushort*)@this)[12];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((ushort*)operand)[12];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((ushort*)target)[12] = result6;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block26* @this, Block26* operand, Block26* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block26* @this, Block26* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block26* @this, Block26* operand, Block26* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ushort*)@this)[12];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ushort*)operand)[12];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ushort*)target)[12] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block26* @this, Block26* operand, Block26* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((ushort*)@this)[12];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((ushort*)operand)[12];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((ushort*)target)[12] = result6;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block26* @this, Block26* operand, Block26* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block26* @this, Block26* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block26* @this, Block26* operand, Block26* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ushort*)@this)[12];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ushort*)operand)[12];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ushort*)target)[12] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block26* @this, Block26* operand, Block26* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((ushort*)@this)[12];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((ushort*)operand)[12];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((ushort*)target)[12] = result6;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block26* @this, Block26* operand, Block26* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block26* @this, Block26* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block26* @this, Block26* operand, Block26* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ushort*)@this)[12];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ushort*)operand)[12];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ushort*)target)[12] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block26* @this, Block26* operand, Block26* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((ushort*)@this)[12];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((ushort*)operand)[12];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((ushort*)target)[12] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block26* @this, Block26* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block26* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block26* @this, Block26* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ushort*)@this)[12];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ushort*)target)[12] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block26* @this, Block26* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((ushort*)@this)[12];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((ushort*)target)[12] = result6;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 27)] 
  public struct Block27 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block27* @this, Block27* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block27* @this, Block27* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ushort*)@this)[12];
      var result4 = ((byte*)@this)[26];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ushort*)other)[12];
      result4 ^= ((byte*)other)[26];
      result0 |= result1;
      result2 |= result3;
      result0 |= result2;
      result0 |= result4;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block27* @this, Block27* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((ushort*)@this)[12];
      var result7 = ((byte*)@this)[26];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((ushort*)other)[12];
      result7 ^= ((byte*)other)[26];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block27* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block27* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[12] = word;
      ((byte*)@this)[26] = value;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block27* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[12] = word;
      ((byte*)@this)[26] = value;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block27* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block27* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ushort*)@this)[12] = 0;
      ((byte*)@this)[26] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block27* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((ushort*)@this)[12] = 0;
      ((byte*)@this)[26] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block27* @this, Block27* operand, Block27* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block27* @this, Block27* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block27* @this, Block27* operand, Block27* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ushort*)@this)[12];
      var result4 = ((byte*)@this)[26];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ushort*)operand)[12];
      result4 &= ((byte*)operand)[26];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ushort*)target)[12] = result3;
      ((byte*)target)[26] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block27* @this, Block27* operand, Block27* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((ushort*)@this)[12];
      var result7 = ((byte*)@this)[26];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((ushort*)operand)[12];
      result7 &= ((byte*)operand)[26];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((ushort*)target)[12] = result6;
      ((byte*)target)[26] = result7;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block27* @this, Block27* operand, Block27* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block27* @this, Block27* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block27* @this, Block27* operand, Block27* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ushort*)@this)[12];
      var result4 = ((byte*)@this)[26];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ushort*)operand)[12];
      result4 &= ((byte*)operand)[26];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ushort*)target)[12] = result3;
      ((byte*)target)[26] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block27* @this, Block27* operand, Block27* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((ushort*)@this)[12];
      var result7 = ((byte*)@this)[26];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((ushort*)operand)[12];
      result7 &= ((byte*)operand)[26];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((ushort*)target)[12] = result6;
      ((byte*)target)[26] = result7;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block27* @this, Block27* operand, Block27* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block27* @this, Block27* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block27* @this, Block27* operand, Block27* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ushort*)@this)[12];
      var result4 = ((byte*)@this)[26];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ushort*)operand)[12];
      result4 |= ((byte*)operand)[26];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ushort*)target)[12] = result3;
      ((byte*)target)[26] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block27* @this, Block27* operand, Block27* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((ushort*)@this)[12];
      var result7 = ((byte*)@this)[26];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((ushort*)operand)[12];
      result7 |= ((byte*)operand)[26];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((ushort*)target)[12] = result6;
      ((byte*)target)[26] = result7;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block27* @this, Block27* operand, Block27* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block27* @this, Block27* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block27* @this, Block27* operand, Block27* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ushort*)@this)[12];
      var result4 = ((byte*)@this)[26];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ushort*)operand)[12];
      result4 |= ((byte*)operand)[26];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ushort*)target)[12] = result3;
      ((byte*)target)[26] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block27* @this, Block27* operand, Block27* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((ushort*)@this)[12];
      var result7 = ((byte*)@this)[26];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((ushort*)operand)[12];
      result7 |= ((byte*)operand)[26];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((ushort*)target)[12] = result6;
      ((byte*)target)[26] = result7;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block27* @this, Block27* operand, Block27* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block27* @this, Block27* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block27* @this, Block27* operand, Block27* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ushort*)@this)[12];
      var result4 = ((byte*)@this)[26];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ushort*)operand)[12];
      result4 ^= ((byte*)operand)[26];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ushort*)target)[12] = result3;
      ((byte*)target)[26] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block27* @this, Block27* operand, Block27* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((ushort*)@this)[12];
      var result7 = ((byte*)@this)[26];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((ushort*)operand)[12];
      result7 ^= ((byte*)operand)[26];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((ushort*)target)[12] = result6;
      ((byte*)target)[26] = result7;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block27* @this, Block27* operand, Block27* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block27* @this, Block27* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block27* @this, Block27* operand, Block27* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ushort*)@this)[12];
      var result4 = ((byte*)@this)[26];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ushort*)operand)[12];
      result4 ^= ((byte*)operand)[26];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ushort*)target)[12] = result3;
      ((byte*)target)[26] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block27* @this, Block27* operand, Block27* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((ushort*)@this)[12];
      var result7 = ((byte*)@this)[26];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((ushort*)operand)[12];
      result7 ^= ((byte*)operand)[26];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((ushort*)target)[12] = result6;
      ((byte*)target)[26] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block27* @this, Block27* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block27* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block27* @this, Block27* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ushort*)@this)[12];
      var result4 = ((byte*)@this)[26];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ushort*)target)[12] = result3;
      ((byte*)target)[26] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block27* @this, Block27* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((ushort*)@this)[12];
      var result7 = ((byte*)@this)[26];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((ushort*)target)[12] = result6;
      ((byte*)target)[26] = result7;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 28)] 
  public struct Block28 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block28* @this, Block28* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block28* @this, Block28* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((uint*)@this)[6];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((uint*)other)[6];
      result0 |= result1;
      result2 |= result3;
      result0 |= result2;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block28* @this, Block28* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block28* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block28* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      var dword = 0x01010101U * value;
      ((uint*)@this)[6] = dword;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block28* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block28* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block28* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((uint*)@this)[6] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block28* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block28* @this, Block28* operand, Block28* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block28* @this, Block28* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block28* @this, Block28* operand, Block28* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((uint*)@this)[6];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((uint*)operand)[6];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((uint*)target)[6] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block28* @this, Block28* operand, Block28* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block28* @this, Block28* operand, Block28* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block28* @this, Block28* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block28* @this, Block28* operand, Block28* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((uint*)@this)[6];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((uint*)operand)[6];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((uint*)target)[6] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block28* @this, Block28* operand, Block28* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block28* @this, Block28* operand, Block28* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block28* @this, Block28* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block28* @this, Block28* operand, Block28* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((uint*)@this)[6];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((uint*)operand)[6];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((uint*)target)[6] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block28* @this, Block28* operand, Block28* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block28* @this, Block28* operand, Block28* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block28* @this, Block28* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block28* @this, Block28* operand, Block28* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((uint*)@this)[6];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((uint*)operand)[6];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((uint*)target)[6] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block28* @this, Block28* operand, Block28* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block28* @this, Block28* operand, Block28* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block28* @this, Block28* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block28* @this, Block28* operand, Block28* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((uint*)@this)[6];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((uint*)operand)[6];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((uint*)target)[6] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block28* @this, Block28* operand, Block28* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block28* @this, Block28* operand, Block28* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block28* @this, Block28* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block28* @this, Block28* operand, Block28* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((uint*)@this)[6];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((uint*)operand)[6];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((uint*)target)[6] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block28* @this, Block28* operand, Block28* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block28* @this, Block28* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block28* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block28* @this, Block28* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((uint*)@this)[6];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((uint*)target)[6] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block28* @this, Block28* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 29)] 
  public struct Block29 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block29* @this, Block29* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block29* @this, Block29* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((uint*)@this)[6];
      var result4 = ((byte*)@this)[28];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((uint*)other)[6];
      result4 ^= ((byte*)other)[28];
      result0 |= result1;
      result2 |= result3;
      result0 |= result2;
      result0 |= result4;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block29* @this, Block29* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((byte*)@this)[28];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((byte*)other)[28];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block29* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block29* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      var dword = 0x01010101U * value;
      ((uint*)@this)[6] = dword;
      ((byte*)@this)[28] = value;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block29* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((byte*)@this)[28] = value;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block29* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block29* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((uint*)@this)[6] = 0;
      ((byte*)@this)[28] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block29* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((byte*)@this)[28] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block29* @this, Block29* operand, Block29* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block29* @this, Block29* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block29* @this, Block29* operand, Block29* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((uint*)@this)[6];
      var result4 = ((byte*)@this)[28];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((uint*)operand)[6];
      result4 &= ((byte*)operand)[28];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((uint*)target)[6] = result3;
      ((byte*)target)[28] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block29* @this, Block29* operand, Block29* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((byte*)@this)[28];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((byte*)operand)[28];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((byte*)target)[28] = result7;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block29* @this, Block29* operand, Block29* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block29* @this, Block29* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block29* @this, Block29* operand, Block29* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((uint*)@this)[6];
      var result4 = ((byte*)@this)[28];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((uint*)operand)[6];
      result4 &= ((byte*)operand)[28];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((uint*)target)[6] = result3;
      ((byte*)target)[28] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block29* @this, Block29* operand, Block29* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((byte*)@this)[28];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((byte*)operand)[28];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((byte*)target)[28] = result7;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block29* @this, Block29* operand, Block29* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block29* @this, Block29* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block29* @this, Block29* operand, Block29* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((uint*)@this)[6];
      var result4 = ((byte*)@this)[28];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((uint*)operand)[6];
      result4 |= ((byte*)operand)[28];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((uint*)target)[6] = result3;
      ((byte*)target)[28] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block29* @this, Block29* operand, Block29* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((byte*)@this)[28];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((byte*)operand)[28];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((byte*)target)[28] = result7;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block29* @this, Block29* operand, Block29* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block29* @this, Block29* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block29* @this, Block29* operand, Block29* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((uint*)@this)[6];
      var result4 = ((byte*)@this)[28];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((uint*)operand)[6];
      result4 |= ((byte*)operand)[28];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((uint*)target)[6] = result3;
      ((byte*)target)[28] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block29* @this, Block29* operand, Block29* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((byte*)@this)[28];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((byte*)operand)[28];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((byte*)target)[28] = result7;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block29* @this, Block29* operand, Block29* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block29* @this, Block29* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block29* @this, Block29* operand, Block29* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((uint*)@this)[6];
      var result4 = ((byte*)@this)[28];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((uint*)operand)[6];
      result4 ^= ((byte*)operand)[28];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((uint*)target)[6] = result3;
      ((byte*)target)[28] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block29* @this, Block29* operand, Block29* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((byte*)@this)[28];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((byte*)operand)[28];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((byte*)target)[28] = result7;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block29* @this, Block29* operand, Block29* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block29* @this, Block29* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block29* @this, Block29* operand, Block29* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((uint*)@this)[6];
      var result4 = ((byte*)@this)[28];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((uint*)operand)[6];
      result4 ^= ((byte*)operand)[28];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((uint*)target)[6] = result3;
      ((byte*)target)[28] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block29* @this, Block29* operand, Block29* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((byte*)@this)[28];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((byte*)operand)[28];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((byte*)target)[28] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block29* @this, Block29* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block29* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block29* @this, Block29* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((uint*)@this)[6];
      var result4 = ((byte*)@this)[28];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((uint*)target)[6] = result3;
      ((byte*)target)[28] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block29* @this, Block29* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((byte*)@this)[28];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((byte*)target)[28] = result7;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 30)] 
  public struct Block30 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block30* @this, Block30* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block30* @this, Block30* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((uint*)@this)[6];
      var result4 = ((ushort*)@this)[14];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((uint*)other)[6];
      result4 ^= ((ushort*)other)[14];
      result0 |= result1;
      result2 |= result3;
      result0 |= result2;
      result0 |= result4;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block30* @this, Block30* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((ushort*)@this)[14];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((ushort*)other)[14];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block30* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block30* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      var dword = 0x01010101U * value;
      ((uint*)@this)[6] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[14] = word;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block30* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[14] = word;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block30* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block30* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((uint*)@this)[6] = 0;
      ((ushort*)@this)[14] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block30* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((ushort*)@this)[14] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block30* @this, Block30* operand, Block30* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block30* @this, Block30* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block30* @this, Block30* operand, Block30* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((uint*)@this)[6];
      var result4 = ((ushort*)@this)[14];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((uint*)operand)[6];
      result4 &= ((ushort*)operand)[14];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((uint*)target)[6] = result3;
      ((ushort*)target)[14] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block30* @this, Block30* operand, Block30* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((ushort*)@this)[14];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((ushort*)operand)[14];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((ushort*)target)[14] = result7;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block30* @this, Block30* operand, Block30* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block30* @this, Block30* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block30* @this, Block30* operand, Block30* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((uint*)@this)[6];
      var result4 = ((ushort*)@this)[14];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((uint*)operand)[6];
      result4 &= ((ushort*)operand)[14];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((uint*)target)[6] = result3;
      ((ushort*)target)[14] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block30* @this, Block30* operand, Block30* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((ushort*)@this)[14];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((ushort*)operand)[14];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((ushort*)target)[14] = result7;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block30* @this, Block30* operand, Block30* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block30* @this, Block30* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block30* @this, Block30* operand, Block30* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((uint*)@this)[6];
      var result4 = ((ushort*)@this)[14];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((uint*)operand)[6];
      result4 |= ((ushort*)operand)[14];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((uint*)target)[6] = result3;
      ((ushort*)target)[14] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block30* @this, Block30* operand, Block30* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((ushort*)@this)[14];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((ushort*)operand)[14];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((ushort*)target)[14] = result7;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block30* @this, Block30* operand, Block30* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block30* @this, Block30* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block30* @this, Block30* operand, Block30* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((uint*)@this)[6];
      var result4 = ((ushort*)@this)[14];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((uint*)operand)[6];
      result4 |= ((ushort*)operand)[14];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((uint*)target)[6] = result3;
      ((ushort*)target)[14] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block30* @this, Block30* operand, Block30* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((ushort*)@this)[14];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((ushort*)operand)[14];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((ushort*)target)[14] = result7;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block30* @this, Block30* operand, Block30* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block30* @this, Block30* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block30* @this, Block30* operand, Block30* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((uint*)@this)[6];
      var result4 = ((ushort*)@this)[14];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((uint*)operand)[6];
      result4 ^= ((ushort*)operand)[14];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((uint*)target)[6] = result3;
      ((ushort*)target)[14] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block30* @this, Block30* operand, Block30* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((ushort*)@this)[14];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((ushort*)operand)[14];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((ushort*)target)[14] = result7;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block30* @this, Block30* operand, Block30* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block30* @this, Block30* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block30* @this, Block30* operand, Block30* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((uint*)@this)[6];
      var result4 = ((ushort*)@this)[14];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((uint*)operand)[6];
      result4 ^= ((ushort*)operand)[14];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((uint*)target)[6] = result3;
      ((ushort*)target)[14] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block30* @this, Block30* operand, Block30* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((ushort*)@this)[14];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((ushort*)operand)[14];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((ushort*)target)[14] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block30* @this, Block30* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block30* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block30* @this, Block30* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((uint*)@this)[6];
      var result4 = ((ushort*)@this)[14];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((uint*)target)[6] = result3;
      ((ushort*)target)[14] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block30* @this, Block30* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((ushort*)@this)[14];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((ushort*)target)[14] = result7;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 31)] 
  public struct Block31 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block31* @this, Block31* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block31* @this, Block31* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((uint*)@this)[6];
      var result4 = ((ushort*)@this)[14];
      var result5 = ((byte*)@this)[30];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((uint*)other)[6];
      result4 ^= ((ushort*)other)[14];
      result5 ^= ((byte*)other)[30];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result0 |= result2;
      result0 |= result4;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block31* @this, Block31* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((ushort*)@this)[14];
      var result8 = ((byte*)@this)[30];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((ushort*)other)[14];
      result8 ^= ((byte*)other)[30];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      result0 |= result8;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block31* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block31* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      var dword = 0x01010101U * value;
      ((uint*)@this)[6] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[14] = word;
      ((byte*)@this)[30] = value;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block31* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[14] = word;
      ((byte*)@this)[30] = value;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block31* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block31* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((uint*)@this)[6] = 0;
      ((ushort*)@this)[14] = 0;
      ((byte*)@this)[30] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block31* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((ushort*)@this)[14] = 0;
      ((byte*)@this)[30] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block31* @this, Block31* operand, Block31* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block31* @this, Block31* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block31* @this, Block31* operand, Block31* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((uint*)@this)[6];
      var result4 = ((ushort*)@this)[14];
      var result5 = ((byte*)@this)[30];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((uint*)operand)[6];
      result4 &= ((ushort*)operand)[14];
      result5 &= ((byte*)operand)[30];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((uint*)target)[6] = result3;
      ((ushort*)target)[14] = result4;
      ((byte*)target)[30] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block31* @this, Block31* operand, Block31* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((ushort*)@this)[14];
      var result8 = ((byte*)@this)[30];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((ushort*)operand)[14];
      result8 &= ((byte*)operand)[30];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((ushort*)target)[14] = result7;
      ((byte*)target)[30] = result8;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block31* @this, Block31* operand, Block31* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block31* @this, Block31* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block31* @this, Block31* operand, Block31* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((uint*)@this)[6];
      var result4 = ((ushort*)@this)[14];
      var result5 = ((byte*)@this)[30];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((uint*)operand)[6];
      result4 &= ((ushort*)operand)[14];
      result5 &= ((byte*)operand)[30];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((uint*)target)[6] = result3;
      ((ushort*)target)[14] = result4;
      ((byte*)target)[30] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block31* @this, Block31* operand, Block31* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((ushort*)@this)[14];
      var result8 = ((byte*)@this)[30];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((ushort*)operand)[14];
      result8 &= ((byte*)operand)[30];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((ushort*)target)[14] = result7;
      ((byte*)target)[30] = result8;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block31* @this, Block31* operand, Block31* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block31* @this, Block31* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block31* @this, Block31* operand, Block31* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((uint*)@this)[6];
      var result4 = ((ushort*)@this)[14];
      var result5 = ((byte*)@this)[30];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((uint*)operand)[6];
      result4 |= ((ushort*)operand)[14];
      result5 |= ((byte*)operand)[30];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((uint*)target)[6] = result3;
      ((ushort*)target)[14] = result4;
      ((byte*)target)[30] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block31* @this, Block31* operand, Block31* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((ushort*)@this)[14];
      var result8 = ((byte*)@this)[30];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((ushort*)operand)[14];
      result8 |= ((byte*)operand)[30];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((ushort*)target)[14] = result7;
      ((byte*)target)[30] = result8;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block31* @this, Block31* operand, Block31* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block31* @this, Block31* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block31* @this, Block31* operand, Block31* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((uint*)@this)[6];
      var result4 = ((ushort*)@this)[14];
      var result5 = ((byte*)@this)[30];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((uint*)operand)[6];
      result4 |= ((ushort*)operand)[14];
      result5 |= ((byte*)operand)[30];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((uint*)target)[6] = result3;
      ((ushort*)target)[14] = result4;
      ((byte*)target)[30] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block31* @this, Block31* operand, Block31* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((ushort*)@this)[14];
      var result8 = ((byte*)@this)[30];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((ushort*)operand)[14];
      result8 |= ((byte*)operand)[30];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((ushort*)target)[14] = result7;
      ((byte*)target)[30] = result8;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block31* @this, Block31* operand, Block31* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block31* @this, Block31* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block31* @this, Block31* operand, Block31* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((uint*)@this)[6];
      var result4 = ((ushort*)@this)[14];
      var result5 = ((byte*)@this)[30];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((uint*)operand)[6];
      result4 ^= ((ushort*)operand)[14];
      result5 ^= ((byte*)operand)[30];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((uint*)target)[6] = result3;
      ((ushort*)target)[14] = result4;
      ((byte*)target)[30] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block31* @this, Block31* operand, Block31* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((ushort*)@this)[14];
      var result8 = ((byte*)@this)[30];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((ushort*)operand)[14];
      result8 ^= ((byte*)operand)[30];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((ushort*)target)[14] = result7;
      ((byte*)target)[30] = result8;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block31* @this, Block31* operand, Block31* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block31* @this, Block31* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block31* @this, Block31* operand, Block31* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((uint*)@this)[6];
      var result4 = ((ushort*)@this)[14];
      var result5 = ((byte*)@this)[30];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((uint*)operand)[6];
      result4 ^= ((ushort*)operand)[14];
      result5 ^= ((byte*)operand)[30];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((uint*)target)[6] = result3;
      ((ushort*)target)[14] = result4;
      ((byte*)target)[30] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block31* @this, Block31* operand, Block31* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((ushort*)@this)[14];
      var result8 = ((byte*)@this)[30];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((ushort*)operand)[14];
      result8 ^= ((byte*)operand)[30];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((ushort*)target)[14] = result7;
      ((byte*)target)[30] = result8;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block31* @this, Block31* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block31* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block31* @this, Block31* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((uint*)@this)[6];
      var result4 = ((ushort*)@this)[14];
      var result5 = ((byte*)@this)[30];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((uint*)target)[6] = result3;
      ((ushort*)target)[14] = result4;
      ((byte*)target)[30] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block31* @this, Block31* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((ushort*)@this)[14];
      var result8 = ((byte*)@this)[30];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((ushort*)target)[14] = result7;
      ((byte*)target)[30] = result8;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 32)] 
  public struct Block32 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block32* @this, Block32* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block32* @this, Block32* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ulong*)other)[3];
      result0 |= result1;
      result2 |= result3;
      result0 |= result2;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block32* @this, Block32* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((uint*)other)[7];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block32* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block32* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((ulong*)@this)[3] = qword;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block32* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((uint*)@this)[7] = dword;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block32* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block32* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ulong*)@this)[3] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block32* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((uint*)@this)[7] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block32* @this, Block32* operand, Block32* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block32* @this, Block32* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block32* @this, Block32* operand, Block32* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block32* @this, Block32* operand, Block32* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block32* @this, Block32* operand, Block32* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block32* @this, Block32* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block32* @this, Block32* operand, Block32* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block32* @this, Block32* operand, Block32* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block32* @this, Block32* operand, Block32* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block32* @this, Block32* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block32* @this, Block32* operand, Block32* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block32* @this, Block32* operand, Block32* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block32* @this, Block32* operand, Block32* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block32* @this, Block32* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block32* @this, Block32* operand, Block32* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block32* @this, Block32* operand, Block32* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block32* @this, Block32* operand, Block32* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block32* @this, Block32* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block32* @this, Block32* operand, Block32* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block32* @this, Block32* operand, Block32* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block32* @this, Block32* operand, Block32* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block32* @this, Block32* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block32* @this, Block32* operand, Block32* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block32* @this, Block32* operand, Block32* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block32* @this, Block32* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block32* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block32* @this, Block32* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block32* @this, Block32* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 33)] 
  public struct Block33 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block33* @this, Block33* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block33* @this, Block33* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((byte*)@this)[32];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ulong*)other)[3];
      result4 ^= ((byte*)other)[32];
      result0 |= result1;
      result2 |= result3;
      result0 |= result2;
      result0 |= result4;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block33* @this, Block33* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((byte*)@this)[32];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((uint*)other)[7];
      result8 ^= ((byte*)other)[32];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      result0 |= result8;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block33* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block33* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((ulong*)@this)[3] = qword;
      ((byte*)@this)[32] = value;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block33* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((uint*)@this)[7] = dword;
      ((byte*)@this)[32] = value;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block33* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block33* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ulong*)@this)[3] = 0;
      ((byte*)@this)[32] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block33* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((uint*)@this)[7] = 0;
      ((byte*)@this)[32] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block33* @this, Block33* operand, Block33* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block33* @this, Block33* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block33* @this, Block33* operand, Block33* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((byte*)@this)[32];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((byte*)operand)[32];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((byte*)target)[32] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block33* @this, Block33* operand, Block33* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((byte*)@this)[32];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((byte*)operand)[32];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((byte*)target)[32] = result8;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block33* @this, Block33* operand, Block33* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block33* @this, Block33* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block33* @this, Block33* operand, Block33* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((byte*)@this)[32];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((byte*)operand)[32];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((byte*)target)[32] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block33* @this, Block33* operand, Block33* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((byte*)@this)[32];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((byte*)operand)[32];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((byte*)target)[32] = result8;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block33* @this, Block33* operand, Block33* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block33* @this, Block33* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block33* @this, Block33* operand, Block33* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((byte*)@this)[32];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((byte*)operand)[32];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((byte*)target)[32] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block33* @this, Block33* operand, Block33* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((byte*)@this)[32];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((byte*)operand)[32];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((byte*)target)[32] = result8;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block33* @this, Block33* operand, Block33* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block33* @this, Block33* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block33* @this, Block33* operand, Block33* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((byte*)@this)[32];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((byte*)operand)[32];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((byte*)target)[32] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block33* @this, Block33* operand, Block33* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((byte*)@this)[32];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((byte*)operand)[32];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((byte*)target)[32] = result8;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block33* @this, Block33* operand, Block33* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block33* @this, Block33* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block33* @this, Block33* operand, Block33* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((byte*)@this)[32];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((byte*)operand)[32];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((byte*)target)[32] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block33* @this, Block33* operand, Block33* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((byte*)@this)[32];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((byte*)operand)[32];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((byte*)target)[32] = result8;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block33* @this, Block33* operand, Block33* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block33* @this, Block33* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block33* @this, Block33* operand, Block33* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((byte*)@this)[32];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((byte*)operand)[32];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((byte*)target)[32] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block33* @this, Block33* operand, Block33* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((byte*)@this)[32];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((byte*)operand)[32];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((byte*)target)[32] = result8;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block33* @this, Block33* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block33* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block33* @this, Block33* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((byte*)@this)[32];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((byte*)target)[32] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block33* @this, Block33* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((byte*)@this)[32];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((byte*)target)[32] = result8;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 34)] 
  public struct Block34 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block34* @this, Block34* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block34* @this, Block34* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ushort*)@this)[16];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ulong*)other)[3];
      result4 ^= ((ushort*)other)[16];
      result0 |= result1;
      result2 |= result3;
      result0 |= result2;
      result0 |= result4;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block34* @this, Block34* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((ushort*)@this)[16];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((uint*)other)[7];
      result8 ^= ((ushort*)other)[16];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      result0 |= result8;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block34* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block34* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((ulong*)@this)[3] = qword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[16] = word;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block34* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((uint*)@this)[7] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[16] = word;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block34* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block34* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ulong*)@this)[3] = 0;
      ((ushort*)@this)[16] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block34* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((uint*)@this)[7] = 0;
      ((ushort*)@this)[16] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block34* @this, Block34* operand, Block34* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block34* @this, Block34* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block34* @this, Block34* operand, Block34* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ushort*)@this)[16];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ushort*)operand)[16];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ushort*)target)[16] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block34* @this, Block34* operand, Block34* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((ushort*)@this)[16];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((ushort*)operand)[16];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((ushort*)target)[16] = result8;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block34* @this, Block34* operand, Block34* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block34* @this, Block34* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block34* @this, Block34* operand, Block34* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ushort*)@this)[16];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ushort*)operand)[16];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ushort*)target)[16] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block34* @this, Block34* operand, Block34* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((ushort*)@this)[16];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((ushort*)operand)[16];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((ushort*)target)[16] = result8;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block34* @this, Block34* operand, Block34* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block34* @this, Block34* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block34* @this, Block34* operand, Block34* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ushort*)@this)[16];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ushort*)operand)[16];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ushort*)target)[16] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block34* @this, Block34* operand, Block34* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((ushort*)@this)[16];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((ushort*)operand)[16];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((ushort*)target)[16] = result8;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block34* @this, Block34* operand, Block34* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block34* @this, Block34* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block34* @this, Block34* operand, Block34* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ushort*)@this)[16];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ushort*)operand)[16];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ushort*)target)[16] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block34* @this, Block34* operand, Block34* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((ushort*)@this)[16];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((ushort*)operand)[16];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((ushort*)target)[16] = result8;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block34* @this, Block34* operand, Block34* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block34* @this, Block34* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block34* @this, Block34* operand, Block34* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ushort*)@this)[16];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ushort*)operand)[16];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ushort*)target)[16] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block34* @this, Block34* operand, Block34* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((ushort*)@this)[16];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((ushort*)operand)[16];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((ushort*)target)[16] = result8;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block34* @this, Block34* operand, Block34* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block34* @this, Block34* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block34* @this, Block34* operand, Block34* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ushort*)@this)[16];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ushort*)operand)[16];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ushort*)target)[16] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block34* @this, Block34* operand, Block34* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((ushort*)@this)[16];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((ushort*)operand)[16];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((ushort*)target)[16] = result8;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block34* @this, Block34* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block34* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block34* @this, Block34* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ushort*)@this)[16];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ushort*)target)[16] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block34* @this, Block34* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((ushort*)@this)[16];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((ushort*)target)[16] = result8;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 35)] 
  public struct Block35 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block35* @this, Block35* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block35* @this, Block35* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ushort*)@this)[16];
      var result5 = ((byte*)@this)[34];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ulong*)other)[3];
      result4 ^= ((ushort*)other)[16];
      result5 ^= ((byte*)other)[34];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result0 |= result2;
      result0 |= result4;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block35* @this, Block35* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((ushort*)@this)[16];
      var result9 = ((byte*)@this)[34];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((uint*)other)[7];
      result8 ^= ((ushort*)other)[16];
      result9 ^= ((byte*)other)[34];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result8 |= result9;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      result0 |= result8;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block35* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block35* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((ulong*)@this)[3] = qword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[16] = word;
      ((byte*)@this)[34] = value;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block35* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((uint*)@this)[7] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[16] = word;
      ((byte*)@this)[34] = value;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block35* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block35* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ulong*)@this)[3] = 0;
      ((ushort*)@this)[16] = 0;
      ((byte*)@this)[34] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block35* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((uint*)@this)[7] = 0;
      ((ushort*)@this)[16] = 0;
      ((byte*)@this)[34] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block35* @this, Block35* operand, Block35* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block35* @this, Block35* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block35* @this, Block35* operand, Block35* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ushort*)@this)[16];
      var result5 = ((byte*)@this)[34];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ushort*)operand)[16];
      result5 &= ((byte*)operand)[34];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ushort*)target)[16] = result4;
      ((byte*)target)[34] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block35* @this, Block35* operand, Block35* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((ushort*)@this)[16];
      var result9 = ((byte*)@this)[34];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((ushort*)operand)[16];
      result9 &= ((byte*)operand)[34];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((ushort*)target)[16] = result8;
      ((byte*)target)[34] = result9;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block35* @this, Block35* operand, Block35* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block35* @this, Block35* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block35* @this, Block35* operand, Block35* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ushort*)@this)[16];
      var result5 = ((byte*)@this)[34];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ushort*)operand)[16];
      result5 &= ((byte*)operand)[34];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ushort*)target)[16] = result4;
      ((byte*)target)[34] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block35* @this, Block35* operand, Block35* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((ushort*)@this)[16];
      var result9 = ((byte*)@this)[34];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((ushort*)operand)[16];
      result9 &= ((byte*)operand)[34];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((ushort*)target)[16] = result8;
      ((byte*)target)[34] = result9;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block35* @this, Block35* operand, Block35* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block35* @this, Block35* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block35* @this, Block35* operand, Block35* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ushort*)@this)[16];
      var result5 = ((byte*)@this)[34];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ushort*)operand)[16];
      result5 |= ((byte*)operand)[34];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ushort*)target)[16] = result4;
      ((byte*)target)[34] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block35* @this, Block35* operand, Block35* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((ushort*)@this)[16];
      var result9 = ((byte*)@this)[34];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((ushort*)operand)[16];
      result9 |= ((byte*)operand)[34];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((ushort*)target)[16] = result8;
      ((byte*)target)[34] = result9;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block35* @this, Block35* operand, Block35* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block35* @this, Block35* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block35* @this, Block35* operand, Block35* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ushort*)@this)[16];
      var result5 = ((byte*)@this)[34];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ushort*)operand)[16];
      result5 |= ((byte*)operand)[34];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ushort*)target)[16] = result4;
      ((byte*)target)[34] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block35* @this, Block35* operand, Block35* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((ushort*)@this)[16];
      var result9 = ((byte*)@this)[34];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((ushort*)operand)[16];
      result9 |= ((byte*)operand)[34];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((ushort*)target)[16] = result8;
      ((byte*)target)[34] = result9;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block35* @this, Block35* operand, Block35* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block35* @this, Block35* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block35* @this, Block35* operand, Block35* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ushort*)@this)[16];
      var result5 = ((byte*)@this)[34];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ushort*)operand)[16];
      result5 ^= ((byte*)operand)[34];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ushort*)target)[16] = result4;
      ((byte*)target)[34] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block35* @this, Block35* operand, Block35* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((ushort*)@this)[16];
      var result9 = ((byte*)@this)[34];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((ushort*)operand)[16];
      result9 ^= ((byte*)operand)[34];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((ushort*)target)[16] = result8;
      ((byte*)target)[34] = result9;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block35* @this, Block35* operand, Block35* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block35* @this, Block35* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block35* @this, Block35* operand, Block35* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ushort*)@this)[16];
      var result5 = ((byte*)@this)[34];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ushort*)operand)[16];
      result5 ^= ((byte*)operand)[34];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ushort*)target)[16] = result4;
      ((byte*)target)[34] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block35* @this, Block35* operand, Block35* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((ushort*)@this)[16];
      var result9 = ((byte*)@this)[34];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((ushort*)operand)[16];
      result9 ^= ((byte*)operand)[34];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((ushort*)target)[16] = result8;
      ((byte*)target)[34] = result9;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block35* @this, Block35* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block35* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block35* @this, Block35* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ushort*)@this)[16];
      var result5 = ((byte*)@this)[34];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ushort*)target)[16] = result4;
      ((byte*)target)[34] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block35* @this, Block35* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((ushort*)@this)[16];
      var result9 = ((byte*)@this)[34];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((ushort*)target)[16] = result8;
      ((byte*)target)[34] = result9;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 36)] 
  public struct Block36 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block36* @this, Block36* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block36* @this, Block36* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((uint*)@this)[8];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ulong*)other)[3];
      result4 ^= ((uint*)other)[8];
      result0 |= result1;
      result2 |= result3;
      result0 |= result2;
      result0 |= result4;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block36* @this, Block36* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((uint*)other)[7];
      result8 ^= ((uint*)other)[8];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      result0 |= result8;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block36* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block36* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((ulong*)@this)[3] = qword;
      var dword = 0x01010101U * value;
      ((uint*)@this)[8] = dword;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block36* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((uint*)@this)[7] = dword;
      ((uint*)@this)[8] = dword;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block36* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block36* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ulong*)@this)[3] = 0;
      ((uint*)@this)[8] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block36* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((uint*)@this)[7] = 0;
      ((uint*)@this)[8] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block36* @this, Block36* operand, Block36* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block36* @this, Block36* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block36* @this, Block36* operand, Block36* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((uint*)@this)[8];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((uint*)operand)[8];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((uint*)target)[8] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block36* @this, Block36* operand, Block36* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block36* @this, Block36* operand, Block36* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block36* @this, Block36* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block36* @this, Block36* operand, Block36* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((uint*)@this)[8];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((uint*)operand)[8];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((uint*)target)[8] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block36* @this, Block36* operand, Block36* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block36* @this, Block36* operand, Block36* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block36* @this, Block36* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block36* @this, Block36* operand, Block36* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((uint*)@this)[8];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((uint*)operand)[8];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((uint*)target)[8] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block36* @this, Block36* operand, Block36* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block36* @this, Block36* operand, Block36* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block36* @this, Block36* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block36* @this, Block36* operand, Block36* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((uint*)@this)[8];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((uint*)operand)[8];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((uint*)target)[8] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block36* @this, Block36* operand, Block36* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block36* @this, Block36* operand, Block36* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block36* @this, Block36* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block36* @this, Block36* operand, Block36* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((uint*)@this)[8];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((uint*)operand)[8];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((uint*)target)[8] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block36* @this, Block36* operand, Block36* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block36* @this, Block36* operand, Block36* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block36* @this, Block36* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block36* @this, Block36* operand, Block36* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((uint*)@this)[8];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((uint*)operand)[8];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((uint*)target)[8] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block36* @this, Block36* operand, Block36* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block36* @this, Block36* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block36* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block36* @this, Block36* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((uint*)@this)[8];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((uint*)target)[8] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block36* @this, Block36* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 37)] 
  public struct Block37 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block37* @this, Block37* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block37* @this, Block37* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((uint*)@this)[8];
      var result5 = ((byte*)@this)[36];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ulong*)other)[3];
      result4 ^= ((uint*)other)[8];
      result5 ^= ((byte*)other)[36];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result0 |= result2;
      result0 |= result4;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block37* @this, Block37* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((byte*)@this)[36];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((uint*)other)[7];
      result8 ^= ((uint*)other)[8];
      result9 ^= ((byte*)other)[36];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result8 |= result9;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      result0 |= result8;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block37* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block37* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((ulong*)@this)[3] = qword;
      var dword = 0x01010101U * value;
      ((uint*)@this)[8] = dword;
      ((byte*)@this)[36] = value;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block37* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((uint*)@this)[7] = dword;
      ((uint*)@this)[8] = dword;
      ((byte*)@this)[36] = value;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block37* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block37* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ulong*)@this)[3] = 0;
      ((uint*)@this)[8] = 0;
      ((byte*)@this)[36] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block37* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((uint*)@this)[7] = 0;
      ((uint*)@this)[8] = 0;
      ((byte*)@this)[36] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block37* @this, Block37* operand, Block37* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block37* @this, Block37* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block37* @this, Block37* operand, Block37* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((uint*)@this)[8];
      var result5 = ((byte*)@this)[36];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((uint*)operand)[8];
      result5 &= ((byte*)operand)[36];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((uint*)target)[8] = result4;
      ((byte*)target)[36] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block37* @this, Block37* operand, Block37* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((byte*)@this)[36];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((byte*)operand)[36];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((byte*)target)[36] = result9;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block37* @this, Block37* operand, Block37* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block37* @this, Block37* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block37* @this, Block37* operand, Block37* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((uint*)@this)[8];
      var result5 = ((byte*)@this)[36];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((uint*)operand)[8];
      result5 &= ((byte*)operand)[36];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((uint*)target)[8] = result4;
      ((byte*)target)[36] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block37* @this, Block37* operand, Block37* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((byte*)@this)[36];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((byte*)operand)[36];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((byte*)target)[36] = result9;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block37* @this, Block37* operand, Block37* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block37* @this, Block37* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block37* @this, Block37* operand, Block37* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((uint*)@this)[8];
      var result5 = ((byte*)@this)[36];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((uint*)operand)[8];
      result5 |= ((byte*)operand)[36];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((uint*)target)[8] = result4;
      ((byte*)target)[36] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block37* @this, Block37* operand, Block37* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((byte*)@this)[36];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((byte*)operand)[36];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((byte*)target)[36] = result9;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block37* @this, Block37* operand, Block37* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block37* @this, Block37* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block37* @this, Block37* operand, Block37* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((uint*)@this)[8];
      var result5 = ((byte*)@this)[36];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((uint*)operand)[8];
      result5 |= ((byte*)operand)[36];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((uint*)target)[8] = result4;
      ((byte*)target)[36] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block37* @this, Block37* operand, Block37* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((byte*)@this)[36];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((byte*)operand)[36];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((byte*)target)[36] = result9;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block37* @this, Block37* operand, Block37* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block37* @this, Block37* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block37* @this, Block37* operand, Block37* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((uint*)@this)[8];
      var result5 = ((byte*)@this)[36];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((uint*)operand)[8];
      result5 ^= ((byte*)operand)[36];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((uint*)target)[8] = result4;
      ((byte*)target)[36] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block37* @this, Block37* operand, Block37* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((byte*)@this)[36];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((byte*)operand)[36];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((byte*)target)[36] = result9;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block37* @this, Block37* operand, Block37* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block37* @this, Block37* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block37* @this, Block37* operand, Block37* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((uint*)@this)[8];
      var result5 = ((byte*)@this)[36];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((uint*)operand)[8];
      result5 ^= ((byte*)operand)[36];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((uint*)target)[8] = result4;
      ((byte*)target)[36] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block37* @this, Block37* operand, Block37* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((byte*)@this)[36];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((byte*)operand)[36];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((byte*)target)[36] = result9;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block37* @this, Block37* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block37* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block37* @this, Block37* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((uint*)@this)[8];
      var result5 = ((byte*)@this)[36];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((uint*)target)[8] = result4;
      ((byte*)target)[36] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block37* @this, Block37* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((byte*)@this)[36];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((byte*)target)[36] = result9;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 38)] 
  public struct Block38 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block38* @this, Block38* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block38* @this, Block38* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((uint*)@this)[8];
      var result5 = ((ushort*)@this)[18];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ulong*)other)[3];
      result4 ^= ((uint*)other)[8];
      result5 ^= ((ushort*)other)[18];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result0 |= result2;
      result0 |= result4;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block38* @this, Block38* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((ushort*)@this)[18];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((uint*)other)[7];
      result8 ^= ((uint*)other)[8];
      result9 ^= ((ushort*)other)[18];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result8 |= result9;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      result0 |= result8;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block38* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block38* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((ulong*)@this)[3] = qword;
      var dword = 0x01010101U * value;
      ((uint*)@this)[8] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[18] = word;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block38* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((uint*)@this)[7] = dword;
      ((uint*)@this)[8] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[18] = word;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block38* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block38* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ulong*)@this)[3] = 0;
      ((uint*)@this)[8] = 0;
      ((ushort*)@this)[18] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block38* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((uint*)@this)[7] = 0;
      ((uint*)@this)[8] = 0;
      ((ushort*)@this)[18] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block38* @this, Block38* operand, Block38* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block38* @this, Block38* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block38* @this, Block38* operand, Block38* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((uint*)@this)[8];
      var result5 = ((ushort*)@this)[18];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((uint*)operand)[8];
      result5 &= ((ushort*)operand)[18];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((uint*)target)[8] = result4;
      ((ushort*)target)[18] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block38* @this, Block38* operand, Block38* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((ushort*)@this)[18];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((ushort*)operand)[18];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((ushort*)target)[18] = result9;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block38* @this, Block38* operand, Block38* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block38* @this, Block38* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block38* @this, Block38* operand, Block38* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((uint*)@this)[8];
      var result5 = ((ushort*)@this)[18];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((uint*)operand)[8];
      result5 &= ((ushort*)operand)[18];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((uint*)target)[8] = result4;
      ((ushort*)target)[18] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block38* @this, Block38* operand, Block38* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((ushort*)@this)[18];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((ushort*)operand)[18];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((ushort*)target)[18] = result9;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block38* @this, Block38* operand, Block38* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block38* @this, Block38* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block38* @this, Block38* operand, Block38* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((uint*)@this)[8];
      var result5 = ((ushort*)@this)[18];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((uint*)operand)[8];
      result5 |= ((ushort*)operand)[18];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((uint*)target)[8] = result4;
      ((ushort*)target)[18] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block38* @this, Block38* operand, Block38* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((ushort*)@this)[18];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((ushort*)operand)[18];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((ushort*)target)[18] = result9;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block38* @this, Block38* operand, Block38* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block38* @this, Block38* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block38* @this, Block38* operand, Block38* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((uint*)@this)[8];
      var result5 = ((ushort*)@this)[18];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((uint*)operand)[8];
      result5 |= ((ushort*)operand)[18];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((uint*)target)[8] = result4;
      ((ushort*)target)[18] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block38* @this, Block38* operand, Block38* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((ushort*)@this)[18];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((ushort*)operand)[18];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((ushort*)target)[18] = result9;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block38* @this, Block38* operand, Block38* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block38* @this, Block38* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block38* @this, Block38* operand, Block38* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((uint*)@this)[8];
      var result5 = ((ushort*)@this)[18];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((uint*)operand)[8];
      result5 ^= ((ushort*)operand)[18];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((uint*)target)[8] = result4;
      ((ushort*)target)[18] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block38* @this, Block38* operand, Block38* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((ushort*)@this)[18];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((ushort*)operand)[18];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((ushort*)target)[18] = result9;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block38* @this, Block38* operand, Block38* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block38* @this, Block38* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block38* @this, Block38* operand, Block38* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((uint*)@this)[8];
      var result5 = ((ushort*)@this)[18];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((uint*)operand)[8];
      result5 ^= ((ushort*)operand)[18];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((uint*)target)[8] = result4;
      ((ushort*)target)[18] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block38* @this, Block38* operand, Block38* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((ushort*)@this)[18];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((ushort*)operand)[18];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((ushort*)target)[18] = result9;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block38* @this, Block38* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block38* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block38* @this, Block38* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((uint*)@this)[8];
      var result5 = ((ushort*)@this)[18];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((uint*)target)[8] = result4;
      ((ushort*)target)[18] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block38* @this, Block38* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((ushort*)@this)[18];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((ushort*)target)[18] = result9;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 39)] 
  public struct Block39 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block39* @this, Block39* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block39* @this, Block39* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((uint*)@this)[8];
      var result5 = ((ushort*)@this)[18];
      var result6 = ((byte*)@this)[38];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ulong*)other)[3];
      result4 ^= ((uint*)other)[8];
      result5 ^= ((ushort*)other)[18];
      result6 ^= ((byte*)other)[38];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block39* @this, Block39* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((ushort*)@this)[18];
      var result10 = ((byte*)@this)[38];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((uint*)other)[7];
      result8 ^= ((uint*)other)[8];
      result9 ^= ((ushort*)other)[18];
      result10 ^= ((byte*)other)[38];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result8 |= result9;
      result0 |= result2;
      result4 |= result6;
      result8 |= result10;
      result0 |= result4;
      result0 |= result8;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block39* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block39* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((ulong*)@this)[3] = qword;
      var dword = 0x01010101U * value;
      ((uint*)@this)[8] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[18] = word;
      ((byte*)@this)[38] = value;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block39* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((uint*)@this)[7] = dword;
      ((uint*)@this)[8] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[18] = word;
      ((byte*)@this)[38] = value;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block39* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block39* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ulong*)@this)[3] = 0;
      ((uint*)@this)[8] = 0;
      ((ushort*)@this)[18] = 0;
      ((byte*)@this)[38] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block39* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((uint*)@this)[7] = 0;
      ((uint*)@this)[8] = 0;
      ((ushort*)@this)[18] = 0;
      ((byte*)@this)[38] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block39* @this, Block39* operand, Block39* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block39* @this, Block39* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block39* @this, Block39* operand, Block39* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((uint*)@this)[8];
      var result5 = ((ushort*)@this)[18];
      var result6 = ((byte*)@this)[38];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((uint*)operand)[8];
      result5 &= ((ushort*)operand)[18];
      result6 &= ((byte*)operand)[38];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((uint*)target)[8] = result4;
      ((ushort*)target)[18] = result5;
      ((byte*)target)[38] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block39* @this, Block39* operand, Block39* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((ushort*)@this)[18];
      var result10 = ((byte*)@this)[38];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((ushort*)operand)[18];
      result10 &= ((byte*)operand)[38];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((ushort*)target)[18] = result9;
      ((byte*)target)[38] = result10;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block39* @this, Block39* operand, Block39* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block39* @this, Block39* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block39* @this, Block39* operand, Block39* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((uint*)@this)[8];
      var result5 = ((ushort*)@this)[18];
      var result6 = ((byte*)@this)[38];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((uint*)operand)[8];
      result5 &= ((ushort*)operand)[18];
      result6 &= ((byte*)operand)[38];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((uint*)target)[8] = result4;
      ((ushort*)target)[18] = result5;
      ((byte*)target)[38] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block39* @this, Block39* operand, Block39* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((ushort*)@this)[18];
      var result10 = ((byte*)@this)[38];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((ushort*)operand)[18];
      result10 &= ((byte*)operand)[38];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((ushort*)target)[18] = result9;
      ((byte*)target)[38] = result10;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block39* @this, Block39* operand, Block39* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block39* @this, Block39* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block39* @this, Block39* operand, Block39* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((uint*)@this)[8];
      var result5 = ((ushort*)@this)[18];
      var result6 = ((byte*)@this)[38];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((uint*)operand)[8];
      result5 |= ((ushort*)operand)[18];
      result6 |= ((byte*)operand)[38];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((uint*)target)[8] = result4;
      ((ushort*)target)[18] = result5;
      ((byte*)target)[38] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block39* @this, Block39* operand, Block39* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((ushort*)@this)[18];
      var result10 = ((byte*)@this)[38];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((ushort*)operand)[18];
      result10 |= ((byte*)operand)[38];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((ushort*)target)[18] = result9;
      ((byte*)target)[38] = result10;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block39* @this, Block39* operand, Block39* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block39* @this, Block39* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block39* @this, Block39* operand, Block39* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((uint*)@this)[8];
      var result5 = ((ushort*)@this)[18];
      var result6 = ((byte*)@this)[38];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((uint*)operand)[8];
      result5 |= ((ushort*)operand)[18];
      result6 |= ((byte*)operand)[38];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((uint*)target)[8] = result4;
      ((ushort*)target)[18] = result5;
      ((byte*)target)[38] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block39* @this, Block39* operand, Block39* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((ushort*)@this)[18];
      var result10 = ((byte*)@this)[38];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((ushort*)operand)[18];
      result10 |= ((byte*)operand)[38];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((ushort*)target)[18] = result9;
      ((byte*)target)[38] = result10;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block39* @this, Block39* operand, Block39* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block39* @this, Block39* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block39* @this, Block39* operand, Block39* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((uint*)@this)[8];
      var result5 = ((ushort*)@this)[18];
      var result6 = ((byte*)@this)[38];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((uint*)operand)[8];
      result5 ^= ((ushort*)operand)[18];
      result6 ^= ((byte*)operand)[38];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((uint*)target)[8] = result4;
      ((ushort*)target)[18] = result5;
      ((byte*)target)[38] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block39* @this, Block39* operand, Block39* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((ushort*)@this)[18];
      var result10 = ((byte*)@this)[38];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((ushort*)operand)[18];
      result10 ^= ((byte*)operand)[38];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((ushort*)target)[18] = result9;
      ((byte*)target)[38] = result10;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block39* @this, Block39* operand, Block39* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block39* @this, Block39* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block39* @this, Block39* operand, Block39* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((uint*)@this)[8];
      var result5 = ((ushort*)@this)[18];
      var result6 = ((byte*)@this)[38];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((uint*)operand)[8];
      result5 ^= ((ushort*)operand)[18];
      result6 ^= ((byte*)operand)[38];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((uint*)target)[8] = result4;
      ((ushort*)target)[18] = result5;
      ((byte*)target)[38] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block39* @this, Block39* operand, Block39* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((ushort*)@this)[18];
      var result10 = ((byte*)@this)[38];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((ushort*)operand)[18];
      result10 ^= ((byte*)operand)[38];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((ushort*)target)[18] = result9;
      ((byte*)target)[38] = result10;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block39* @this, Block39* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block39* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block39* @this, Block39* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((uint*)@this)[8];
      var result5 = ((ushort*)@this)[18];
      var result6 = ((byte*)@this)[38];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((uint*)target)[8] = result4;
      ((ushort*)target)[18] = result5;
      ((byte*)target)[38] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block39* @this, Block39* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((ushort*)@this)[18];
      var result10 = ((byte*)@this)[38];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((ushort*)target)[18] = result9;
      ((byte*)target)[38] = result10;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 40)] 
  public struct Block40 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block40* @this, Block40* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block40* @this, Block40* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ulong*)other)[3];
      result4 ^= ((ulong*)other)[4];
      result0 |= result1;
      result2 |= result3;
      result0 |= result2;
      result0 |= result4;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block40* @this, Block40* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((uint*)other)[7];
      result8 ^= ((uint*)other)[8];
      result9 ^= ((uint*)other)[9];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result8 |= result9;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      result0 |= result8;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block40* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block40* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((ulong*)@this)[3] = qword;
      ((ulong*)@this)[4] = qword;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block40* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((uint*)@this)[7] = dword;
      ((uint*)@this)[8] = dword;
      ((uint*)@this)[9] = dword;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block40* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block40* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ulong*)@this)[3] = 0;
      ((ulong*)@this)[4] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block40* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((uint*)@this)[7] = 0;
      ((uint*)@this)[8] = 0;
      ((uint*)@this)[9] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block40* @this, Block40* operand, Block40* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block40* @this, Block40* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block40* @this, Block40* operand, Block40* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block40* @this, Block40* operand, Block40* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block40* @this, Block40* operand, Block40* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block40* @this, Block40* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block40* @this, Block40* operand, Block40* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block40* @this, Block40* operand, Block40* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block40* @this, Block40* operand, Block40* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block40* @this, Block40* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block40* @this, Block40* operand, Block40* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block40* @this, Block40* operand, Block40* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block40* @this, Block40* operand, Block40* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block40* @this, Block40* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block40* @this, Block40* operand, Block40* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block40* @this, Block40* operand, Block40* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block40* @this, Block40* operand, Block40* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block40* @this, Block40* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block40* @this, Block40* operand, Block40* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block40* @this, Block40* operand, Block40* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block40* @this, Block40* operand, Block40* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block40* @this, Block40* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block40* @this, Block40* operand, Block40* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block40* @this, Block40* operand, Block40* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block40* @this, Block40* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block40* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block40* @this, Block40* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block40* @this, Block40* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 41)] 
  public struct Block41 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block41* @this, Block41* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block41* @this, Block41* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((byte*)@this)[40];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ulong*)other)[3];
      result4 ^= ((ulong*)other)[4];
      result5 ^= ((byte*)other)[40];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result0 |= result2;
      result0 |= result4;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block41* @this, Block41* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((byte*)@this)[40];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((uint*)other)[7];
      result8 ^= ((uint*)other)[8];
      result9 ^= ((uint*)other)[9];
      result10 ^= ((byte*)other)[40];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result8 |= result9;
      result0 |= result2;
      result4 |= result6;
      result8 |= result10;
      result0 |= result4;
      result0 |= result8;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block41* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block41* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((ulong*)@this)[3] = qword;
      ((ulong*)@this)[4] = qword;
      ((byte*)@this)[40] = value;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block41* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((uint*)@this)[7] = dword;
      ((uint*)@this)[8] = dword;
      ((uint*)@this)[9] = dword;
      ((byte*)@this)[40] = value;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block41* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block41* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ulong*)@this)[3] = 0;
      ((ulong*)@this)[4] = 0;
      ((byte*)@this)[40] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block41* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((uint*)@this)[7] = 0;
      ((uint*)@this)[8] = 0;
      ((uint*)@this)[9] = 0;
      ((byte*)@this)[40] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block41* @this, Block41* operand, Block41* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block41* @this, Block41* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block41* @this, Block41* operand, Block41* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((byte*)@this)[40];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((byte*)operand)[40];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((byte*)target)[40] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block41* @this, Block41* operand, Block41* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((byte*)@this)[40];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((byte*)operand)[40];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((byte*)target)[40] = result10;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block41* @this, Block41* operand, Block41* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block41* @this, Block41* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block41* @this, Block41* operand, Block41* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((byte*)@this)[40];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((byte*)operand)[40];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((byte*)target)[40] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block41* @this, Block41* operand, Block41* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((byte*)@this)[40];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((byte*)operand)[40];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((byte*)target)[40] = result10;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block41* @this, Block41* operand, Block41* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block41* @this, Block41* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block41* @this, Block41* operand, Block41* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((byte*)@this)[40];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((byte*)operand)[40];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((byte*)target)[40] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block41* @this, Block41* operand, Block41* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((byte*)@this)[40];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((byte*)operand)[40];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((byte*)target)[40] = result10;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block41* @this, Block41* operand, Block41* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block41* @this, Block41* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block41* @this, Block41* operand, Block41* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((byte*)@this)[40];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((byte*)operand)[40];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((byte*)target)[40] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block41* @this, Block41* operand, Block41* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((byte*)@this)[40];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((byte*)operand)[40];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((byte*)target)[40] = result10;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block41* @this, Block41* operand, Block41* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block41* @this, Block41* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block41* @this, Block41* operand, Block41* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((byte*)@this)[40];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((byte*)operand)[40];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((byte*)target)[40] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block41* @this, Block41* operand, Block41* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((byte*)@this)[40];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((byte*)operand)[40];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((byte*)target)[40] = result10;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block41* @this, Block41* operand, Block41* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block41* @this, Block41* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block41* @this, Block41* operand, Block41* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((byte*)@this)[40];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((byte*)operand)[40];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((byte*)target)[40] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block41* @this, Block41* operand, Block41* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((byte*)@this)[40];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((byte*)operand)[40];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((byte*)target)[40] = result10;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block41* @this, Block41* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block41* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block41* @this, Block41* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((byte*)@this)[40];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((byte*)target)[40] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block41* @this, Block41* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((byte*)@this)[40];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((byte*)target)[40] = result10;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 42)] 
  public struct Block42 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block42* @this, Block42* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block42* @this, Block42* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ushort*)@this)[20];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ulong*)other)[3];
      result4 ^= ((ulong*)other)[4];
      result5 ^= ((ushort*)other)[20];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result0 |= result2;
      result0 |= result4;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block42* @this, Block42* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((ushort*)@this)[20];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((uint*)other)[7];
      result8 ^= ((uint*)other)[8];
      result9 ^= ((uint*)other)[9];
      result10 ^= ((ushort*)other)[20];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result8 |= result9;
      result0 |= result2;
      result4 |= result6;
      result8 |= result10;
      result0 |= result4;
      result0 |= result8;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block42* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block42* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((ulong*)@this)[3] = qword;
      ((ulong*)@this)[4] = qword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[20] = word;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block42* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((uint*)@this)[7] = dword;
      ((uint*)@this)[8] = dword;
      ((uint*)@this)[9] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[20] = word;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block42* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block42* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ulong*)@this)[3] = 0;
      ((ulong*)@this)[4] = 0;
      ((ushort*)@this)[20] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block42* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((uint*)@this)[7] = 0;
      ((uint*)@this)[8] = 0;
      ((uint*)@this)[9] = 0;
      ((ushort*)@this)[20] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block42* @this, Block42* operand, Block42* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block42* @this, Block42* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block42* @this, Block42* operand, Block42* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ushort*)@this)[20];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ushort*)operand)[20];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ushort*)target)[20] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block42* @this, Block42* operand, Block42* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((ushort*)@this)[20];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((ushort*)operand)[20];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((ushort*)target)[20] = result10;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block42* @this, Block42* operand, Block42* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block42* @this, Block42* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block42* @this, Block42* operand, Block42* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ushort*)@this)[20];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ushort*)operand)[20];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ushort*)target)[20] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block42* @this, Block42* operand, Block42* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((ushort*)@this)[20];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((ushort*)operand)[20];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((ushort*)target)[20] = result10;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block42* @this, Block42* operand, Block42* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block42* @this, Block42* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block42* @this, Block42* operand, Block42* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ushort*)@this)[20];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ushort*)operand)[20];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ushort*)target)[20] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block42* @this, Block42* operand, Block42* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((ushort*)@this)[20];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((ushort*)operand)[20];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((ushort*)target)[20] = result10;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block42* @this, Block42* operand, Block42* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block42* @this, Block42* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block42* @this, Block42* operand, Block42* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ushort*)@this)[20];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ushort*)operand)[20];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ushort*)target)[20] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block42* @this, Block42* operand, Block42* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((ushort*)@this)[20];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((ushort*)operand)[20];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((ushort*)target)[20] = result10;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block42* @this, Block42* operand, Block42* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block42* @this, Block42* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block42* @this, Block42* operand, Block42* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ushort*)@this)[20];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ushort*)operand)[20];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ushort*)target)[20] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block42* @this, Block42* operand, Block42* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((ushort*)@this)[20];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((ushort*)operand)[20];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((ushort*)target)[20] = result10;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block42* @this, Block42* operand, Block42* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block42* @this, Block42* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block42* @this, Block42* operand, Block42* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ushort*)@this)[20];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ushort*)operand)[20];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ushort*)target)[20] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block42* @this, Block42* operand, Block42* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((ushort*)@this)[20];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((ushort*)operand)[20];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((ushort*)target)[20] = result10;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block42* @this, Block42* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block42* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block42* @this, Block42* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ushort*)@this)[20];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ushort*)target)[20] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block42* @this, Block42* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((ushort*)@this)[20];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((ushort*)target)[20] = result10;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 43)] 
  public struct Block43 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block43* @this, Block43* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block43* @this, Block43* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ushort*)@this)[20];
      var result6 = ((byte*)@this)[42];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ulong*)other)[3];
      result4 ^= ((ulong*)other)[4];
      result5 ^= ((ushort*)other)[20];
      result6 ^= ((byte*)other)[42];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block43* @this, Block43* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((ushort*)@this)[20];
      var result11 = ((byte*)@this)[42];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((uint*)other)[7];
      result8 ^= ((uint*)other)[8];
      result9 ^= ((uint*)other)[9];
      result10 ^= ((ushort*)other)[20];
      result11 ^= ((byte*)other)[42];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result8 |= result9;
      result10 |= result11;
      result0 |= result2;
      result4 |= result6;
      result8 |= result10;
      result0 |= result4;
      result0 |= result8;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block43* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block43* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((ulong*)@this)[3] = qword;
      ((ulong*)@this)[4] = qword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[20] = word;
      ((byte*)@this)[42] = value;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block43* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((uint*)@this)[7] = dword;
      ((uint*)@this)[8] = dword;
      ((uint*)@this)[9] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[20] = word;
      ((byte*)@this)[42] = value;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block43* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block43* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ulong*)@this)[3] = 0;
      ((ulong*)@this)[4] = 0;
      ((ushort*)@this)[20] = 0;
      ((byte*)@this)[42] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block43* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((uint*)@this)[7] = 0;
      ((uint*)@this)[8] = 0;
      ((uint*)@this)[9] = 0;
      ((ushort*)@this)[20] = 0;
      ((byte*)@this)[42] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block43* @this, Block43* operand, Block43* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block43* @this, Block43* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block43* @this, Block43* operand, Block43* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ushort*)@this)[20];
      var result6 = ((byte*)@this)[42];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ushort*)operand)[20];
      result6 &= ((byte*)operand)[42];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ushort*)target)[20] = result5;
      ((byte*)target)[42] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block43* @this, Block43* operand, Block43* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((ushort*)@this)[20];
      var result11 = ((byte*)@this)[42];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((ushort*)operand)[20];
      result11 &= ((byte*)operand)[42];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((ushort*)target)[20] = result10;
      ((byte*)target)[42] = result11;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block43* @this, Block43* operand, Block43* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block43* @this, Block43* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block43* @this, Block43* operand, Block43* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ushort*)@this)[20];
      var result6 = ((byte*)@this)[42];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ushort*)operand)[20];
      result6 &= ((byte*)operand)[42];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ushort*)target)[20] = result5;
      ((byte*)target)[42] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block43* @this, Block43* operand, Block43* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((ushort*)@this)[20];
      var result11 = ((byte*)@this)[42];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((ushort*)operand)[20];
      result11 &= ((byte*)operand)[42];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((ushort*)target)[20] = result10;
      ((byte*)target)[42] = result11;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block43* @this, Block43* operand, Block43* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block43* @this, Block43* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block43* @this, Block43* operand, Block43* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ushort*)@this)[20];
      var result6 = ((byte*)@this)[42];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ushort*)operand)[20];
      result6 |= ((byte*)operand)[42];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ushort*)target)[20] = result5;
      ((byte*)target)[42] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block43* @this, Block43* operand, Block43* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((ushort*)@this)[20];
      var result11 = ((byte*)@this)[42];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((ushort*)operand)[20];
      result11 |= ((byte*)operand)[42];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((ushort*)target)[20] = result10;
      ((byte*)target)[42] = result11;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block43* @this, Block43* operand, Block43* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block43* @this, Block43* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block43* @this, Block43* operand, Block43* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ushort*)@this)[20];
      var result6 = ((byte*)@this)[42];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ushort*)operand)[20];
      result6 |= ((byte*)operand)[42];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ushort*)target)[20] = result5;
      ((byte*)target)[42] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block43* @this, Block43* operand, Block43* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((ushort*)@this)[20];
      var result11 = ((byte*)@this)[42];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((ushort*)operand)[20];
      result11 |= ((byte*)operand)[42];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((ushort*)target)[20] = result10;
      ((byte*)target)[42] = result11;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block43* @this, Block43* operand, Block43* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block43* @this, Block43* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block43* @this, Block43* operand, Block43* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ushort*)@this)[20];
      var result6 = ((byte*)@this)[42];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ushort*)operand)[20];
      result6 ^= ((byte*)operand)[42];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ushort*)target)[20] = result5;
      ((byte*)target)[42] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block43* @this, Block43* operand, Block43* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((ushort*)@this)[20];
      var result11 = ((byte*)@this)[42];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((ushort*)operand)[20];
      result11 ^= ((byte*)operand)[42];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((ushort*)target)[20] = result10;
      ((byte*)target)[42] = result11;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block43* @this, Block43* operand, Block43* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block43* @this, Block43* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block43* @this, Block43* operand, Block43* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ushort*)@this)[20];
      var result6 = ((byte*)@this)[42];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ushort*)operand)[20];
      result6 ^= ((byte*)operand)[42];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ushort*)target)[20] = result5;
      ((byte*)target)[42] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block43* @this, Block43* operand, Block43* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((ushort*)@this)[20];
      var result11 = ((byte*)@this)[42];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((ushort*)operand)[20];
      result11 ^= ((byte*)operand)[42];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((ushort*)target)[20] = result10;
      ((byte*)target)[42] = result11;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block43* @this, Block43* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block43* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block43* @this, Block43* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ushort*)@this)[20];
      var result6 = ((byte*)@this)[42];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ushort*)target)[20] = result5;
      ((byte*)target)[42] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block43* @this, Block43* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((ushort*)@this)[20];
      var result11 = ((byte*)@this)[42];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((ushort*)target)[20] = result10;
      ((byte*)target)[42] = result11;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 44)] 
  public struct Block44 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block44* @this, Block44* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block44* @this, Block44* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((uint*)@this)[10];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ulong*)other)[3];
      result4 ^= ((ulong*)other)[4];
      result5 ^= ((uint*)other)[10];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result0 |= result2;
      result0 |= result4;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block44* @this, Block44* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((uint*)other)[7];
      result8 ^= ((uint*)other)[8];
      result9 ^= ((uint*)other)[9];
      result10 ^= ((uint*)other)[10];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result8 |= result9;
      result0 |= result2;
      result4 |= result6;
      result8 |= result10;
      result0 |= result4;
      result0 |= result8;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block44* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block44* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((ulong*)@this)[3] = qword;
      ((ulong*)@this)[4] = qword;
      var dword = 0x01010101U * value;
      ((uint*)@this)[10] = dword;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block44* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((uint*)@this)[7] = dword;
      ((uint*)@this)[8] = dword;
      ((uint*)@this)[9] = dword;
      ((uint*)@this)[10] = dword;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block44* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block44* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ulong*)@this)[3] = 0;
      ((ulong*)@this)[4] = 0;
      ((uint*)@this)[10] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block44* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((uint*)@this)[7] = 0;
      ((uint*)@this)[8] = 0;
      ((uint*)@this)[9] = 0;
      ((uint*)@this)[10] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block44* @this, Block44* operand, Block44* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block44* @this, Block44* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block44* @this, Block44* operand, Block44* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((uint*)@this)[10];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((uint*)operand)[10];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((uint*)target)[10] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block44* @this, Block44* operand, Block44* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block44* @this, Block44* operand, Block44* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block44* @this, Block44* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block44* @this, Block44* operand, Block44* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((uint*)@this)[10];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((uint*)operand)[10];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((uint*)target)[10] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block44* @this, Block44* operand, Block44* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block44* @this, Block44* operand, Block44* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block44* @this, Block44* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block44* @this, Block44* operand, Block44* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((uint*)@this)[10];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((uint*)operand)[10];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((uint*)target)[10] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block44* @this, Block44* operand, Block44* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block44* @this, Block44* operand, Block44* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block44* @this, Block44* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block44* @this, Block44* operand, Block44* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((uint*)@this)[10];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((uint*)operand)[10];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((uint*)target)[10] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block44* @this, Block44* operand, Block44* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block44* @this, Block44* operand, Block44* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block44* @this, Block44* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block44* @this, Block44* operand, Block44* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((uint*)@this)[10];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((uint*)operand)[10];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((uint*)target)[10] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block44* @this, Block44* operand, Block44* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block44* @this, Block44* operand, Block44* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block44* @this, Block44* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block44* @this, Block44* operand, Block44* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((uint*)@this)[10];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((uint*)operand)[10];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((uint*)target)[10] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block44* @this, Block44* operand, Block44* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block44* @this, Block44* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block44* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block44* @this, Block44* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((uint*)@this)[10];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((uint*)target)[10] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block44* @this, Block44* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 45)] 
  public struct Block45 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block45* @this, Block45* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block45* @this, Block45* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((uint*)@this)[10];
      var result6 = ((byte*)@this)[44];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ulong*)other)[3];
      result4 ^= ((ulong*)other)[4];
      result5 ^= ((uint*)other)[10];
      result6 ^= ((byte*)other)[44];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block45* @this, Block45* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((byte*)@this)[44];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((uint*)other)[7];
      result8 ^= ((uint*)other)[8];
      result9 ^= ((uint*)other)[9];
      result10 ^= ((uint*)other)[10];
      result11 ^= ((byte*)other)[44];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result8 |= result9;
      result10 |= result11;
      result0 |= result2;
      result4 |= result6;
      result8 |= result10;
      result0 |= result4;
      result0 |= result8;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block45* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block45* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((ulong*)@this)[3] = qword;
      ((ulong*)@this)[4] = qword;
      var dword = 0x01010101U * value;
      ((uint*)@this)[10] = dword;
      ((byte*)@this)[44] = value;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block45* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((uint*)@this)[7] = dword;
      ((uint*)@this)[8] = dword;
      ((uint*)@this)[9] = dword;
      ((uint*)@this)[10] = dword;
      ((byte*)@this)[44] = value;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block45* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block45* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ulong*)@this)[3] = 0;
      ((ulong*)@this)[4] = 0;
      ((uint*)@this)[10] = 0;
      ((byte*)@this)[44] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block45* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((uint*)@this)[7] = 0;
      ((uint*)@this)[8] = 0;
      ((uint*)@this)[9] = 0;
      ((uint*)@this)[10] = 0;
      ((byte*)@this)[44] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block45* @this, Block45* operand, Block45* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block45* @this, Block45* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block45* @this, Block45* operand, Block45* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((uint*)@this)[10];
      var result6 = ((byte*)@this)[44];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((uint*)operand)[10];
      result6 &= ((byte*)operand)[44];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((uint*)target)[10] = result5;
      ((byte*)target)[44] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block45* @this, Block45* operand, Block45* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((byte*)@this)[44];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((byte*)operand)[44];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((byte*)target)[44] = result11;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block45* @this, Block45* operand, Block45* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block45* @this, Block45* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block45* @this, Block45* operand, Block45* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((uint*)@this)[10];
      var result6 = ((byte*)@this)[44];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((uint*)operand)[10];
      result6 &= ((byte*)operand)[44];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((uint*)target)[10] = result5;
      ((byte*)target)[44] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block45* @this, Block45* operand, Block45* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((byte*)@this)[44];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((byte*)operand)[44];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((byte*)target)[44] = result11;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block45* @this, Block45* operand, Block45* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block45* @this, Block45* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block45* @this, Block45* operand, Block45* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((uint*)@this)[10];
      var result6 = ((byte*)@this)[44];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((uint*)operand)[10];
      result6 |= ((byte*)operand)[44];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((uint*)target)[10] = result5;
      ((byte*)target)[44] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block45* @this, Block45* operand, Block45* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((byte*)@this)[44];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((byte*)operand)[44];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((byte*)target)[44] = result11;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block45* @this, Block45* operand, Block45* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block45* @this, Block45* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block45* @this, Block45* operand, Block45* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((uint*)@this)[10];
      var result6 = ((byte*)@this)[44];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((uint*)operand)[10];
      result6 |= ((byte*)operand)[44];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((uint*)target)[10] = result5;
      ((byte*)target)[44] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block45* @this, Block45* operand, Block45* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((byte*)@this)[44];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((byte*)operand)[44];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((byte*)target)[44] = result11;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block45* @this, Block45* operand, Block45* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block45* @this, Block45* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block45* @this, Block45* operand, Block45* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((uint*)@this)[10];
      var result6 = ((byte*)@this)[44];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((uint*)operand)[10];
      result6 ^= ((byte*)operand)[44];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((uint*)target)[10] = result5;
      ((byte*)target)[44] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block45* @this, Block45* operand, Block45* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((byte*)@this)[44];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((byte*)operand)[44];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((byte*)target)[44] = result11;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block45* @this, Block45* operand, Block45* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block45* @this, Block45* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block45* @this, Block45* operand, Block45* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((uint*)@this)[10];
      var result6 = ((byte*)@this)[44];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((uint*)operand)[10];
      result6 ^= ((byte*)operand)[44];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((uint*)target)[10] = result5;
      ((byte*)target)[44] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block45* @this, Block45* operand, Block45* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((byte*)@this)[44];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((byte*)operand)[44];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((byte*)target)[44] = result11;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block45* @this, Block45* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block45* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block45* @this, Block45* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((uint*)@this)[10];
      var result6 = ((byte*)@this)[44];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((uint*)target)[10] = result5;
      ((byte*)target)[44] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block45* @this, Block45* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((byte*)@this)[44];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((byte*)target)[44] = result11;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 46)] 
  public struct Block46 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block46* @this, Block46* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block46* @this, Block46* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((uint*)@this)[10];
      var result6 = ((ushort*)@this)[22];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ulong*)other)[3];
      result4 ^= ((ulong*)other)[4];
      result5 ^= ((uint*)other)[10];
      result6 ^= ((ushort*)other)[22];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block46* @this, Block46* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((ushort*)@this)[22];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((uint*)other)[7];
      result8 ^= ((uint*)other)[8];
      result9 ^= ((uint*)other)[9];
      result10 ^= ((uint*)other)[10];
      result11 ^= ((ushort*)other)[22];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result8 |= result9;
      result10 |= result11;
      result0 |= result2;
      result4 |= result6;
      result8 |= result10;
      result0 |= result4;
      result0 |= result8;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block46* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block46* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((ulong*)@this)[3] = qword;
      ((ulong*)@this)[4] = qword;
      var dword = 0x01010101U * value;
      ((uint*)@this)[10] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[22] = word;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block46* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((uint*)@this)[7] = dword;
      ((uint*)@this)[8] = dword;
      ((uint*)@this)[9] = dword;
      ((uint*)@this)[10] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[22] = word;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block46* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block46* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ulong*)@this)[3] = 0;
      ((ulong*)@this)[4] = 0;
      ((uint*)@this)[10] = 0;
      ((ushort*)@this)[22] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block46* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((uint*)@this)[7] = 0;
      ((uint*)@this)[8] = 0;
      ((uint*)@this)[9] = 0;
      ((uint*)@this)[10] = 0;
      ((ushort*)@this)[22] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block46* @this, Block46* operand, Block46* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block46* @this, Block46* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block46* @this, Block46* operand, Block46* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((uint*)@this)[10];
      var result6 = ((ushort*)@this)[22];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((uint*)operand)[10];
      result6 &= ((ushort*)operand)[22];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((uint*)target)[10] = result5;
      ((ushort*)target)[22] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block46* @this, Block46* operand, Block46* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((ushort*)@this)[22];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((ushort*)operand)[22];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((ushort*)target)[22] = result11;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block46* @this, Block46* operand, Block46* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block46* @this, Block46* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block46* @this, Block46* operand, Block46* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((uint*)@this)[10];
      var result6 = ((ushort*)@this)[22];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((uint*)operand)[10];
      result6 &= ((ushort*)operand)[22];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((uint*)target)[10] = result5;
      ((ushort*)target)[22] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block46* @this, Block46* operand, Block46* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((ushort*)@this)[22];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((ushort*)operand)[22];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((ushort*)target)[22] = result11;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block46* @this, Block46* operand, Block46* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block46* @this, Block46* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block46* @this, Block46* operand, Block46* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((uint*)@this)[10];
      var result6 = ((ushort*)@this)[22];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((uint*)operand)[10];
      result6 |= ((ushort*)operand)[22];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((uint*)target)[10] = result5;
      ((ushort*)target)[22] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block46* @this, Block46* operand, Block46* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((ushort*)@this)[22];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((ushort*)operand)[22];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((ushort*)target)[22] = result11;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block46* @this, Block46* operand, Block46* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block46* @this, Block46* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block46* @this, Block46* operand, Block46* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((uint*)@this)[10];
      var result6 = ((ushort*)@this)[22];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((uint*)operand)[10];
      result6 |= ((ushort*)operand)[22];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((uint*)target)[10] = result5;
      ((ushort*)target)[22] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block46* @this, Block46* operand, Block46* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((ushort*)@this)[22];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((ushort*)operand)[22];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((ushort*)target)[22] = result11;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block46* @this, Block46* operand, Block46* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block46* @this, Block46* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block46* @this, Block46* operand, Block46* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((uint*)@this)[10];
      var result6 = ((ushort*)@this)[22];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((uint*)operand)[10];
      result6 ^= ((ushort*)operand)[22];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((uint*)target)[10] = result5;
      ((ushort*)target)[22] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block46* @this, Block46* operand, Block46* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((ushort*)@this)[22];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((ushort*)operand)[22];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((ushort*)target)[22] = result11;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block46* @this, Block46* operand, Block46* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block46* @this, Block46* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block46* @this, Block46* operand, Block46* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((uint*)@this)[10];
      var result6 = ((ushort*)@this)[22];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((uint*)operand)[10];
      result6 ^= ((ushort*)operand)[22];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((uint*)target)[10] = result5;
      ((ushort*)target)[22] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block46* @this, Block46* operand, Block46* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((ushort*)@this)[22];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((ushort*)operand)[22];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((ushort*)target)[22] = result11;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block46* @this, Block46* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block46* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block46* @this, Block46* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((uint*)@this)[10];
      var result6 = ((ushort*)@this)[22];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((uint*)target)[10] = result5;
      ((ushort*)target)[22] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block46* @this, Block46* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((ushort*)@this)[22];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((ushort*)target)[22] = result11;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 47)] 
  public struct Block47 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block47* @this, Block47* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block47* @this, Block47* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((uint*)@this)[10];
      var result6 = ((ushort*)@this)[22];
      var result7 = ((byte*)@this)[46];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ulong*)other)[3];
      result4 ^= ((ulong*)other)[4];
      result5 ^= ((uint*)other)[10];
      result6 ^= ((ushort*)other)[22];
      result7 ^= ((byte*)other)[46];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block47* @this, Block47* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((ushort*)@this)[22];
      var result12 = ((byte*)@this)[46];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((uint*)other)[7];
      result8 ^= ((uint*)other)[8];
      result9 ^= ((uint*)other)[9];
      result10 ^= ((uint*)other)[10];
      result11 ^= ((ushort*)other)[22];
      result12 ^= ((byte*)other)[46];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result8 |= result9;
      result10 |= result11;
      result0 |= result2;
      result4 |= result6;
      result8 |= result10;
      result0 |= result4;
      result8 |= result12;
      result0 |= result8;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block47* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block47* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((ulong*)@this)[3] = qword;
      ((ulong*)@this)[4] = qword;
      var dword = 0x01010101U * value;
      ((uint*)@this)[10] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[22] = word;
      ((byte*)@this)[46] = value;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block47* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((uint*)@this)[7] = dword;
      ((uint*)@this)[8] = dword;
      ((uint*)@this)[9] = dword;
      ((uint*)@this)[10] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[22] = word;
      ((byte*)@this)[46] = value;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block47* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block47* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ulong*)@this)[3] = 0;
      ((ulong*)@this)[4] = 0;
      ((uint*)@this)[10] = 0;
      ((ushort*)@this)[22] = 0;
      ((byte*)@this)[46] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block47* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((uint*)@this)[7] = 0;
      ((uint*)@this)[8] = 0;
      ((uint*)@this)[9] = 0;
      ((uint*)@this)[10] = 0;
      ((ushort*)@this)[22] = 0;
      ((byte*)@this)[46] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block47* @this, Block47* operand, Block47* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block47* @this, Block47* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block47* @this, Block47* operand, Block47* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((uint*)@this)[10];
      var result6 = ((ushort*)@this)[22];
      var result7 = ((byte*)@this)[46];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((uint*)operand)[10];
      result6 &= ((ushort*)operand)[22];
      result7 &= ((byte*)operand)[46];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((uint*)target)[10] = result5;
      ((ushort*)target)[22] = result6;
      ((byte*)target)[46] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block47* @this, Block47* operand, Block47* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((ushort*)@this)[22];
      var result12 = ((byte*)@this)[46];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((ushort*)operand)[22];
      result12 &= ((byte*)operand)[46];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((ushort*)target)[22] = result11;
      ((byte*)target)[46] = result12;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block47* @this, Block47* operand, Block47* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block47* @this, Block47* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block47* @this, Block47* operand, Block47* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((uint*)@this)[10];
      var result6 = ((ushort*)@this)[22];
      var result7 = ((byte*)@this)[46];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((uint*)operand)[10];
      result6 &= ((ushort*)operand)[22];
      result7 &= ((byte*)operand)[46];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((uint*)target)[10] = result5;
      ((ushort*)target)[22] = result6;
      ((byte*)target)[46] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block47* @this, Block47* operand, Block47* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((ushort*)@this)[22];
      var result12 = ((byte*)@this)[46];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((ushort*)operand)[22];
      result12 &= ((byte*)operand)[46];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((ushort*)target)[22] = result11;
      ((byte*)target)[46] = result12;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block47* @this, Block47* operand, Block47* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block47* @this, Block47* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block47* @this, Block47* operand, Block47* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((uint*)@this)[10];
      var result6 = ((ushort*)@this)[22];
      var result7 = ((byte*)@this)[46];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((uint*)operand)[10];
      result6 |= ((ushort*)operand)[22];
      result7 |= ((byte*)operand)[46];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((uint*)target)[10] = result5;
      ((ushort*)target)[22] = result6;
      ((byte*)target)[46] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block47* @this, Block47* operand, Block47* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((ushort*)@this)[22];
      var result12 = ((byte*)@this)[46];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((ushort*)operand)[22];
      result12 |= ((byte*)operand)[46];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((ushort*)target)[22] = result11;
      ((byte*)target)[46] = result12;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block47* @this, Block47* operand, Block47* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block47* @this, Block47* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block47* @this, Block47* operand, Block47* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((uint*)@this)[10];
      var result6 = ((ushort*)@this)[22];
      var result7 = ((byte*)@this)[46];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((uint*)operand)[10];
      result6 |= ((ushort*)operand)[22];
      result7 |= ((byte*)operand)[46];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((uint*)target)[10] = result5;
      ((ushort*)target)[22] = result6;
      ((byte*)target)[46] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block47* @this, Block47* operand, Block47* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((ushort*)@this)[22];
      var result12 = ((byte*)@this)[46];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((ushort*)operand)[22];
      result12 |= ((byte*)operand)[46];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((ushort*)target)[22] = result11;
      ((byte*)target)[46] = result12;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block47* @this, Block47* operand, Block47* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block47* @this, Block47* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block47* @this, Block47* operand, Block47* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((uint*)@this)[10];
      var result6 = ((ushort*)@this)[22];
      var result7 = ((byte*)@this)[46];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((uint*)operand)[10];
      result6 ^= ((ushort*)operand)[22];
      result7 ^= ((byte*)operand)[46];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((uint*)target)[10] = result5;
      ((ushort*)target)[22] = result6;
      ((byte*)target)[46] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block47* @this, Block47* operand, Block47* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((ushort*)@this)[22];
      var result12 = ((byte*)@this)[46];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((ushort*)operand)[22];
      result12 ^= ((byte*)operand)[46];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((ushort*)target)[22] = result11;
      ((byte*)target)[46] = result12;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block47* @this, Block47* operand, Block47* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block47* @this, Block47* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block47* @this, Block47* operand, Block47* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((uint*)@this)[10];
      var result6 = ((ushort*)@this)[22];
      var result7 = ((byte*)@this)[46];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((uint*)operand)[10];
      result6 ^= ((ushort*)operand)[22];
      result7 ^= ((byte*)operand)[46];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((uint*)target)[10] = result5;
      ((ushort*)target)[22] = result6;
      ((byte*)target)[46] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block47* @this, Block47* operand, Block47* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((ushort*)@this)[22];
      var result12 = ((byte*)@this)[46];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((ushort*)operand)[22];
      result12 ^= ((byte*)operand)[46];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((ushort*)target)[22] = result11;
      ((byte*)target)[46] = result12;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block47* @this, Block47* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block47* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block47* @this, Block47* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((uint*)@this)[10];
      var result6 = ((ushort*)@this)[22];
      var result7 = ((byte*)@this)[46];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((uint*)target)[10] = result5;
      ((ushort*)target)[22] = result6;
      ((byte*)target)[46] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block47* @this, Block47* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((ushort*)@this)[22];
      var result12 = ((byte*)@this)[46];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((ushort*)target)[22] = result11;
      ((byte*)target)[46] = result12;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 48)] 
  public struct Block48 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block48* @this, Block48* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block48* @this, Block48* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ulong*)other)[3];
      result4 ^= ((ulong*)other)[4];
      result5 ^= ((ulong*)other)[5];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result0 |= result2;
      result0 |= result4;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block48* @this, Block48* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((uint*)other)[7];
      result8 ^= ((uint*)other)[8];
      result9 ^= ((uint*)other)[9];
      result10 ^= ((uint*)other)[10];
      result11 ^= ((uint*)other)[11];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result8 |= result9;
      result10 |= result11;
      result0 |= result2;
      result4 |= result6;
      result8 |= result10;
      result0 |= result4;
      result0 |= result8;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block48* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block48* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((ulong*)@this)[3] = qword;
      ((ulong*)@this)[4] = qword;
      ((ulong*)@this)[5] = qword;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block48* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((uint*)@this)[7] = dword;
      ((uint*)@this)[8] = dword;
      ((uint*)@this)[9] = dword;
      ((uint*)@this)[10] = dword;
      ((uint*)@this)[11] = dword;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block48* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block48* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ulong*)@this)[3] = 0;
      ((ulong*)@this)[4] = 0;
      ((ulong*)@this)[5] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block48* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((uint*)@this)[7] = 0;
      ((uint*)@this)[8] = 0;
      ((uint*)@this)[9] = 0;
      ((uint*)@this)[10] = 0;
      ((uint*)@this)[11] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block48* @this, Block48* operand, Block48* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block48* @this, Block48* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block48* @this, Block48* operand, Block48* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block48* @this, Block48* operand, Block48* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block48* @this, Block48* operand, Block48* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block48* @this, Block48* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block48* @this, Block48* operand, Block48* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block48* @this, Block48* operand, Block48* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block48* @this, Block48* operand, Block48* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block48* @this, Block48* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block48* @this, Block48* operand, Block48* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block48* @this, Block48* operand, Block48* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block48* @this, Block48* operand, Block48* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block48* @this, Block48* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block48* @this, Block48* operand, Block48* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block48* @this, Block48* operand, Block48* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block48* @this, Block48* operand, Block48* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block48* @this, Block48* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block48* @this, Block48* operand, Block48* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block48* @this, Block48* operand, Block48* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block48* @this, Block48* operand, Block48* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block48* @this, Block48* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block48* @this, Block48* operand, Block48* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block48* @this, Block48* operand, Block48* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block48* @this, Block48* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block48* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block48* @this, Block48* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block48* @this, Block48* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 49)] 
  public struct Block49 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block49* @this, Block49* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block49* @this, Block49* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((byte*)@this)[48];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ulong*)other)[3];
      result4 ^= ((ulong*)other)[4];
      result5 ^= ((ulong*)other)[5];
      result6 ^= ((byte*)other)[48];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block49* @this, Block49* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((byte*)@this)[48];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((uint*)other)[7];
      result8 ^= ((uint*)other)[8];
      result9 ^= ((uint*)other)[9];
      result10 ^= ((uint*)other)[10];
      result11 ^= ((uint*)other)[11];
      result12 ^= ((byte*)other)[48];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result8 |= result9;
      result10 |= result11;
      result0 |= result2;
      result4 |= result6;
      result8 |= result10;
      result0 |= result4;
      result8 |= result12;
      result0 |= result8;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block49* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block49* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((ulong*)@this)[3] = qword;
      ((ulong*)@this)[4] = qword;
      ((ulong*)@this)[5] = qword;
      ((byte*)@this)[48] = value;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block49* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((uint*)@this)[7] = dword;
      ((uint*)@this)[8] = dword;
      ((uint*)@this)[9] = dword;
      ((uint*)@this)[10] = dword;
      ((uint*)@this)[11] = dword;
      ((byte*)@this)[48] = value;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block49* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block49* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ulong*)@this)[3] = 0;
      ((ulong*)@this)[4] = 0;
      ((ulong*)@this)[5] = 0;
      ((byte*)@this)[48] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block49* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((uint*)@this)[7] = 0;
      ((uint*)@this)[8] = 0;
      ((uint*)@this)[9] = 0;
      ((uint*)@this)[10] = 0;
      ((uint*)@this)[11] = 0;
      ((byte*)@this)[48] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block49* @this, Block49* operand, Block49* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block49* @this, Block49* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block49* @this, Block49* operand, Block49* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((byte*)@this)[48];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      result6 &= ((byte*)operand)[48];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((byte*)target)[48] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block49* @this, Block49* operand, Block49* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((byte*)@this)[48];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      result12 &= ((byte*)operand)[48];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((byte*)target)[48] = result12;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block49* @this, Block49* operand, Block49* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block49* @this, Block49* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block49* @this, Block49* operand, Block49* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((byte*)@this)[48];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      result6 &= ((byte*)operand)[48];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((byte*)target)[48] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block49* @this, Block49* operand, Block49* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((byte*)@this)[48];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      result12 &= ((byte*)operand)[48];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((byte*)target)[48] = result12;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block49* @this, Block49* operand, Block49* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block49* @this, Block49* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block49* @this, Block49* operand, Block49* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((byte*)@this)[48];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      result6 |= ((byte*)operand)[48];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((byte*)target)[48] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block49* @this, Block49* operand, Block49* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((byte*)@this)[48];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      result12 |= ((byte*)operand)[48];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((byte*)target)[48] = result12;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block49* @this, Block49* operand, Block49* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block49* @this, Block49* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block49* @this, Block49* operand, Block49* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((byte*)@this)[48];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      result6 |= ((byte*)operand)[48];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((byte*)target)[48] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block49* @this, Block49* operand, Block49* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((byte*)@this)[48];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      result12 |= ((byte*)operand)[48];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((byte*)target)[48] = result12;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block49* @this, Block49* operand, Block49* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block49* @this, Block49* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block49* @this, Block49* operand, Block49* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((byte*)@this)[48];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      result6 ^= ((byte*)operand)[48];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((byte*)target)[48] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block49* @this, Block49* operand, Block49* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((byte*)@this)[48];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      result12 ^= ((byte*)operand)[48];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((byte*)target)[48] = result12;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block49* @this, Block49* operand, Block49* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block49* @this, Block49* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block49* @this, Block49* operand, Block49* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((byte*)@this)[48];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      result6 ^= ((byte*)operand)[48];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((byte*)target)[48] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block49* @this, Block49* operand, Block49* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((byte*)@this)[48];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      result12 ^= ((byte*)operand)[48];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((byte*)target)[48] = result12;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block49* @this, Block49* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block49* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block49* @this, Block49* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((byte*)@this)[48];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((byte*)target)[48] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block49* @this, Block49* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((byte*)@this)[48];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((byte*)target)[48] = result12;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 50)] 
  public struct Block50 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block50* @this, Block50* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block50* @this, Block50* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ushort*)@this)[24];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ulong*)other)[3];
      result4 ^= ((ulong*)other)[4];
      result5 ^= ((ulong*)other)[5];
      result6 ^= ((ushort*)other)[24];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block50* @this, Block50* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((ushort*)@this)[24];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((uint*)other)[7];
      result8 ^= ((uint*)other)[8];
      result9 ^= ((uint*)other)[9];
      result10 ^= ((uint*)other)[10];
      result11 ^= ((uint*)other)[11];
      result12 ^= ((ushort*)other)[24];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result8 |= result9;
      result10 |= result11;
      result0 |= result2;
      result4 |= result6;
      result8 |= result10;
      result0 |= result4;
      result8 |= result12;
      result0 |= result8;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block50* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block50* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((ulong*)@this)[3] = qword;
      ((ulong*)@this)[4] = qword;
      ((ulong*)@this)[5] = qword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[24] = word;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block50* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((uint*)@this)[7] = dword;
      ((uint*)@this)[8] = dword;
      ((uint*)@this)[9] = dword;
      ((uint*)@this)[10] = dword;
      ((uint*)@this)[11] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[24] = word;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block50* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block50* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ulong*)@this)[3] = 0;
      ((ulong*)@this)[4] = 0;
      ((ulong*)@this)[5] = 0;
      ((ushort*)@this)[24] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block50* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((uint*)@this)[7] = 0;
      ((uint*)@this)[8] = 0;
      ((uint*)@this)[9] = 0;
      ((uint*)@this)[10] = 0;
      ((uint*)@this)[11] = 0;
      ((ushort*)@this)[24] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block50* @this, Block50* operand, Block50* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block50* @this, Block50* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block50* @this, Block50* operand, Block50* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ushort*)@this)[24];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      result6 &= ((ushort*)operand)[24];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ushort*)target)[24] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block50* @this, Block50* operand, Block50* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((ushort*)@this)[24];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      result12 &= ((ushort*)operand)[24];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((ushort*)target)[24] = result12;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block50* @this, Block50* operand, Block50* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block50* @this, Block50* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block50* @this, Block50* operand, Block50* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ushort*)@this)[24];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      result6 &= ((ushort*)operand)[24];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ushort*)target)[24] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block50* @this, Block50* operand, Block50* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((ushort*)@this)[24];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      result12 &= ((ushort*)operand)[24];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((ushort*)target)[24] = result12;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block50* @this, Block50* operand, Block50* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block50* @this, Block50* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block50* @this, Block50* operand, Block50* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ushort*)@this)[24];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      result6 |= ((ushort*)operand)[24];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ushort*)target)[24] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block50* @this, Block50* operand, Block50* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((ushort*)@this)[24];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      result12 |= ((ushort*)operand)[24];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((ushort*)target)[24] = result12;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block50* @this, Block50* operand, Block50* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block50* @this, Block50* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block50* @this, Block50* operand, Block50* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ushort*)@this)[24];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      result6 |= ((ushort*)operand)[24];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ushort*)target)[24] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block50* @this, Block50* operand, Block50* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((ushort*)@this)[24];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      result12 |= ((ushort*)operand)[24];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((ushort*)target)[24] = result12;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block50* @this, Block50* operand, Block50* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block50* @this, Block50* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block50* @this, Block50* operand, Block50* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ushort*)@this)[24];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      result6 ^= ((ushort*)operand)[24];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ushort*)target)[24] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block50* @this, Block50* operand, Block50* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((ushort*)@this)[24];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      result12 ^= ((ushort*)operand)[24];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((ushort*)target)[24] = result12;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block50* @this, Block50* operand, Block50* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block50* @this, Block50* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block50* @this, Block50* operand, Block50* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ushort*)@this)[24];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      result6 ^= ((ushort*)operand)[24];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ushort*)target)[24] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block50* @this, Block50* operand, Block50* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((ushort*)@this)[24];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      result12 ^= ((ushort*)operand)[24];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((ushort*)target)[24] = result12;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block50* @this, Block50* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block50* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block50* @this, Block50* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ushort*)@this)[24];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ushort*)target)[24] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block50* @this, Block50* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((ushort*)@this)[24];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((ushort*)target)[24] = result12;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 51)] 
  public struct Block51 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block51* @this, Block51* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block51* @this, Block51* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ushort*)@this)[24];
      var result7 = ((byte*)@this)[50];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ulong*)other)[3];
      result4 ^= ((ulong*)other)[4];
      result5 ^= ((ulong*)other)[5];
      result6 ^= ((ushort*)other)[24];
      result7 ^= ((byte*)other)[50];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block51* @this, Block51* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((ushort*)@this)[24];
      var result13 = ((byte*)@this)[50];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((uint*)other)[7];
      result8 ^= ((uint*)other)[8];
      result9 ^= ((uint*)other)[9];
      result10 ^= ((uint*)other)[10];
      result11 ^= ((uint*)other)[11];
      result12 ^= ((ushort*)other)[24];
      result13 ^= ((byte*)other)[50];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result8 |= result9;
      result10 |= result11;
      result12 |= result13;
      result0 |= result2;
      result4 |= result6;
      result8 |= result10;
      result0 |= result4;
      result8 |= result12;
      result0 |= result8;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block51* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block51* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((ulong*)@this)[3] = qword;
      ((ulong*)@this)[4] = qword;
      ((ulong*)@this)[5] = qword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[24] = word;
      ((byte*)@this)[50] = value;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block51* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((uint*)@this)[7] = dword;
      ((uint*)@this)[8] = dword;
      ((uint*)@this)[9] = dword;
      ((uint*)@this)[10] = dword;
      ((uint*)@this)[11] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[24] = word;
      ((byte*)@this)[50] = value;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block51* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block51* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ulong*)@this)[3] = 0;
      ((ulong*)@this)[4] = 0;
      ((ulong*)@this)[5] = 0;
      ((ushort*)@this)[24] = 0;
      ((byte*)@this)[50] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block51* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((uint*)@this)[7] = 0;
      ((uint*)@this)[8] = 0;
      ((uint*)@this)[9] = 0;
      ((uint*)@this)[10] = 0;
      ((uint*)@this)[11] = 0;
      ((ushort*)@this)[24] = 0;
      ((byte*)@this)[50] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block51* @this, Block51* operand, Block51* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block51* @this, Block51* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block51* @this, Block51* operand, Block51* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ushort*)@this)[24];
      var result7 = ((byte*)@this)[50];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      result6 &= ((ushort*)operand)[24];
      result7 &= ((byte*)operand)[50];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ushort*)target)[24] = result6;
      ((byte*)target)[50] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block51* @this, Block51* operand, Block51* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((ushort*)@this)[24];
      var result13 = ((byte*)@this)[50];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      result12 &= ((ushort*)operand)[24];
      result13 &= ((byte*)operand)[50];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((ushort*)target)[24] = result12;
      ((byte*)target)[50] = result13;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block51* @this, Block51* operand, Block51* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block51* @this, Block51* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block51* @this, Block51* operand, Block51* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ushort*)@this)[24];
      var result7 = ((byte*)@this)[50];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      result6 &= ((ushort*)operand)[24];
      result7 &= ((byte*)operand)[50];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ushort*)target)[24] = result6;
      ((byte*)target)[50] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block51* @this, Block51* operand, Block51* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((ushort*)@this)[24];
      var result13 = ((byte*)@this)[50];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      result12 &= ((ushort*)operand)[24];
      result13 &= ((byte*)operand)[50];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((ushort*)target)[24] = result12;
      ((byte*)target)[50] = result13;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block51* @this, Block51* operand, Block51* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block51* @this, Block51* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block51* @this, Block51* operand, Block51* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ushort*)@this)[24];
      var result7 = ((byte*)@this)[50];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      result6 |= ((ushort*)operand)[24];
      result7 |= ((byte*)operand)[50];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ushort*)target)[24] = result6;
      ((byte*)target)[50] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block51* @this, Block51* operand, Block51* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((ushort*)@this)[24];
      var result13 = ((byte*)@this)[50];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      result12 |= ((ushort*)operand)[24];
      result13 |= ((byte*)operand)[50];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((ushort*)target)[24] = result12;
      ((byte*)target)[50] = result13;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block51* @this, Block51* operand, Block51* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block51* @this, Block51* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block51* @this, Block51* operand, Block51* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ushort*)@this)[24];
      var result7 = ((byte*)@this)[50];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      result6 |= ((ushort*)operand)[24];
      result7 |= ((byte*)operand)[50];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ushort*)target)[24] = result6;
      ((byte*)target)[50] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block51* @this, Block51* operand, Block51* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((ushort*)@this)[24];
      var result13 = ((byte*)@this)[50];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      result12 |= ((ushort*)operand)[24];
      result13 |= ((byte*)operand)[50];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((ushort*)target)[24] = result12;
      ((byte*)target)[50] = result13;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block51* @this, Block51* operand, Block51* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block51* @this, Block51* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block51* @this, Block51* operand, Block51* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ushort*)@this)[24];
      var result7 = ((byte*)@this)[50];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      result6 ^= ((ushort*)operand)[24];
      result7 ^= ((byte*)operand)[50];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ushort*)target)[24] = result6;
      ((byte*)target)[50] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block51* @this, Block51* operand, Block51* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((ushort*)@this)[24];
      var result13 = ((byte*)@this)[50];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      result12 ^= ((ushort*)operand)[24];
      result13 ^= ((byte*)operand)[50];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((ushort*)target)[24] = result12;
      ((byte*)target)[50] = result13;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block51* @this, Block51* operand, Block51* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block51* @this, Block51* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block51* @this, Block51* operand, Block51* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ushort*)@this)[24];
      var result7 = ((byte*)@this)[50];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      result6 ^= ((ushort*)operand)[24];
      result7 ^= ((byte*)operand)[50];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ushort*)target)[24] = result6;
      ((byte*)target)[50] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block51* @this, Block51* operand, Block51* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((ushort*)@this)[24];
      var result13 = ((byte*)@this)[50];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      result12 ^= ((ushort*)operand)[24];
      result13 ^= ((byte*)operand)[50];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((ushort*)target)[24] = result12;
      ((byte*)target)[50] = result13;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block51* @this, Block51* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block51* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block51* @this, Block51* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ushort*)@this)[24];
      var result7 = ((byte*)@this)[50];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ushort*)target)[24] = result6;
      ((byte*)target)[50] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block51* @this, Block51* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((ushort*)@this)[24];
      var result13 = ((byte*)@this)[50];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((ushort*)target)[24] = result12;
      ((byte*)target)[50] = result13;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 52)] 
  public struct Block52 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block52* @this, Block52* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block52* @this, Block52* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((uint*)@this)[12];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ulong*)other)[3];
      result4 ^= ((ulong*)other)[4];
      result5 ^= ((ulong*)other)[5];
      result6 ^= ((uint*)other)[12];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block52* @this, Block52* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((uint*)other)[7];
      result8 ^= ((uint*)other)[8];
      result9 ^= ((uint*)other)[9];
      result10 ^= ((uint*)other)[10];
      result11 ^= ((uint*)other)[11];
      result12 ^= ((uint*)other)[12];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result8 |= result9;
      result10 |= result11;
      result0 |= result2;
      result4 |= result6;
      result8 |= result10;
      result0 |= result4;
      result8 |= result12;
      result0 |= result8;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block52* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block52* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((ulong*)@this)[3] = qword;
      ((ulong*)@this)[4] = qword;
      ((ulong*)@this)[5] = qword;
      var dword = 0x01010101U * value;
      ((uint*)@this)[12] = dword;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block52* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((uint*)@this)[7] = dword;
      ((uint*)@this)[8] = dword;
      ((uint*)@this)[9] = dword;
      ((uint*)@this)[10] = dword;
      ((uint*)@this)[11] = dword;
      ((uint*)@this)[12] = dword;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block52* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block52* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ulong*)@this)[3] = 0;
      ((ulong*)@this)[4] = 0;
      ((ulong*)@this)[5] = 0;
      ((uint*)@this)[12] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block52* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((uint*)@this)[7] = 0;
      ((uint*)@this)[8] = 0;
      ((uint*)@this)[9] = 0;
      ((uint*)@this)[10] = 0;
      ((uint*)@this)[11] = 0;
      ((uint*)@this)[12] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block52* @this, Block52* operand, Block52* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block52* @this, Block52* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block52* @this, Block52* operand, Block52* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((uint*)@this)[12];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      result6 &= ((uint*)operand)[12];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((uint*)target)[12] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block52* @this, Block52* operand, Block52* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      result12 &= ((uint*)operand)[12];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block52* @this, Block52* operand, Block52* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block52* @this, Block52* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block52* @this, Block52* operand, Block52* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((uint*)@this)[12];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      result6 &= ((uint*)operand)[12];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((uint*)target)[12] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block52* @this, Block52* operand, Block52* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      result12 &= ((uint*)operand)[12];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block52* @this, Block52* operand, Block52* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block52* @this, Block52* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block52* @this, Block52* operand, Block52* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((uint*)@this)[12];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      result6 |= ((uint*)operand)[12];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((uint*)target)[12] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block52* @this, Block52* operand, Block52* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      result12 |= ((uint*)operand)[12];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block52* @this, Block52* operand, Block52* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block52* @this, Block52* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block52* @this, Block52* operand, Block52* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((uint*)@this)[12];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      result6 |= ((uint*)operand)[12];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((uint*)target)[12] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block52* @this, Block52* operand, Block52* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      result12 |= ((uint*)operand)[12];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block52* @this, Block52* operand, Block52* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block52* @this, Block52* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block52* @this, Block52* operand, Block52* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((uint*)@this)[12];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      result6 ^= ((uint*)operand)[12];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((uint*)target)[12] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block52* @this, Block52* operand, Block52* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      result12 ^= ((uint*)operand)[12];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block52* @this, Block52* operand, Block52* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block52* @this, Block52* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block52* @this, Block52* operand, Block52* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((uint*)@this)[12];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      result6 ^= ((uint*)operand)[12];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((uint*)target)[12] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block52* @this, Block52* operand, Block52* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      result12 ^= ((uint*)operand)[12];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block52* @this, Block52* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block52* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block52* @this, Block52* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((uint*)@this)[12];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((uint*)target)[12] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block52* @this, Block52* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 53)] 
  public struct Block53 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block53* @this, Block53* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block53* @this, Block53* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((uint*)@this)[12];
      var result7 = ((byte*)@this)[52];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ulong*)other)[3];
      result4 ^= ((ulong*)other)[4];
      result5 ^= ((ulong*)other)[5];
      result6 ^= ((uint*)other)[12];
      result7 ^= ((byte*)other)[52];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block53* @this, Block53* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((byte*)@this)[52];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((uint*)other)[7];
      result8 ^= ((uint*)other)[8];
      result9 ^= ((uint*)other)[9];
      result10 ^= ((uint*)other)[10];
      result11 ^= ((uint*)other)[11];
      result12 ^= ((uint*)other)[12];
      result13 ^= ((byte*)other)[52];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result8 |= result9;
      result10 |= result11;
      result12 |= result13;
      result0 |= result2;
      result4 |= result6;
      result8 |= result10;
      result0 |= result4;
      result8 |= result12;
      result0 |= result8;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block53* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block53* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((ulong*)@this)[3] = qword;
      ((ulong*)@this)[4] = qword;
      ((ulong*)@this)[5] = qword;
      var dword = 0x01010101U * value;
      ((uint*)@this)[12] = dword;
      ((byte*)@this)[52] = value;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block53* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((uint*)@this)[7] = dword;
      ((uint*)@this)[8] = dword;
      ((uint*)@this)[9] = dword;
      ((uint*)@this)[10] = dword;
      ((uint*)@this)[11] = dword;
      ((uint*)@this)[12] = dword;
      ((byte*)@this)[52] = value;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block53* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block53* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ulong*)@this)[3] = 0;
      ((ulong*)@this)[4] = 0;
      ((ulong*)@this)[5] = 0;
      ((uint*)@this)[12] = 0;
      ((byte*)@this)[52] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block53* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((uint*)@this)[7] = 0;
      ((uint*)@this)[8] = 0;
      ((uint*)@this)[9] = 0;
      ((uint*)@this)[10] = 0;
      ((uint*)@this)[11] = 0;
      ((uint*)@this)[12] = 0;
      ((byte*)@this)[52] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block53* @this, Block53* operand, Block53* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block53* @this, Block53* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block53* @this, Block53* operand, Block53* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((uint*)@this)[12];
      var result7 = ((byte*)@this)[52];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      result6 &= ((uint*)operand)[12];
      result7 &= ((byte*)operand)[52];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((uint*)target)[12] = result6;
      ((byte*)target)[52] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block53* @this, Block53* operand, Block53* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((byte*)@this)[52];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      result12 &= ((uint*)operand)[12];
      result13 &= ((byte*)operand)[52];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((byte*)target)[52] = result13;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block53* @this, Block53* operand, Block53* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block53* @this, Block53* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block53* @this, Block53* operand, Block53* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((uint*)@this)[12];
      var result7 = ((byte*)@this)[52];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      result6 &= ((uint*)operand)[12];
      result7 &= ((byte*)operand)[52];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((uint*)target)[12] = result6;
      ((byte*)target)[52] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block53* @this, Block53* operand, Block53* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((byte*)@this)[52];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      result12 &= ((uint*)operand)[12];
      result13 &= ((byte*)operand)[52];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((byte*)target)[52] = result13;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block53* @this, Block53* operand, Block53* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block53* @this, Block53* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block53* @this, Block53* operand, Block53* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((uint*)@this)[12];
      var result7 = ((byte*)@this)[52];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      result6 |= ((uint*)operand)[12];
      result7 |= ((byte*)operand)[52];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((uint*)target)[12] = result6;
      ((byte*)target)[52] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block53* @this, Block53* operand, Block53* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((byte*)@this)[52];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      result12 |= ((uint*)operand)[12];
      result13 |= ((byte*)operand)[52];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((byte*)target)[52] = result13;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block53* @this, Block53* operand, Block53* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block53* @this, Block53* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block53* @this, Block53* operand, Block53* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((uint*)@this)[12];
      var result7 = ((byte*)@this)[52];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      result6 |= ((uint*)operand)[12];
      result7 |= ((byte*)operand)[52];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((uint*)target)[12] = result6;
      ((byte*)target)[52] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block53* @this, Block53* operand, Block53* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((byte*)@this)[52];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      result12 |= ((uint*)operand)[12];
      result13 |= ((byte*)operand)[52];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((byte*)target)[52] = result13;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block53* @this, Block53* operand, Block53* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block53* @this, Block53* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block53* @this, Block53* operand, Block53* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((uint*)@this)[12];
      var result7 = ((byte*)@this)[52];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      result6 ^= ((uint*)operand)[12];
      result7 ^= ((byte*)operand)[52];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((uint*)target)[12] = result6;
      ((byte*)target)[52] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block53* @this, Block53* operand, Block53* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((byte*)@this)[52];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      result12 ^= ((uint*)operand)[12];
      result13 ^= ((byte*)operand)[52];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((byte*)target)[52] = result13;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block53* @this, Block53* operand, Block53* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block53* @this, Block53* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block53* @this, Block53* operand, Block53* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((uint*)@this)[12];
      var result7 = ((byte*)@this)[52];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      result6 ^= ((uint*)operand)[12];
      result7 ^= ((byte*)operand)[52];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((uint*)target)[12] = result6;
      ((byte*)target)[52] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block53* @this, Block53* operand, Block53* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((byte*)@this)[52];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      result12 ^= ((uint*)operand)[12];
      result13 ^= ((byte*)operand)[52];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((byte*)target)[52] = result13;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block53* @this, Block53* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block53* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block53* @this, Block53* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((uint*)@this)[12];
      var result7 = ((byte*)@this)[52];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((uint*)target)[12] = result6;
      ((byte*)target)[52] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block53* @this, Block53* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((byte*)@this)[52];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((byte*)target)[52] = result13;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 54)] 
  public struct Block54 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block54* @this, Block54* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block54* @this, Block54* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((uint*)@this)[12];
      var result7 = ((ushort*)@this)[26];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ulong*)other)[3];
      result4 ^= ((ulong*)other)[4];
      result5 ^= ((ulong*)other)[5];
      result6 ^= ((uint*)other)[12];
      result7 ^= ((ushort*)other)[26];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block54* @this, Block54* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((ushort*)@this)[26];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((uint*)other)[7];
      result8 ^= ((uint*)other)[8];
      result9 ^= ((uint*)other)[9];
      result10 ^= ((uint*)other)[10];
      result11 ^= ((uint*)other)[11];
      result12 ^= ((uint*)other)[12];
      result13 ^= ((ushort*)other)[26];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result8 |= result9;
      result10 |= result11;
      result12 |= result13;
      result0 |= result2;
      result4 |= result6;
      result8 |= result10;
      result0 |= result4;
      result8 |= result12;
      result0 |= result8;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block54* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block54* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((ulong*)@this)[3] = qword;
      ((ulong*)@this)[4] = qword;
      ((ulong*)@this)[5] = qword;
      var dword = 0x01010101U * value;
      ((uint*)@this)[12] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[26] = word;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block54* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((uint*)@this)[7] = dword;
      ((uint*)@this)[8] = dword;
      ((uint*)@this)[9] = dword;
      ((uint*)@this)[10] = dword;
      ((uint*)@this)[11] = dword;
      ((uint*)@this)[12] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[26] = word;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block54* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block54* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ulong*)@this)[3] = 0;
      ((ulong*)@this)[4] = 0;
      ((ulong*)@this)[5] = 0;
      ((uint*)@this)[12] = 0;
      ((ushort*)@this)[26] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block54* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((uint*)@this)[7] = 0;
      ((uint*)@this)[8] = 0;
      ((uint*)@this)[9] = 0;
      ((uint*)@this)[10] = 0;
      ((uint*)@this)[11] = 0;
      ((uint*)@this)[12] = 0;
      ((ushort*)@this)[26] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block54* @this, Block54* operand, Block54* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block54* @this, Block54* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block54* @this, Block54* operand, Block54* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((uint*)@this)[12];
      var result7 = ((ushort*)@this)[26];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      result6 &= ((uint*)operand)[12];
      result7 &= ((ushort*)operand)[26];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((uint*)target)[12] = result6;
      ((ushort*)target)[26] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block54* @this, Block54* operand, Block54* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((ushort*)@this)[26];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      result12 &= ((uint*)operand)[12];
      result13 &= ((ushort*)operand)[26];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((ushort*)target)[26] = result13;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block54* @this, Block54* operand, Block54* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block54* @this, Block54* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block54* @this, Block54* operand, Block54* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((uint*)@this)[12];
      var result7 = ((ushort*)@this)[26];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      result6 &= ((uint*)operand)[12];
      result7 &= ((ushort*)operand)[26];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((uint*)target)[12] = result6;
      ((ushort*)target)[26] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block54* @this, Block54* operand, Block54* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((ushort*)@this)[26];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      result12 &= ((uint*)operand)[12];
      result13 &= ((ushort*)operand)[26];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((ushort*)target)[26] = result13;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block54* @this, Block54* operand, Block54* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block54* @this, Block54* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block54* @this, Block54* operand, Block54* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((uint*)@this)[12];
      var result7 = ((ushort*)@this)[26];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      result6 |= ((uint*)operand)[12];
      result7 |= ((ushort*)operand)[26];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((uint*)target)[12] = result6;
      ((ushort*)target)[26] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block54* @this, Block54* operand, Block54* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((ushort*)@this)[26];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      result12 |= ((uint*)operand)[12];
      result13 |= ((ushort*)operand)[26];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((ushort*)target)[26] = result13;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block54* @this, Block54* operand, Block54* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block54* @this, Block54* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block54* @this, Block54* operand, Block54* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((uint*)@this)[12];
      var result7 = ((ushort*)@this)[26];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      result6 |= ((uint*)operand)[12];
      result7 |= ((ushort*)operand)[26];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((uint*)target)[12] = result6;
      ((ushort*)target)[26] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block54* @this, Block54* operand, Block54* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((ushort*)@this)[26];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      result12 |= ((uint*)operand)[12];
      result13 |= ((ushort*)operand)[26];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((ushort*)target)[26] = result13;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block54* @this, Block54* operand, Block54* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block54* @this, Block54* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block54* @this, Block54* operand, Block54* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((uint*)@this)[12];
      var result7 = ((ushort*)@this)[26];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      result6 ^= ((uint*)operand)[12];
      result7 ^= ((ushort*)operand)[26];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((uint*)target)[12] = result6;
      ((ushort*)target)[26] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block54* @this, Block54* operand, Block54* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((ushort*)@this)[26];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      result12 ^= ((uint*)operand)[12];
      result13 ^= ((ushort*)operand)[26];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((ushort*)target)[26] = result13;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block54* @this, Block54* operand, Block54* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block54* @this, Block54* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block54* @this, Block54* operand, Block54* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((uint*)@this)[12];
      var result7 = ((ushort*)@this)[26];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      result6 ^= ((uint*)operand)[12];
      result7 ^= ((ushort*)operand)[26];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((uint*)target)[12] = result6;
      ((ushort*)target)[26] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block54* @this, Block54* operand, Block54* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((ushort*)@this)[26];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      result12 ^= ((uint*)operand)[12];
      result13 ^= ((ushort*)operand)[26];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((ushort*)target)[26] = result13;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block54* @this, Block54* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block54* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block54* @this, Block54* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((uint*)@this)[12];
      var result7 = ((ushort*)@this)[26];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((uint*)target)[12] = result6;
      ((ushort*)target)[26] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block54* @this, Block54* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((ushort*)@this)[26];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((ushort*)target)[26] = result13;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 55)] 
  public struct Block55 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block55* @this, Block55* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block55* @this, Block55* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((uint*)@this)[12];
      var result7 = ((ushort*)@this)[26];
      var result8 = ((byte*)@this)[54];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ulong*)other)[3];
      result4 ^= ((ulong*)other)[4];
      result5 ^= ((ulong*)other)[5];
      result6 ^= ((uint*)other)[12];
      result7 ^= ((ushort*)other)[26];
      result8 ^= ((byte*)other)[54];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      result0 |= result8;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block55* @this, Block55* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((ushort*)@this)[26];
      var result14 = ((byte*)@this)[54];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((uint*)other)[7];
      result8 ^= ((uint*)other)[8];
      result9 ^= ((uint*)other)[9];
      result10 ^= ((uint*)other)[10];
      result11 ^= ((uint*)other)[11];
      result12 ^= ((uint*)other)[12];
      result13 ^= ((ushort*)other)[26];
      result14 ^= ((byte*)other)[54];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result8 |= result9;
      result10 |= result11;
      result12 |= result13;
      result0 |= result2;
      result4 |= result6;
      result8 |= result10;
      result12 |= result14;
      result0 |= result4;
      result8 |= result12;
      result0 |= result8;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block55* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block55* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((ulong*)@this)[3] = qword;
      ((ulong*)@this)[4] = qword;
      ((ulong*)@this)[5] = qword;
      var dword = 0x01010101U * value;
      ((uint*)@this)[12] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[26] = word;
      ((byte*)@this)[54] = value;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block55* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((uint*)@this)[7] = dword;
      ((uint*)@this)[8] = dword;
      ((uint*)@this)[9] = dword;
      ((uint*)@this)[10] = dword;
      ((uint*)@this)[11] = dword;
      ((uint*)@this)[12] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[26] = word;
      ((byte*)@this)[54] = value;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block55* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block55* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ulong*)@this)[3] = 0;
      ((ulong*)@this)[4] = 0;
      ((ulong*)@this)[5] = 0;
      ((uint*)@this)[12] = 0;
      ((ushort*)@this)[26] = 0;
      ((byte*)@this)[54] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block55* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((uint*)@this)[7] = 0;
      ((uint*)@this)[8] = 0;
      ((uint*)@this)[9] = 0;
      ((uint*)@this)[10] = 0;
      ((uint*)@this)[11] = 0;
      ((uint*)@this)[12] = 0;
      ((ushort*)@this)[26] = 0;
      ((byte*)@this)[54] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block55* @this, Block55* operand, Block55* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block55* @this, Block55* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block55* @this, Block55* operand, Block55* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((uint*)@this)[12];
      var result7 = ((ushort*)@this)[26];
      var result8 = ((byte*)@this)[54];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      result6 &= ((uint*)operand)[12];
      result7 &= ((ushort*)operand)[26];
      result8 &= ((byte*)operand)[54];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((uint*)target)[12] = result6;
      ((ushort*)target)[26] = result7;
      ((byte*)target)[54] = result8;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block55* @this, Block55* operand, Block55* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((ushort*)@this)[26];
      var result14 = ((byte*)@this)[54];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      result12 &= ((uint*)operand)[12];
      result13 &= ((ushort*)operand)[26];
      result14 &= ((byte*)operand)[54];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((ushort*)target)[26] = result13;
      ((byte*)target)[54] = result14;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block55* @this, Block55* operand, Block55* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block55* @this, Block55* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block55* @this, Block55* operand, Block55* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((uint*)@this)[12];
      var result7 = ((ushort*)@this)[26];
      var result8 = ((byte*)@this)[54];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      result6 &= ((uint*)operand)[12];
      result7 &= ((ushort*)operand)[26];
      result8 &= ((byte*)operand)[54];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((uint*)target)[12] = result6;
      ((ushort*)target)[26] = result7;
      ((byte*)target)[54] = result8;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block55* @this, Block55* operand, Block55* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((ushort*)@this)[26];
      var result14 = ((byte*)@this)[54];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      result12 &= ((uint*)operand)[12];
      result13 &= ((ushort*)operand)[26];
      result14 &= ((byte*)operand)[54];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((ushort*)target)[26] = result13;
      ((byte*)target)[54] = result14;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block55* @this, Block55* operand, Block55* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block55* @this, Block55* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block55* @this, Block55* operand, Block55* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((uint*)@this)[12];
      var result7 = ((ushort*)@this)[26];
      var result8 = ((byte*)@this)[54];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      result6 |= ((uint*)operand)[12];
      result7 |= ((ushort*)operand)[26];
      result8 |= ((byte*)operand)[54];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((uint*)target)[12] = result6;
      ((ushort*)target)[26] = result7;
      ((byte*)target)[54] = result8;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block55* @this, Block55* operand, Block55* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((ushort*)@this)[26];
      var result14 = ((byte*)@this)[54];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      result12 |= ((uint*)operand)[12];
      result13 |= ((ushort*)operand)[26];
      result14 |= ((byte*)operand)[54];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((ushort*)target)[26] = result13;
      ((byte*)target)[54] = result14;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block55* @this, Block55* operand, Block55* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block55* @this, Block55* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block55* @this, Block55* operand, Block55* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((uint*)@this)[12];
      var result7 = ((ushort*)@this)[26];
      var result8 = ((byte*)@this)[54];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      result6 |= ((uint*)operand)[12];
      result7 |= ((ushort*)operand)[26];
      result8 |= ((byte*)operand)[54];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((uint*)target)[12] = result6;
      ((ushort*)target)[26] = result7;
      ((byte*)target)[54] = result8;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block55* @this, Block55* operand, Block55* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((ushort*)@this)[26];
      var result14 = ((byte*)@this)[54];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      result12 |= ((uint*)operand)[12];
      result13 |= ((ushort*)operand)[26];
      result14 |= ((byte*)operand)[54];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((ushort*)target)[26] = result13;
      ((byte*)target)[54] = result14;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block55* @this, Block55* operand, Block55* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block55* @this, Block55* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block55* @this, Block55* operand, Block55* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((uint*)@this)[12];
      var result7 = ((ushort*)@this)[26];
      var result8 = ((byte*)@this)[54];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      result6 ^= ((uint*)operand)[12];
      result7 ^= ((ushort*)operand)[26];
      result8 ^= ((byte*)operand)[54];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((uint*)target)[12] = result6;
      ((ushort*)target)[26] = result7;
      ((byte*)target)[54] = result8;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block55* @this, Block55* operand, Block55* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((ushort*)@this)[26];
      var result14 = ((byte*)@this)[54];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      result12 ^= ((uint*)operand)[12];
      result13 ^= ((ushort*)operand)[26];
      result14 ^= ((byte*)operand)[54];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((ushort*)target)[26] = result13;
      ((byte*)target)[54] = result14;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block55* @this, Block55* operand, Block55* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block55* @this, Block55* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block55* @this, Block55* operand, Block55* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((uint*)@this)[12];
      var result7 = ((ushort*)@this)[26];
      var result8 = ((byte*)@this)[54];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      result6 ^= ((uint*)operand)[12];
      result7 ^= ((ushort*)operand)[26];
      result8 ^= ((byte*)operand)[54];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((uint*)target)[12] = result6;
      ((ushort*)target)[26] = result7;
      ((byte*)target)[54] = result8;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block55* @this, Block55* operand, Block55* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((ushort*)@this)[26];
      var result14 = ((byte*)@this)[54];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      result12 ^= ((uint*)operand)[12];
      result13 ^= ((ushort*)operand)[26];
      result14 ^= ((byte*)operand)[54];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((ushort*)target)[26] = result13;
      ((byte*)target)[54] = result14;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block55* @this, Block55* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block55* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block55* @this, Block55* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((uint*)@this)[12];
      var result7 = ((ushort*)@this)[26];
      var result8 = ((byte*)@this)[54];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((uint*)target)[12] = result6;
      ((ushort*)target)[26] = result7;
      ((byte*)target)[54] = result8;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block55* @this, Block55* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((ushort*)@this)[26];
      var result14 = ((byte*)@this)[54];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((ushort*)target)[26] = result13;
      ((byte*)target)[54] = result14;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 56)] 
  public struct Block56 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block56* @this, Block56* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block56* @this, Block56* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ulong*)other)[3];
      result4 ^= ((ulong*)other)[4];
      result5 ^= ((ulong*)other)[5];
      result6 ^= ((ulong*)other)[6];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block56* @this, Block56* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((uint*)other)[7];
      result8 ^= ((uint*)other)[8];
      result9 ^= ((uint*)other)[9];
      result10 ^= ((uint*)other)[10];
      result11 ^= ((uint*)other)[11];
      result12 ^= ((uint*)other)[12];
      result13 ^= ((uint*)other)[13];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result8 |= result9;
      result10 |= result11;
      result12 |= result13;
      result0 |= result2;
      result4 |= result6;
      result8 |= result10;
      result0 |= result4;
      result8 |= result12;
      result0 |= result8;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block56* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block56* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((ulong*)@this)[3] = qword;
      ((ulong*)@this)[4] = qword;
      ((ulong*)@this)[5] = qword;
      ((ulong*)@this)[6] = qword;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block56* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((uint*)@this)[7] = dword;
      ((uint*)@this)[8] = dword;
      ((uint*)@this)[9] = dword;
      ((uint*)@this)[10] = dword;
      ((uint*)@this)[11] = dword;
      ((uint*)@this)[12] = dword;
      ((uint*)@this)[13] = dword;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block56* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block56* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ulong*)@this)[3] = 0;
      ((ulong*)@this)[4] = 0;
      ((ulong*)@this)[5] = 0;
      ((ulong*)@this)[6] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block56* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((uint*)@this)[7] = 0;
      ((uint*)@this)[8] = 0;
      ((uint*)@this)[9] = 0;
      ((uint*)@this)[10] = 0;
      ((uint*)@this)[11] = 0;
      ((uint*)@this)[12] = 0;
      ((uint*)@this)[13] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block56* @this, Block56* operand, Block56* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block56* @this, Block56* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block56* @this, Block56* operand, Block56* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      result6 &= ((ulong*)operand)[6];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block56* @this, Block56* operand, Block56* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      result12 &= ((uint*)operand)[12];
      result13 &= ((uint*)operand)[13];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block56* @this, Block56* operand, Block56* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block56* @this, Block56* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block56* @this, Block56* operand, Block56* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      result6 &= ((ulong*)operand)[6];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block56* @this, Block56* operand, Block56* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      result12 &= ((uint*)operand)[12];
      result13 &= ((uint*)operand)[13];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block56* @this, Block56* operand, Block56* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block56* @this, Block56* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block56* @this, Block56* operand, Block56* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      result6 |= ((ulong*)operand)[6];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block56* @this, Block56* operand, Block56* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      result12 |= ((uint*)operand)[12];
      result13 |= ((uint*)operand)[13];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block56* @this, Block56* operand, Block56* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block56* @this, Block56* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block56* @this, Block56* operand, Block56* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      result6 |= ((ulong*)operand)[6];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block56* @this, Block56* operand, Block56* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      result12 |= ((uint*)operand)[12];
      result13 |= ((uint*)operand)[13];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block56* @this, Block56* operand, Block56* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block56* @this, Block56* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block56* @this, Block56* operand, Block56* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      result6 ^= ((ulong*)operand)[6];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block56* @this, Block56* operand, Block56* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      result12 ^= ((uint*)operand)[12];
      result13 ^= ((uint*)operand)[13];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block56* @this, Block56* operand, Block56* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block56* @this, Block56* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block56* @this, Block56* operand, Block56* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      result6 ^= ((ulong*)operand)[6];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block56* @this, Block56* operand, Block56* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      result12 ^= ((uint*)operand)[12];
      result13 ^= ((uint*)operand)[13];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block56* @this, Block56* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block56* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block56* @this, Block56* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block56* @this, Block56* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 57)] 
  public struct Block57 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block57* @this, Block57* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block57* @this, Block57* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((byte*)@this)[56];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ulong*)other)[3];
      result4 ^= ((ulong*)other)[4];
      result5 ^= ((ulong*)other)[5];
      result6 ^= ((ulong*)other)[6];
      result7 ^= ((byte*)other)[56];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block57* @this, Block57* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((byte*)@this)[56];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((uint*)other)[7];
      result8 ^= ((uint*)other)[8];
      result9 ^= ((uint*)other)[9];
      result10 ^= ((uint*)other)[10];
      result11 ^= ((uint*)other)[11];
      result12 ^= ((uint*)other)[12];
      result13 ^= ((uint*)other)[13];
      result14 ^= ((byte*)other)[56];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result8 |= result9;
      result10 |= result11;
      result12 |= result13;
      result0 |= result2;
      result4 |= result6;
      result8 |= result10;
      result12 |= result14;
      result0 |= result4;
      result8 |= result12;
      result0 |= result8;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block57* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block57* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((ulong*)@this)[3] = qword;
      ((ulong*)@this)[4] = qword;
      ((ulong*)@this)[5] = qword;
      ((ulong*)@this)[6] = qword;
      ((byte*)@this)[56] = value;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block57* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((uint*)@this)[7] = dword;
      ((uint*)@this)[8] = dword;
      ((uint*)@this)[9] = dword;
      ((uint*)@this)[10] = dword;
      ((uint*)@this)[11] = dword;
      ((uint*)@this)[12] = dword;
      ((uint*)@this)[13] = dword;
      ((byte*)@this)[56] = value;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block57* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block57* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ulong*)@this)[3] = 0;
      ((ulong*)@this)[4] = 0;
      ((ulong*)@this)[5] = 0;
      ((ulong*)@this)[6] = 0;
      ((byte*)@this)[56] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block57* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((uint*)@this)[7] = 0;
      ((uint*)@this)[8] = 0;
      ((uint*)@this)[9] = 0;
      ((uint*)@this)[10] = 0;
      ((uint*)@this)[11] = 0;
      ((uint*)@this)[12] = 0;
      ((uint*)@this)[13] = 0;
      ((byte*)@this)[56] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block57* @this, Block57* operand, Block57* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block57* @this, Block57* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block57* @this, Block57* operand, Block57* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((byte*)@this)[56];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      result6 &= ((ulong*)operand)[6];
      result7 &= ((byte*)operand)[56];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((byte*)target)[56] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block57* @this, Block57* operand, Block57* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((byte*)@this)[56];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      result12 &= ((uint*)operand)[12];
      result13 &= ((uint*)operand)[13];
      result14 &= ((byte*)operand)[56];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((byte*)target)[56] = result14;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block57* @this, Block57* operand, Block57* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block57* @this, Block57* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block57* @this, Block57* operand, Block57* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((byte*)@this)[56];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      result6 &= ((ulong*)operand)[6];
      result7 &= ((byte*)operand)[56];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((byte*)target)[56] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block57* @this, Block57* operand, Block57* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((byte*)@this)[56];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      result12 &= ((uint*)operand)[12];
      result13 &= ((uint*)operand)[13];
      result14 &= ((byte*)operand)[56];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((byte*)target)[56] = result14;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block57* @this, Block57* operand, Block57* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block57* @this, Block57* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block57* @this, Block57* operand, Block57* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((byte*)@this)[56];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      result6 |= ((ulong*)operand)[6];
      result7 |= ((byte*)operand)[56];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((byte*)target)[56] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block57* @this, Block57* operand, Block57* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((byte*)@this)[56];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      result12 |= ((uint*)operand)[12];
      result13 |= ((uint*)operand)[13];
      result14 |= ((byte*)operand)[56];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((byte*)target)[56] = result14;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block57* @this, Block57* operand, Block57* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block57* @this, Block57* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block57* @this, Block57* operand, Block57* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((byte*)@this)[56];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      result6 |= ((ulong*)operand)[6];
      result7 |= ((byte*)operand)[56];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((byte*)target)[56] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block57* @this, Block57* operand, Block57* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((byte*)@this)[56];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      result12 |= ((uint*)operand)[12];
      result13 |= ((uint*)operand)[13];
      result14 |= ((byte*)operand)[56];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((byte*)target)[56] = result14;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block57* @this, Block57* operand, Block57* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block57* @this, Block57* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block57* @this, Block57* operand, Block57* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((byte*)@this)[56];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      result6 ^= ((ulong*)operand)[6];
      result7 ^= ((byte*)operand)[56];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((byte*)target)[56] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block57* @this, Block57* operand, Block57* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((byte*)@this)[56];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      result12 ^= ((uint*)operand)[12];
      result13 ^= ((uint*)operand)[13];
      result14 ^= ((byte*)operand)[56];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((byte*)target)[56] = result14;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block57* @this, Block57* operand, Block57* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block57* @this, Block57* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block57* @this, Block57* operand, Block57* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((byte*)@this)[56];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      result6 ^= ((ulong*)operand)[6];
      result7 ^= ((byte*)operand)[56];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((byte*)target)[56] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block57* @this, Block57* operand, Block57* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((byte*)@this)[56];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      result12 ^= ((uint*)operand)[12];
      result13 ^= ((uint*)operand)[13];
      result14 ^= ((byte*)operand)[56];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((byte*)target)[56] = result14;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block57* @this, Block57* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block57* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block57* @this, Block57* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((byte*)@this)[56];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((byte*)target)[56] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block57* @this, Block57* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((byte*)@this)[56];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((byte*)target)[56] = result14;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 58)] 
  public struct Block58 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block58* @this, Block58* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block58* @this, Block58* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((ushort*)@this)[28];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ulong*)other)[3];
      result4 ^= ((ulong*)other)[4];
      result5 ^= ((ulong*)other)[5];
      result6 ^= ((ulong*)other)[6];
      result7 ^= ((ushort*)other)[28];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block58* @this, Block58* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((ushort*)@this)[28];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((uint*)other)[7];
      result8 ^= ((uint*)other)[8];
      result9 ^= ((uint*)other)[9];
      result10 ^= ((uint*)other)[10];
      result11 ^= ((uint*)other)[11];
      result12 ^= ((uint*)other)[12];
      result13 ^= ((uint*)other)[13];
      result14 ^= ((ushort*)other)[28];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result8 |= result9;
      result10 |= result11;
      result12 |= result13;
      result0 |= result2;
      result4 |= result6;
      result8 |= result10;
      result12 |= result14;
      result0 |= result4;
      result8 |= result12;
      result0 |= result8;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block58* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block58* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((ulong*)@this)[3] = qword;
      ((ulong*)@this)[4] = qword;
      ((ulong*)@this)[5] = qword;
      ((ulong*)@this)[6] = qword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[28] = word;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block58* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((uint*)@this)[7] = dword;
      ((uint*)@this)[8] = dword;
      ((uint*)@this)[9] = dword;
      ((uint*)@this)[10] = dword;
      ((uint*)@this)[11] = dword;
      ((uint*)@this)[12] = dword;
      ((uint*)@this)[13] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[28] = word;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block58* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block58* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ulong*)@this)[3] = 0;
      ((ulong*)@this)[4] = 0;
      ((ulong*)@this)[5] = 0;
      ((ulong*)@this)[6] = 0;
      ((ushort*)@this)[28] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block58* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((uint*)@this)[7] = 0;
      ((uint*)@this)[8] = 0;
      ((uint*)@this)[9] = 0;
      ((uint*)@this)[10] = 0;
      ((uint*)@this)[11] = 0;
      ((uint*)@this)[12] = 0;
      ((uint*)@this)[13] = 0;
      ((ushort*)@this)[28] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block58* @this, Block58* operand, Block58* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block58* @this, Block58* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block58* @this, Block58* operand, Block58* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((ushort*)@this)[28];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      result6 &= ((ulong*)operand)[6];
      result7 &= ((ushort*)operand)[28];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((ushort*)target)[28] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block58* @this, Block58* operand, Block58* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((ushort*)@this)[28];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      result12 &= ((uint*)operand)[12];
      result13 &= ((uint*)operand)[13];
      result14 &= ((ushort*)operand)[28];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((ushort*)target)[28] = result14;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block58* @this, Block58* operand, Block58* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block58* @this, Block58* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block58* @this, Block58* operand, Block58* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((ushort*)@this)[28];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      result6 &= ((ulong*)operand)[6];
      result7 &= ((ushort*)operand)[28];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((ushort*)target)[28] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block58* @this, Block58* operand, Block58* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((ushort*)@this)[28];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      result12 &= ((uint*)operand)[12];
      result13 &= ((uint*)operand)[13];
      result14 &= ((ushort*)operand)[28];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((ushort*)target)[28] = result14;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block58* @this, Block58* operand, Block58* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block58* @this, Block58* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block58* @this, Block58* operand, Block58* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((ushort*)@this)[28];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      result6 |= ((ulong*)operand)[6];
      result7 |= ((ushort*)operand)[28];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((ushort*)target)[28] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block58* @this, Block58* operand, Block58* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((ushort*)@this)[28];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      result12 |= ((uint*)operand)[12];
      result13 |= ((uint*)operand)[13];
      result14 |= ((ushort*)operand)[28];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((ushort*)target)[28] = result14;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block58* @this, Block58* operand, Block58* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block58* @this, Block58* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block58* @this, Block58* operand, Block58* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((ushort*)@this)[28];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      result6 |= ((ulong*)operand)[6];
      result7 |= ((ushort*)operand)[28];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((ushort*)target)[28] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block58* @this, Block58* operand, Block58* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((ushort*)@this)[28];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      result12 |= ((uint*)operand)[12];
      result13 |= ((uint*)operand)[13];
      result14 |= ((ushort*)operand)[28];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((ushort*)target)[28] = result14;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block58* @this, Block58* operand, Block58* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block58* @this, Block58* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block58* @this, Block58* operand, Block58* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((ushort*)@this)[28];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      result6 ^= ((ulong*)operand)[6];
      result7 ^= ((ushort*)operand)[28];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((ushort*)target)[28] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block58* @this, Block58* operand, Block58* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((ushort*)@this)[28];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      result12 ^= ((uint*)operand)[12];
      result13 ^= ((uint*)operand)[13];
      result14 ^= ((ushort*)operand)[28];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((ushort*)target)[28] = result14;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block58* @this, Block58* operand, Block58* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block58* @this, Block58* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block58* @this, Block58* operand, Block58* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((ushort*)@this)[28];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      result6 ^= ((ulong*)operand)[6];
      result7 ^= ((ushort*)operand)[28];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((ushort*)target)[28] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block58* @this, Block58* operand, Block58* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((ushort*)@this)[28];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      result12 ^= ((uint*)operand)[12];
      result13 ^= ((uint*)operand)[13];
      result14 ^= ((ushort*)operand)[28];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((ushort*)target)[28] = result14;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block58* @this, Block58* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block58* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block58* @this, Block58* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((ushort*)@this)[28];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((ushort*)target)[28] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block58* @this, Block58* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((ushort*)@this)[28];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((ushort*)target)[28] = result14;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 59)] 
  public struct Block59 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block59* @this, Block59* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block59* @this, Block59* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((ushort*)@this)[28];
      var result8 = ((byte*)@this)[58];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ulong*)other)[3];
      result4 ^= ((ulong*)other)[4];
      result5 ^= ((ulong*)other)[5];
      result6 ^= ((ulong*)other)[6];
      result7 ^= ((ushort*)other)[28];
      result8 ^= ((byte*)other)[58];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      result0 |= result8;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block59* @this, Block59* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((ushort*)@this)[28];
      var result15 = ((byte*)@this)[58];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((uint*)other)[7];
      result8 ^= ((uint*)other)[8];
      result9 ^= ((uint*)other)[9];
      result10 ^= ((uint*)other)[10];
      result11 ^= ((uint*)other)[11];
      result12 ^= ((uint*)other)[12];
      result13 ^= ((uint*)other)[13];
      result14 ^= ((ushort*)other)[28];
      result15 ^= ((byte*)other)[58];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result8 |= result9;
      result10 |= result11;
      result12 |= result13;
      result14 |= result15;
      result0 |= result2;
      result4 |= result6;
      result8 |= result10;
      result12 |= result14;
      result0 |= result4;
      result8 |= result12;
      result0 |= result8;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block59* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block59* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((ulong*)@this)[3] = qword;
      ((ulong*)@this)[4] = qword;
      ((ulong*)@this)[5] = qword;
      ((ulong*)@this)[6] = qword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[28] = word;
      ((byte*)@this)[58] = value;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block59* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((uint*)@this)[7] = dword;
      ((uint*)@this)[8] = dword;
      ((uint*)@this)[9] = dword;
      ((uint*)@this)[10] = dword;
      ((uint*)@this)[11] = dword;
      ((uint*)@this)[12] = dword;
      ((uint*)@this)[13] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[28] = word;
      ((byte*)@this)[58] = value;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block59* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block59* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ulong*)@this)[3] = 0;
      ((ulong*)@this)[4] = 0;
      ((ulong*)@this)[5] = 0;
      ((ulong*)@this)[6] = 0;
      ((ushort*)@this)[28] = 0;
      ((byte*)@this)[58] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block59* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((uint*)@this)[7] = 0;
      ((uint*)@this)[8] = 0;
      ((uint*)@this)[9] = 0;
      ((uint*)@this)[10] = 0;
      ((uint*)@this)[11] = 0;
      ((uint*)@this)[12] = 0;
      ((uint*)@this)[13] = 0;
      ((ushort*)@this)[28] = 0;
      ((byte*)@this)[58] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block59* @this, Block59* operand, Block59* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block59* @this, Block59* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block59* @this, Block59* operand, Block59* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((ushort*)@this)[28];
      var result8 = ((byte*)@this)[58];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      result6 &= ((ulong*)operand)[6];
      result7 &= ((ushort*)operand)[28];
      result8 &= ((byte*)operand)[58];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((ushort*)target)[28] = result7;
      ((byte*)target)[58] = result8;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block59* @this, Block59* operand, Block59* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((ushort*)@this)[28];
      var result15 = ((byte*)@this)[58];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      result12 &= ((uint*)operand)[12];
      result13 &= ((uint*)operand)[13];
      result14 &= ((ushort*)operand)[28];
      result15 &= ((byte*)operand)[58];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((ushort*)target)[28] = result14;
      ((byte*)target)[58] = result15;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block59* @this, Block59* operand, Block59* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block59* @this, Block59* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block59* @this, Block59* operand, Block59* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((ushort*)@this)[28];
      var result8 = ((byte*)@this)[58];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      result6 &= ((ulong*)operand)[6];
      result7 &= ((ushort*)operand)[28];
      result8 &= ((byte*)operand)[58];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((ushort*)target)[28] = result7;
      ((byte*)target)[58] = result8;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block59* @this, Block59* operand, Block59* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((ushort*)@this)[28];
      var result15 = ((byte*)@this)[58];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      result12 &= ((uint*)operand)[12];
      result13 &= ((uint*)operand)[13];
      result14 &= ((ushort*)operand)[28];
      result15 &= ((byte*)operand)[58];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      result15 = _Not(result15);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((ushort*)target)[28] = result14;
      ((byte*)target)[58] = result15;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block59* @this, Block59* operand, Block59* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block59* @this, Block59* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block59* @this, Block59* operand, Block59* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((ushort*)@this)[28];
      var result8 = ((byte*)@this)[58];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      result6 |= ((ulong*)operand)[6];
      result7 |= ((ushort*)operand)[28];
      result8 |= ((byte*)operand)[58];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((ushort*)target)[28] = result7;
      ((byte*)target)[58] = result8;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block59* @this, Block59* operand, Block59* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((ushort*)@this)[28];
      var result15 = ((byte*)@this)[58];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      result12 |= ((uint*)operand)[12];
      result13 |= ((uint*)operand)[13];
      result14 |= ((ushort*)operand)[28];
      result15 |= ((byte*)operand)[58];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((ushort*)target)[28] = result14;
      ((byte*)target)[58] = result15;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block59* @this, Block59* operand, Block59* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block59* @this, Block59* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block59* @this, Block59* operand, Block59* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((ushort*)@this)[28];
      var result8 = ((byte*)@this)[58];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      result6 |= ((ulong*)operand)[6];
      result7 |= ((ushort*)operand)[28];
      result8 |= ((byte*)operand)[58];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((ushort*)target)[28] = result7;
      ((byte*)target)[58] = result8;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block59* @this, Block59* operand, Block59* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((ushort*)@this)[28];
      var result15 = ((byte*)@this)[58];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      result12 |= ((uint*)operand)[12];
      result13 |= ((uint*)operand)[13];
      result14 |= ((ushort*)operand)[28];
      result15 |= ((byte*)operand)[58];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      result15 = _Not(result15);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((ushort*)target)[28] = result14;
      ((byte*)target)[58] = result15;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block59* @this, Block59* operand, Block59* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block59* @this, Block59* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block59* @this, Block59* operand, Block59* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((ushort*)@this)[28];
      var result8 = ((byte*)@this)[58];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      result6 ^= ((ulong*)operand)[6];
      result7 ^= ((ushort*)operand)[28];
      result8 ^= ((byte*)operand)[58];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((ushort*)target)[28] = result7;
      ((byte*)target)[58] = result8;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block59* @this, Block59* operand, Block59* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((ushort*)@this)[28];
      var result15 = ((byte*)@this)[58];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      result12 ^= ((uint*)operand)[12];
      result13 ^= ((uint*)operand)[13];
      result14 ^= ((ushort*)operand)[28];
      result15 ^= ((byte*)operand)[58];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((ushort*)target)[28] = result14;
      ((byte*)target)[58] = result15;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block59* @this, Block59* operand, Block59* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block59* @this, Block59* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block59* @this, Block59* operand, Block59* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((ushort*)@this)[28];
      var result8 = ((byte*)@this)[58];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      result6 ^= ((ulong*)operand)[6];
      result7 ^= ((ushort*)operand)[28];
      result8 ^= ((byte*)operand)[58];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((ushort*)target)[28] = result7;
      ((byte*)target)[58] = result8;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block59* @this, Block59* operand, Block59* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((ushort*)@this)[28];
      var result15 = ((byte*)@this)[58];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      result12 ^= ((uint*)operand)[12];
      result13 ^= ((uint*)operand)[13];
      result14 ^= ((ushort*)operand)[28];
      result15 ^= ((byte*)operand)[58];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      result15 = _Not(result15);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((ushort*)target)[28] = result14;
      ((byte*)target)[58] = result15;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block59* @this, Block59* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block59* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block59* @this, Block59* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((ushort*)@this)[28];
      var result8 = ((byte*)@this)[58];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((ushort*)target)[28] = result7;
      ((byte*)target)[58] = result8;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block59* @this, Block59* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((ushort*)@this)[28];
      var result15 = ((byte*)@this)[58];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      result15 = _Not(result15);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((ushort*)target)[28] = result14;
      ((byte*)target)[58] = result15;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 60)] 
  public struct Block60 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block60* @this, Block60* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block60* @this, Block60* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((uint*)@this)[14];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ulong*)other)[3];
      result4 ^= ((ulong*)other)[4];
      result5 ^= ((ulong*)other)[5];
      result6 ^= ((ulong*)other)[6];
      result7 ^= ((uint*)other)[14];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block60* @this, Block60* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((uint*)other)[7];
      result8 ^= ((uint*)other)[8];
      result9 ^= ((uint*)other)[9];
      result10 ^= ((uint*)other)[10];
      result11 ^= ((uint*)other)[11];
      result12 ^= ((uint*)other)[12];
      result13 ^= ((uint*)other)[13];
      result14 ^= ((uint*)other)[14];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result8 |= result9;
      result10 |= result11;
      result12 |= result13;
      result0 |= result2;
      result4 |= result6;
      result8 |= result10;
      result12 |= result14;
      result0 |= result4;
      result8 |= result12;
      result0 |= result8;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block60* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block60* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((ulong*)@this)[3] = qword;
      ((ulong*)@this)[4] = qword;
      ((ulong*)@this)[5] = qword;
      ((ulong*)@this)[6] = qword;
      var dword = 0x01010101U * value;
      ((uint*)@this)[14] = dword;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block60* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((uint*)@this)[7] = dword;
      ((uint*)@this)[8] = dword;
      ((uint*)@this)[9] = dword;
      ((uint*)@this)[10] = dword;
      ((uint*)@this)[11] = dword;
      ((uint*)@this)[12] = dword;
      ((uint*)@this)[13] = dword;
      ((uint*)@this)[14] = dword;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block60* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block60* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ulong*)@this)[3] = 0;
      ((ulong*)@this)[4] = 0;
      ((ulong*)@this)[5] = 0;
      ((ulong*)@this)[6] = 0;
      ((uint*)@this)[14] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block60* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((uint*)@this)[7] = 0;
      ((uint*)@this)[8] = 0;
      ((uint*)@this)[9] = 0;
      ((uint*)@this)[10] = 0;
      ((uint*)@this)[11] = 0;
      ((uint*)@this)[12] = 0;
      ((uint*)@this)[13] = 0;
      ((uint*)@this)[14] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block60* @this, Block60* operand, Block60* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block60* @this, Block60* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block60* @this, Block60* operand, Block60* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((uint*)@this)[14];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      result6 &= ((ulong*)operand)[6];
      result7 &= ((uint*)operand)[14];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((uint*)target)[14] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block60* @this, Block60* operand, Block60* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      result12 &= ((uint*)operand)[12];
      result13 &= ((uint*)operand)[13];
      result14 &= ((uint*)operand)[14];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block60* @this, Block60* operand, Block60* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block60* @this, Block60* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block60* @this, Block60* operand, Block60* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((uint*)@this)[14];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      result6 &= ((ulong*)operand)[6];
      result7 &= ((uint*)operand)[14];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((uint*)target)[14] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block60* @this, Block60* operand, Block60* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      result12 &= ((uint*)operand)[12];
      result13 &= ((uint*)operand)[13];
      result14 &= ((uint*)operand)[14];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block60* @this, Block60* operand, Block60* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block60* @this, Block60* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block60* @this, Block60* operand, Block60* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((uint*)@this)[14];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      result6 |= ((ulong*)operand)[6];
      result7 |= ((uint*)operand)[14];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((uint*)target)[14] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block60* @this, Block60* operand, Block60* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      result12 |= ((uint*)operand)[12];
      result13 |= ((uint*)operand)[13];
      result14 |= ((uint*)operand)[14];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block60* @this, Block60* operand, Block60* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block60* @this, Block60* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block60* @this, Block60* operand, Block60* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((uint*)@this)[14];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      result6 |= ((ulong*)operand)[6];
      result7 |= ((uint*)operand)[14];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((uint*)target)[14] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block60* @this, Block60* operand, Block60* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      result12 |= ((uint*)operand)[12];
      result13 |= ((uint*)operand)[13];
      result14 |= ((uint*)operand)[14];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block60* @this, Block60* operand, Block60* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block60* @this, Block60* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block60* @this, Block60* operand, Block60* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((uint*)@this)[14];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      result6 ^= ((ulong*)operand)[6];
      result7 ^= ((uint*)operand)[14];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((uint*)target)[14] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block60* @this, Block60* operand, Block60* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      result12 ^= ((uint*)operand)[12];
      result13 ^= ((uint*)operand)[13];
      result14 ^= ((uint*)operand)[14];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block60* @this, Block60* operand, Block60* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block60* @this, Block60* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block60* @this, Block60* operand, Block60* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((uint*)@this)[14];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      result6 ^= ((ulong*)operand)[6];
      result7 ^= ((uint*)operand)[14];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((uint*)target)[14] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block60* @this, Block60* operand, Block60* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      result12 ^= ((uint*)operand)[12];
      result13 ^= ((uint*)operand)[13];
      result14 ^= ((uint*)operand)[14];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block60* @this, Block60* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block60* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block60* @this, Block60* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((uint*)@this)[14];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((uint*)target)[14] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block60* @this, Block60* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 61)] 
  public struct Block61 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block61* @this, Block61* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block61* @this, Block61* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((uint*)@this)[14];
      var result8 = ((byte*)@this)[60];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ulong*)other)[3];
      result4 ^= ((ulong*)other)[4];
      result5 ^= ((ulong*)other)[5];
      result6 ^= ((ulong*)other)[6];
      result7 ^= ((uint*)other)[14];
      result8 ^= ((byte*)other)[60];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      result0 |= result8;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block61* @this, Block61* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      var result15 = ((byte*)@this)[60];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((uint*)other)[7];
      result8 ^= ((uint*)other)[8];
      result9 ^= ((uint*)other)[9];
      result10 ^= ((uint*)other)[10];
      result11 ^= ((uint*)other)[11];
      result12 ^= ((uint*)other)[12];
      result13 ^= ((uint*)other)[13];
      result14 ^= ((uint*)other)[14];
      result15 ^= ((byte*)other)[60];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result8 |= result9;
      result10 |= result11;
      result12 |= result13;
      result14 |= result15;
      result0 |= result2;
      result4 |= result6;
      result8 |= result10;
      result12 |= result14;
      result0 |= result4;
      result8 |= result12;
      result0 |= result8;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block61* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block61* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((ulong*)@this)[3] = qword;
      ((ulong*)@this)[4] = qword;
      ((ulong*)@this)[5] = qword;
      ((ulong*)@this)[6] = qword;
      var dword = 0x01010101U * value;
      ((uint*)@this)[14] = dword;
      ((byte*)@this)[60] = value;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block61* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((uint*)@this)[7] = dword;
      ((uint*)@this)[8] = dword;
      ((uint*)@this)[9] = dword;
      ((uint*)@this)[10] = dword;
      ((uint*)@this)[11] = dword;
      ((uint*)@this)[12] = dword;
      ((uint*)@this)[13] = dword;
      ((uint*)@this)[14] = dword;
      ((byte*)@this)[60] = value;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block61* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block61* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ulong*)@this)[3] = 0;
      ((ulong*)@this)[4] = 0;
      ((ulong*)@this)[5] = 0;
      ((ulong*)@this)[6] = 0;
      ((uint*)@this)[14] = 0;
      ((byte*)@this)[60] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block61* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((uint*)@this)[7] = 0;
      ((uint*)@this)[8] = 0;
      ((uint*)@this)[9] = 0;
      ((uint*)@this)[10] = 0;
      ((uint*)@this)[11] = 0;
      ((uint*)@this)[12] = 0;
      ((uint*)@this)[13] = 0;
      ((uint*)@this)[14] = 0;
      ((byte*)@this)[60] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block61* @this, Block61* operand, Block61* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block61* @this, Block61* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block61* @this, Block61* operand, Block61* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((uint*)@this)[14];
      var result8 = ((byte*)@this)[60];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      result6 &= ((ulong*)operand)[6];
      result7 &= ((uint*)operand)[14];
      result8 &= ((byte*)operand)[60];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((uint*)target)[14] = result7;
      ((byte*)target)[60] = result8;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block61* @this, Block61* operand, Block61* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      var result15 = ((byte*)@this)[60];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      result12 &= ((uint*)operand)[12];
      result13 &= ((uint*)operand)[13];
      result14 &= ((uint*)operand)[14];
      result15 &= ((byte*)operand)[60];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
      ((byte*)target)[60] = result15;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block61* @this, Block61* operand, Block61* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block61* @this, Block61* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block61* @this, Block61* operand, Block61* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((uint*)@this)[14];
      var result8 = ((byte*)@this)[60];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      result6 &= ((ulong*)operand)[6];
      result7 &= ((uint*)operand)[14];
      result8 &= ((byte*)operand)[60];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((uint*)target)[14] = result7;
      ((byte*)target)[60] = result8;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block61* @this, Block61* operand, Block61* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      var result15 = ((byte*)@this)[60];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      result12 &= ((uint*)operand)[12];
      result13 &= ((uint*)operand)[13];
      result14 &= ((uint*)operand)[14];
      result15 &= ((byte*)operand)[60];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      result15 = _Not(result15);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
      ((byte*)target)[60] = result15;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block61* @this, Block61* operand, Block61* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block61* @this, Block61* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block61* @this, Block61* operand, Block61* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((uint*)@this)[14];
      var result8 = ((byte*)@this)[60];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      result6 |= ((ulong*)operand)[6];
      result7 |= ((uint*)operand)[14];
      result8 |= ((byte*)operand)[60];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((uint*)target)[14] = result7;
      ((byte*)target)[60] = result8;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block61* @this, Block61* operand, Block61* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      var result15 = ((byte*)@this)[60];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      result12 |= ((uint*)operand)[12];
      result13 |= ((uint*)operand)[13];
      result14 |= ((uint*)operand)[14];
      result15 |= ((byte*)operand)[60];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
      ((byte*)target)[60] = result15;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block61* @this, Block61* operand, Block61* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block61* @this, Block61* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block61* @this, Block61* operand, Block61* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((uint*)@this)[14];
      var result8 = ((byte*)@this)[60];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      result6 |= ((ulong*)operand)[6];
      result7 |= ((uint*)operand)[14];
      result8 |= ((byte*)operand)[60];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((uint*)target)[14] = result7;
      ((byte*)target)[60] = result8;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block61* @this, Block61* operand, Block61* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      var result15 = ((byte*)@this)[60];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      result12 |= ((uint*)operand)[12];
      result13 |= ((uint*)operand)[13];
      result14 |= ((uint*)operand)[14];
      result15 |= ((byte*)operand)[60];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      result15 = _Not(result15);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
      ((byte*)target)[60] = result15;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block61* @this, Block61* operand, Block61* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block61* @this, Block61* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block61* @this, Block61* operand, Block61* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((uint*)@this)[14];
      var result8 = ((byte*)@this)[60];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      result6 ^= ((ulong*)operand)[6];
      result7 ^= ((uint*)operand)[14];
      result8 ^= ((byte*)operand)[60];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((uint*)target)[14] = result7;
      ((byte*)target)[60] = result8;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block61* @this, Block61* operand, Block61* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      var result15 = ((byte*)@this)[60];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      result12 ^= ((uint*)operand)[12];
      result13 ^= ((uint*)operand)[13];
      result14 ^= ((uint*)operand)[14];
      result15 ^= ((byte*)operand)[60];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
      ((byte*)target)[60] = result15;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block61* @this, Block61* operand, Block61* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block61* @this, Block61* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block61* @this, Block61* operand, Block61* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((uint*)@this)[14];
      var result8 = ((byte*)@this)[60];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      result6 ^= ((ulong*)operand)[6];
      result7 ^= ((uint*)operand)[14];
      result8 ^= ((byte*)operand)[60];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((uint*)target)[14] = result7;
      ((byte*)target)[60] = result8;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block61* @this, Block61* operand, Block61* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      var result15 = ((byte*)@this)[60];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      result12 ^= ((uint*)operand)[12];
      result13 ^= ((uint*)operand)[13];
      result14 ^= ((uint*)operand)[14];
      result15 ^= ((byte*)operand)[60];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      result15 = _Not(result15);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
      ((byte*)target)[60] = result15;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block61* @this, Block61* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block61* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block61* @this, Block61* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((uint*)@this)[14];
      var result8 = ((byte*)@this)[60];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((uint*)target)[14] = result7;
      ((byte*)target)[60] = result8;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block61* @this, Block61* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      var result15 = ((byte*)@this)[60];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      result15 = _Not(result15);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
      ((byte*)target)[60] = result15;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 62)] 
  public struct Block62 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block62* @this, Block62* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block62* @this, Block62* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((uint*)@this)[14];
      var result8 = ((ushort*)@this)[30];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ulong*)other)[3];
      result4 ^= ((ulong*)other)[4];
      result5 ^= ((ulong*)other)[5];
      result6 ^= ((ulong*)other)[6];
      result7 ^= ((uint*)other)[14];
      result8 ^= ((ushort*)other)[30];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      result0 |= result8;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block62* @this, Block62* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      var result15 = ((ushort*)@this)[30];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((uint*)other)[7];
      result8 ^= ((uint*)other)[8];
      result9 ^= ((uint*)other)[9];
      result10 ^= ((uint*)other)[10];
      result11 ^= ((uint*)other)[11];
      result12 ^= ((uint*)other)[12];
      result13 ^= ((uint*)other)[13];
      result14 ^= ((uint*)other)[14];
      result15 ^= ((ushort*)other)[30];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result8 |= result9;
      result10 |= result11;
      result12 |= result13;
      result14 |= result15;
      result0 |= result2;
      result4 |= result6;
      result8 |= result10;
      result12 |= result14;
      result0 |= result4;
      result8 |= result12;
      result0 |= result8;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block62* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block62* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((ulong*)@this)[3] = qword;
      ((ulong*)@this)[4] = qword;
      ((ulong*)@this)[5] = qword;
      ((ulong*)@this)[6] = qword;
      var dword = 0x01010101U * value;
      ((uint*)@this)[14] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[30] = word;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block62* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((uint*)@this)[7] = dword;
      ((uint*)@this)[8] = dword;
      ((uint*)@this)[9] = dword;
      ((uint*)@this)[10] = dword;
      ((uint*)@this)[11] = dword;
      ((uint*)@this)[12] = dword;
      ((uint*)@this)[13] = dword;
      ((uint*)@this)[14] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[30] = word;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block62* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block62* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ulong*)@this)[3] = 0;
      ((ulong*)@this)[4] = 0;
      ((ulong*)@this)[5] = 0;
      ((ulong*)@this)[6] = 0;
      ((uint*)@this)[14] = 0;
      ((ushort*)@this)[30] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block62* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((uint*)@this)[7] = 0;
      ((uint*)@this)[8] = 0;
      ((uint*)@this)[9] = 0;
      ((uint*)@this)[10] = 0;
      ((uint*)@this)[11] = 0;
      ((uint*)@this)[12] = 0;
      ((uint*)@this)[13] = 0;
      ((uint*)@this)[14] = 0;
      ((ushort*)@this)[30] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block62* @this, Block62* operand, Block62* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block62* @this, Block62* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block62* @this, Block62* operand, Block62* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((uint*)@this)[14];
      var result8 = ((ushort*)@this)[30];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      result6 &= ((ulong*)operand)[6];
      result7 &= ((uint*)operand)[14];
      result8 &= ((ushort*)operand)[30];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((uint*)target)[14] = result7;
      ((ushort*)target)[30] = result8;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block62* @this, Block62* operand, Block62* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      var result15 = ((ushort*)@this)[30];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      result12 &= ((uint*)operand)[12];
      result13 &= ((uint*)operand)[13];
      result14 &= ((uint*)operand)[14];
      result15 &= ((ushort*)operand)[30];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
      ((ushort*)target)[30] = result15;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block62* @this, Block62* operand, Block62* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block62* @this, Block62* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block62* @this, Block62* operand, Block62* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((uint*)@this)[14];
      var result8 = ((ushort*)@this)[30];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      result6 &= ((ulong*)operand)[6];
      result7 &= ((uint*)operand)[14];
      result8 &= ((ushort*)operand)[30];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((uint*)target)[14] = result7;
      ((ushort*)target)[30] = result8;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block62* @this, Block62* operand, Block62* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      var result15 = ((ushort*)@this)[30];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      result12 &= ((uint*)operand)[12];
      result13 &= ((uint*)operand)[13];
      result14 &= ((uint*)operand)[14];
      result15 &= ((ushort*)operand)[30];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      result15 = _Not(result15);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
      ((ushort*)target)[30] = result15;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block62* @this, Block62* operand, Block62* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block62* @this, Block62* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block62* @this, Block62* operand, Block62* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((uint*)@this)[14];
      var result8 = ((ushort*)@this)[30];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      result6 |= ((ulong*)operand)[6];
      result7 |= ((uint*)operand)[14];
      result8 |= ((ushort*)operand)[30];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((uint*)target)[14] = result7;
      ((ushort*)target)[30] = result8;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block62* @this, Block62* operand, Block62* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      var result15 = ((ushort*)@this)[30];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      result12 |= ((uint*)operand)[12];
      result13 |= ((uint*)operand)[13];
      result14 |= ((uint*)operand)[14];
      result15 |= ((ushort*)operand)[30];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
      ((ushort*)target)[30] = result15;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block62* @this, Block62* operand, Block62* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block62* @this, Block62* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block62* @this, Block62* operand, Block62* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((uint*)@this)[14];
      var result8 = ((ushort*)@this)[30];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      result6 |= ((ulong*)operand)[6];
      result7 |= ((uint*)operand)[14];
      result8 |= ((ushort*)operand)[30];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((uint*)target)[14] = result7;
      ((ushort*)target)[30] = result8;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block62* @this, Block62* operand, Block62* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      var result15 = ((ushort*)@this)[30];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      result12 |= ((uint*)operand)[12];
      result13 |= ((uint*)operand)[13];
      result14 |= ((uint*)operand)[14];
      result15 |= ((ushort*)operand)[30];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      result15 = _Not(result15);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
      ((ushort*)target)[30] = result15;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block62* @this, Block62* operand, Block62* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block62* @this, Block62* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block62* @this, Block62* operand, Block62* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((uint*)@this)[14];
      var result8 = ((ushort*)@this)[30];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      result6 ^= ((ulong*)operand)[6];
      result7 ^= ((uint*)operand)[14];
      result8 ^= ((ushort*)operand)[30];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((uint*)target)[14] = result7;
      ((ushort*)target)[30] = result8;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block62* @this, Block62* operand, Block62* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      var result15 = ((ushort*)@this)[30];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      result12 ^= ((uint*)operand)[12];
      result13 ^= ((uint*)operand)[13];
      result14 ^= ((uint*)operand)[14];
      result15 ^= ((ushort*)operand)[30];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
      ((ushort*)target)[30] = result15;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block62* @this, Block62* operand, Block62* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block62* @this, Block62* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block62* @this, Block62* operand, Block62* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((uint*)@this)[14];
      var result8 = ((ushort*)@this)[30];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      result6 ^= ((ulong*)operand)[6];
      result7 ^= ((uint*)operand)[14];
      result8 ^= ((ushort*)operand)[30];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((uint*)target)[14] = result7;
      ((ushort*)target)[30] = result8;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block62* @this, Block62* operand, Block62* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      var result15 = ((ushort*)@this)[30];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      result12 ^= ((uint*)operand)[12];
      result13 ^= ((uint*)operand)[13];
      result14 ^= ((uint*)operand)[14];
      result15 ^= ((ushort*)operand)[30];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      result15 = _Not(result15);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
      ((ushort*)target)[30] = result15;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block62* @this, Block62* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block62* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block62* @this, Block62* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((uint*)@this)[14];
      var result8 = ((ushort*)@this)[30];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((uint*)target)[14] = result7;
      ((ushort*)target)[30] = result8;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block62* @this, Block62* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      var result15 = ((ushort*)@this)[30];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      result15 = _Not(result15);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
      ((ushort*)target)[30] = result15;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 63)] 
  public struct Block63 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block63* @this, Block63* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block63* @this, Block63* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((uint*)@this)[14];
      var result8 = ((ushort*)@this)[30];
      var result9 = ((byte*)@this)[62];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ulong*)other)[3];
      result4 ^= ((ulong*)other)[4];
      result5 ^= ((ulong*)other)[5];
      result6 ^= ((ulong*)other)[6];
      result7 ^= ((uint*)other)[14];
      result8 ^= ((ushort*)other)[30];
      result9 ^= ((byte*)other)[62];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result8 |= result9;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      result0 |= result8;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block63* @this, Block63* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      var result15 = ((ushort*)@this)[30];
      var result16 = ((byte*)@this)[62];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((uint*)other)[7];
      result8 ^= ((uint*)other)[8];
      result9 ^= ((uint*)other)[9];
      result10 ^= ((uint*)other)[10];
      result11 ^= ((uint*)other)[11];
      result12 ^= ((uint*)other)[12];
      result13 ^= ((uint*)other)[13];
      result14 ^= ((uint*)other)[14];
      result15 ^= ((ushort*)other)[30];
      result16 ^= ((byte*)other)[62];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result8 |= result9;
      result10 |= result11;
      result12 |= result13;
      result14 |= result15;
      result0 |= result2;
      result4 |= result6;
      result8 |= result10;
      result12 |= result14;
      result0 |= result4;
      result8 |= result12;
      result0 |= result8;
      result0 |= result16;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block63* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block63* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((ulong*)@this)[3] = qword;
      ((ulong*)@this)[4] = qword;
      ((ulong*)@this)[5] = qword;
      ((ulong*)@this)[6] = qword;
      var dword = 0x01010101U * value;
      ((uint*)@this)[14] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[30] = word;
      ((byte*)@this)[62] = value;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block63* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((uint*)@this)[7] = dword;
      ((uint*)@this)[8] = dword;
      ((uint*)@this)[9] = dword;
      ((uint*)@this)[10] = dword;
      ((uint*)@this)[11] = dword;
      ((uint*)@this)[12] = dword;
      ((uint*)@this)[13] = dword;
      ((uint*)@this)[14] = dword;
      var word = (ushort)(0x0101 * value);
      ((ushort*)@this)[30] = word;
      ((byte*)@this)[62] = value;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block63* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block63* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ulong*)@this)[3] = 0;
      ((ulong*)@this)[4] = 0;
      ((ulong*)@this)[5] = 0;
      ((ulong*)@this)[6] = 0;
      ((uint*)@this)[14] = 0;
      ((ushort*)@this)[30] = 0;
      ((byte*)@this)[62] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block63* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((uint*)@this)[7] = 0;
      ((uint*)@this)[8] = 0;
      ((uint*)@this)[9] = 0;
      ((uint*)@this)[10] = 0;
      ((uint*)@this)[11] = 0;
      ((uint*)@this)[12] = 0;
      ((uint*)@this)[13] = 0;
      ((uint*)@this)[14] = 0;
      ((ushort*)@this)[30] = 0;
      ((byte*)@this)[62] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block63* @this, Block63* operand, Block63* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block63* @this, Block63* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block63* @this, Block63* operand, Block63* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((uint*)@this)[14];
      var result8 = ((ushort*)@this)[30];
      var result9 = ((byte*)@this)[62];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      result6 &= ((ulong*)operand)[6];
      result7 &= ((uint*)operand)[14];
      result8 &= ((ushort*)operand)[30];
      result9 &= ((byte*)operand)[62];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((uint*)target)[14] = result7;
      ((ushort*)target)[30] = result8;
      ((byte*)target)[62] = result9;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block63* @this, Block63* operand, Block63* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      var result15 = ((ushort*)@this)[30];
      var result16 = ((byte*)@this)[62];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      result12 &= ((uint*)operand)[12];
      result13 &= ((uint*)operand)[13];
      result14 &= ((uint*)operand)[14];
      result15 &= ((ushort*)operand)[30];
      result16 &= ((byte*)operand)[62];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
      ((ushort*)target)[30] = result15;
      ((byte*)target)[62] = result16;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block63* @this, Block63* operand, Block63* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block63* @this, Block63* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block63* @this, Block63* operand, Block63* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((uint*)@this)[14];
      var result8 = ((ushort*)@this)[30];
      var result9 = ((byte*)@this)[62];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      result6 &= ((ulong*)operand)[6];
      result7 &= ((uint*)operand)[14];
      result8 &= ((ushort*)operand)[30];
      result9 &= ((byte*)operand)[62];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((uint*)target)[14] = result7;
      ((ushort*)target)[30] = result8;
      ((byte*)target)[62] = result9;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block63* @this, Block63* operand, Block63* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      var result15 = ((ushort*)@this)[30];
      var result16 = ((byte*)@this)[62];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      result12 &= ((uint*)operand)[12];
      result13 &= ((uint*)operand)[13];
      result14 &= ((uint*)operand)[14];
      result15 &= ((ushort*)operand)[30];
      result16 &= ((byte*)operand)[62];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      result15 = _Not(result15);
      result16 = _Not(result16);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
      ((ushort*)target)[30] = result15;
      ((byte*)target)[62] = result16;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block63* @this, Block63* operand, Block63* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block63* @this, Block63* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block63* @this, Block63* operand, Block63* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((uint*)@this)[14];
      var result8 = ((ushort*)@this)[30];
      var result9 = ((byte*)@this)[62];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      result6 |= ((ulong*)operand)[6];
      result7 |= ((uint*)operand)[14];
      result8 |= ((ushort*)operand)[30];
      result9 |= ((byte*)operand)[62];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((uint*)target)[14] = result7;
      ((ushort*)target)[30] = result8;
      ((byte*)target)[62] = result9;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block63* @this, Block63* operand, Block63* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      var result15 = ((ushort*)@this)[30];
      var result16 = ((byte*)@this)[62];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      result12 |= ((uint*)operand)[12];
      result13 |= ((uint*)operand)[13];
      result14 |= ((uint*)operand)[14];
      result15 |= ((ushort*)operand)[30];
      result16 |= ((byte*)operand)[62];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
      ((ushort*)target)[30] = result15;
      ((byte*)target)[62] = result16;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block63* @this, Block63* operand, Block63* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block63* @this, Block63* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block63* @this, Block63* operand, Block63* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((uint*)@this)[14];
      var result8 = ((ushort*)@this)[30];
      var result9 = ((byte*)@this)[62];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      result6 |= ((ulong*)operand)[6];
      result7 |= ((uint*)operand)[14];
      result8 |= ((ushort*)operand)[30];
      result9 |= ((byte*)operand)[62];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((uint*)target)[14] = result7;
      ((ushort*)target)[30] = result8;
      ((byte*)target)[62] = result9;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block63* @this, Block63* operand, Block63* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      var result15 = ((ushort*)@this)[30];
      var result16 = ((byte*)@this)[62];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      result12 |= ((uint*)operand)[12];
      result13 |= ((uint*)operand)[13];
      result14 |= ((uint*)operand)[14];
      result15 |= ((ushort*)operand)[30];
      result16 |= ((byte*)operand)[62];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      result15 = _Not(result15);
      result16 = _Not(result16);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
      ((ushort*)target)[30] = result15;
      ((byte*)target)[62] = result16;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block63* @this, Block63* operand, Block63* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block63* @this, Block63* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block63* @this, Block63* operand, Block63* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((uint*)@this)[14];
      var result8 = ((ushort*)@this)[30];
      var result9 = ((byte*)@this)[62];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      result6 ^= ((ulong*)operand)[6];
      result7 ^= ((uint*)operand)[14];
      result8 ^= ((ushort*)operand)[30];
      result9 ^= ((byte*)operand)[62];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((uint*)target)[14] = result7;
      ((ushort*)target)[30] = result8;
      ((byte*)target)[62] = result9;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block63* @this, Block63* operand, Block63* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      var result15 = ((ushort*)@this)[30];
      var result16 = ((byte*)@this)[62];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      result12 ^= ((uint*)operand)[12];
      result13 ^= ((uint*)operand)[13];
      result14 ^= ((uint*)operand)[14];
      result15 ^= ((ushort*)operand)[30];
      result16 ^= ((byte*)operand)[62];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
      ((ushort*)target)[30] = result15;
      ((byte*)target)[62] = result16;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block63* @this, Block63* operand, Block63* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block63* @this, Block63* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block63* @this, Block63* operand, Block63* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((uint*)@this)[14];
      var result8 = ((ushort*)@this)[30];
      var result9 = ((byte*)@this)[62];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      result6 ^= ((ulong*)operand)[6];
      result7 ^= ((uint*)operand)[14];
      result8 ^= ((ushort*)operand)[30];
      result9 ^= ((byte*)operand)[62];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((uint*)target)[14] = result7;
      ((ushort*)target)[30] = result8;
      ((byte*)target)[62] = result9;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block63* @this, Block63* operand, Block63* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      var result15 = ((ushort*)@this)[30];
      var result16 = ((byte*)@this)[62];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      result12 ^= ((uint*)operand)[12];
      result13 ^= ((uint*)operand)[13];
      result14 ^= ((uint*)operand)[14];
      result15 ^= ((ushort*)operand)[30];
      result16 ^= ((byte*)operand)[62];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      result15 = _Not(result15);
      result16 = _Not(result16);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
      ((ushort*)target)[30] = result15;
      ((byte*)target)[62] = result16;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block63* @this, Block63* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block63* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block63* @this, Block63* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((uint*)@this)[14];
      var result8 = ((ushort*)@this)[30];
      var result9 = ((byte*)@this)[62];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((uint*)target)[14] = result7;
      ((ushort*)target)[30] = result8;
      ((byte*)target)[62] = result9;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block63* @this, Block63* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      var result15 = ((ushort*)@this)[30];
      var result16 = ((byte*)@this)[62];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      result15 = _Not(result15);
      result16 = _Not(result16);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
      ((ushort*)target)[30] = result15;
      ((byte*)target)[62] = result16;
    }
    
#endif

  }

  [StructLayout(LayoutKind.Sequential, Size = 64)] 
  public struct Block64 {

#if UNSAFE

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe bool AreEqual(Block64* @this, Block64* other) =>
#if PLATFORM_X86
      _AreEqualx32(@this, other)
#else
      _AreEqualx64(@this, other)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx64(Block64* @this, Block64* other) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((ulong*)@this)[7];
      result0 ^= *(ulong*)other;
      result1 ^= ((ulong*)other)[1];
      result2 ^= ((ulong*)other)[2];
      result3 ^= ((ulong*)other)[3];
      result4 ^= ((ulong*)other)[4];
      result5 ^= ((ulong*)other)[5];
      result6 ^= ((ulong*)other)[6];
      result7 ^= ((ulong*)other)[7];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result0 |= result2;
      result4 |= result6;
      result0 |= result4;
      return result0 == 0;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe bool _AreEqualx32(Block64* @this, Block64* other) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      var result15 = ((uint*)@this)[15];
      result0 ^= *(uint*)other;
      result1 ^= ((uint*)other)[1];
      result2 ^= ((uint*)other)[2];
      result3 ^= ((uint*)other)[3];
      result4 ^= ((uint*)other)[4];
      result5 ^= ((uint*)other)[5];
      result6 ^= ((uint*)other)[6];
      result7 ^= ((uint*)other)[7];
      result8 ^= ((uint*)other)[8];
      result9 ^= ((uint*)other)[9];
      result10 ^= ((uint*)other)[10];
      result11 ^= ((uint*)other)[11];
      result12 ^= ((uint*)other)[12];
      result13 ^= ((uint*)other)[13];
      result14 ^= ((uint*)other)[14];
      result15 ^= ((uint*)other)[15];
      result0 |= result1;
      result2 |= result3;
      result4 |= result5;
      result6 |= result7;
      result8 |= result9;
      result10 |= result11;
      result12 |= result13;
      result14 |= result15;
      result0 |= result2;
      result4 |= result6;
      result8 |= result10;
      result12 |= result14;
      result0 |= result4;
      result8 |= result12;
      result0 |= result8;
      return result0 == 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Fill(Block64* @this, byte value) =>
#if PLATFORM_X86
      _Fillx32(@this, value)
#else
      _Fillx64(@this, value)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx64(Block64* @this, byte value) {
      var qword = 0x0101010101010101UL * value;
      *(ulong*)@this = qword;
      ((ulong*)@this)[1] = qword;
      ((ulong*)@this)[2] = qword;
      ((ulong*)@this)[3] = qword;
      ((ulong*)@this)[4] = qword;
      ((ulong*)@this)[5] = qword;
      ((ulong*)@this)[6] = qword;
      ((ulong*)@this)[7] = qword;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Fillx32(Block64* @this, byte value) {
      var dword = 0x01010101U * value;
      *(uint*)@this = dword;
      ((uint*)@this)[1] = dword;
      ((uint*)@this)[2] = dword;
      ((uint*)@this)[3] = dword;
      ((uint*)@this)[4] = dword;
      ((uint*)@this)[5] = dword;
      ((uint*)@this)[6] = dword;
      ((uint*)@this)[7] = dword;
      ((uint*)@this)[8] = dword;
      ((uint*)@this)[9] = dword;
      ((uint*)@this)[10] = dword;
      ((uint*)@this)[11] = dword;
      ((uint*)@this)[12] = dword;
      ((uint*)@this)[13] = dword;
      ((uint*)@this)[14] = dword;
      ((uint*)@this)[15] = dword;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Clear(Block64* @this) =>
#if PLATFORM_X86
      _Clearx32(@this)
#else
      _Clearx64(@this)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx64(Block64* @this) {
      *(ulong*)@this = 0;
      ((ulong*)@this)[1] = 0;
      ((ulong*)@this)[2] = 0;
      ((ulong*)@this)[3] = 0;
      ((ulong*)@this)[4] = 0;
      ((ulong*)@this)[5] = 0;
      ((ulong*)@this)[6] = 0;
      ((ulong*)@this)[7] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Clearx32(Block64* @this) {
      *(uint*)@this = 0;
      ((uint*)@this)[1] = 0;
      ((uint*)@this)[2] = 0;
      ((uint*)@this)[3] = 0;
      ((uint*)@this)[4] = 0;
      ((uint*)@this)[5] = 0;
      ((uint*)@this)[6] = 0;
      ((uint*)@this)[7] = 0;
      ((uint*)@this)[8] = 0;
      ((uint*)@this)[9] = 0;
      ((uint*)@this)[10] = 0;
      ((uint*)@this)[11] = 0;
      ((uint*)@this)[12] = 0;
      ((uint*)@this)[13] = 0;
      ((uint*)@this)[14] = 0;
      ((uint*)@this)[15] = 0;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block64* @this, Block64* operand, Block64* target) =>
#if PLATFORM_X86
      _Andx32(@this, operand, target)
#else
      _Andx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void And(Block64* @this, Block64* operand) =>
      And(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx64(Block64* @this, Block64* operand, Block64* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((ulong*)@this)[7];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      result6 &= ((ulong*)operand)[6];
      result7 &= ((ulong*)operand)[7];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((ulong*)target)[7] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Andx86(Block64* @this, Block64* operand, Block64* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      var result15 = ((uint*)@this)[15];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      result12 &= ((uint*)operand)[12];
      result13 &= ((uint*)operand)[13];
      result14 &= ((uint*)operand)[14];
      result15 &= ((uint*)operand)[15];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
      ((uint*)target)[15] = result15;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block64* @this, Block64* operand, Block64* target) =>
#if PLATFORM_X86
      _Nandx32(@this, operand, target)
#else
      _Nandx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nand(Block64* @this, Block64* operand) =>
      Nand(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx64(Block64* @this, Block64* operand, Block64* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((ulong*)@this)[7];
      result0 &= *(ulong*)operand;
      result1 &= ((ulong*)operand)[1];
      result2 &= ((ulong*)operand)[2];
      result3 &= ((ulong*)operand)[3];
      result4 &= ((ulong*)operand)[4];
      result5 &= ((ulong*)operand)[5];
      result6 &= ((ulong*)operand)[6];
      result7 &= ((ulong*)operand)[7];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((ulong*)target)[7] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Nandx86(Block64* @this, Block64* operand, Block64* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      var result15 = ((uint*)@this)[15];
      result0 &= *(uint*)operand;
      result1 &= ((uint*)operand)[1];
      result2 &= ((uint*)operand)[2];
      result3 &= ((uint*)operand)[3];
      result4 &= ((uint*)operand)[4];
      result5 &= ((uint*)operand)[5];
      result6 &= ((uint*)operand)[6];
      result7 &= ((uint*)operand)[7];
      result8 &= ((uint*)operand)[8];
      result9 &= ((uint*)operand)[9];
      result10 &= ((uint*)operand)[10];
      result11 &= ((uint*)operand)[11];
      result12 &= ((uint*)operand)[12];
      result13 &= ((uint*)operand)[13];
      result14 &= ((uint*)operand)[14];
      result15 &= ((uint*)operand)[15];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      result15 = _Not(result15);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
      ((uint*)target)[15] = result15;
    }
        
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block64* @this, Block64* operand, Block64* target) =>
#if PLATFORM_X86
      _Orx32(@this, operand, target)
#else
      _Orx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Or(Block64* @this, Block64* operand) =>
      Or(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx64(Block64* @this, Block64* operand, Block64* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((ulong*)@this)[7];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      result6 |= ((ulong*)operand)[6];
      result7 |= ((ulong*)operand)[7];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((ulong*)target)[7] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Orx86(Block64* @this, Block64* operand, Block64* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      var result15 = ((uint*)@this)[15];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      result12 |= ((uint*)operand)[12];
      result13 |= ((uint*)operand)[13];
      result14 |= ((uint*)operand)[14];
      result15 |= ((uint*)operand)[15];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
      ((uint*)target)[15] = result15;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block64* @this, Block64* operand, Block64* target) =>
#if PLATFORM_X86
      _Norx32(@this, operand, target)
#else
      _Norx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Nor(Block64* @this, Block64* operand) =>
      Nor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx64(Block64* @this, Block64* operand, Block64* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((ulong*)@this)[7];
      result0 |= *(ulong*)operand;
      result1 |= ((ulong*)operand)[1];
      result2 |= ((ulong*)operand)[2];
      result3 |= ((ulong*)operand)[3];
      result4 |= ((ulong*)operand)[4];
      result5 |= ((ulong*)operand)[5];
      result6 |= ((ulong*)operand)[6];
      result7 |= ((ulong*)operand)[7];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((ulong*)target)[7] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Norx86(Block64* @this, Block64* operand, Block64* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      var result15 = ((uint*)@this)[15];
      result0 |= *(uint*)operand;
      result1 |= ((uint*)operand)[1];
      result2 |= ((uint*)operand)[2];
      result3 |= ((uint*)operand)[3];
      result4 |= ((uint*)operand)[4];
      result5 |= ((uint*)operand)[5];
      result6 |= ((uint*)operand)[6];
      result7 |= ((uint*)operand)[7];
      result8 |= ((uint*)operand)[8];
      result9 |= ((uint*)operand)[9];
      result10 |= ((uint*)operand)[10];
      result11 |= ((uint*)operand)[11];
      result12 |= ((uint*)operand)[12];
      result13 |= ((uint*)operand)[13];
      result14 |= ((uint*)operand)[14];
      result15 |= ((uint*)operand)[15];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      result15 = _Not(result15);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
      ((uint*)target)[15] = result15;
    }
    
#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block64* @this, Block64* operand, Block64* target) =>
#if PLATFORM_X86
      _Xorx32(@this, operand, target)
#else
      _Xorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xor(Block64* @this, Block64* operand) =>
      Xor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx64(Block64* @this, Block64* operand, Block64* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((ulong*)@this)[7];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      result6 ^= ((ulong*)operand)[6];
      result7 ^= ((ulong*)operand)[7];
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((ulong*)target)[7] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xorx86(Block64* @this, Block64* operand, Block64* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      var result15 = ((uint*)@this)[15];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      result12 ^= ((uint*)operand)[12];
      result13 ^= ((uint*)operand)[13];
      result14 ^= ((uint*)operand)[14];
      result15 ^= ((uint*)operand)[15];
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
      ((uint*)target)[15] = result15;
    }

    #if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block64* @this, Block64* operand, Block64* target) =>
#if PLATFORM_X86
      _Xnorx32(@this, operand, target)
#else
      _Xnorx64(@this, operand, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Xnor(Block64* @this, Block64* operand) =>
      Xnor(@this, operand, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx64(Block64* @this, Block64* operand, Block64* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((ulong*)@this)[7];
      result0 ^= *(ulong*)operand;
      result1 ^= ((ulong*)operand)[1];
      result2 ^= ((ulong*)operand)[2];
      result3 ^= ((ulong*)operand)[3];
      result4 ^= ((ulong*)operand)[4];
      result5 ^= ((ulong*)operand)[5];
      result6 ^= ((ulong*)operand)[6];
      result7 ^= ((ulong*)operand)[7];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((ulong*)target)[7] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Xnorx86(Block64* @this, Block64* operand, Block64* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      var result15 = ((uint*)@this)[15];
      result0 ^= *(uint*)operand;
      result1 ^= ((uint*)operand)[1];
      result2 ^= ((uint*)operand)[2];
      result3 ^= ((uint*)operand)[3];
      result4 ^= ((uint*)operand)[4];
      result5 ^= ((uint*)operand)[5];
      result6 ^= ((uint*)operand)[6];
      result7 ^= ((uint*)operand)[7];
      result8 ^= ((uint*)operand)[8];
      result9 ^= ((uint*)operand)[9];
      result10 ^= ((uint*)operand)[10];
      result11 ^= ((uint*)operand)[11];
      result12 ^= ((uint*)operand)[12];
      result13 ^= ((uint*)operand)[13];
      result14 ^= ((uint*)operand)[14];
      result15 ^= ((uint*)operand)[15];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      result15 = _Not(result15);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
      ((uint*)target)[15] = result15;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block64* @this, Block64* target) =>
#if PLATFORM_X86
      _Notx32(@this, target)
#else
      _Notx64(@this, target)
#endif
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    public static unsafe void Not(Block64* @this) =>
      Not(@this, @this)
      ;

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx64(Block64* @this, Block64* target) {
      var result0 = *(ulong*)@this;
      var result1 = ((ulong*)@this)[1];
      var result2 = ((ulong*)@this)[2];
      var result3 = ((ulong*)@this)[3];
      var result4 = ((ulong*)@this)[4];
      var result5 = ((ulong*)@this)[5];
      var result6 = ((ulong*)@this)[6];
      var result7 = ((ulong*)@this)[7];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      *(ulong*)target = result0;
      ((ulong*)target)[1] = result1;
      ((ulong*)target)[2] = result2;
      ((ulong*)target)[3] = result3;
      ((ulong*)target)[4] = result4;
      ((ulong*)target)[5] = result5;
      ((ulong*)target)[6] = result6;
      ((ulong*)target)[7] = result7;
    }

#if SUPPORTS_INLINING
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
    private static unsafe void _Notx86(Block64* @this, Block64* target) {
      var result0 = *(uint*)@this;
      var result1 = ((uint*)@this)[1];
      var result2 = ((uint*)@this)[2];
      var result3 = ((uint*)@this)[3];
      var result4 = ((uint*)@this)[4];
      var result5 = ((uint*)@this)[5];
      var result6 = ((uint*)@this)[6];
      var result7 = ((uint*)@this)[7];
      var result8 = ((uint*)@this)[8];
      var result9 = ((uint*)@this)[9];
      var result10 = ((uint*)@this)[10];
      var result11 = ((uint*)@this)[11];
      var result12 = ((uint*)@this)[12];
      var result13 = ((uint*)@this)[13];
      var result14 = ((uint*)@this)[14];
      var result15 = ((uint*)@this)[15];
      result0 = _Not(result0);
      result1 = _Not(result1);
      result2 = _Not(result2);
      result3 = _Not(result3);
      result4 = _Not(result4);
      result5 = _Not(result5);
      result6 = _Not(result6);
      result7 = _Not(result7);
      result8 = _Not(result8);
      result9 = _Not(result9);
      result10 = _Not(result10);
      result11 = _Not(result11);
      result12 = _Not(result12);
      result13 = _Not(result13);
      result14 = _Not(result14);
      result15 = _Not(result15);
      *(uint*)target = result0;
      ((uint*)target)[1] = result1;
      ((uint*)target)[2] = result2;
      ((uint*)target)[3] = result3;
      ((uint*)target)[4] = result4;
      ((uint*)target)[5] = result5;
      ((uint*)target)[6] = result6;
      ((uint*)target)[7] = result7;
      ((uint*)target)[8] = result8;
      ((uint*)target)[9] = result9;
      ((uint*)target)[10] = result10;
      ((uint*)target)[11] = result11;
      ((uint*)target)[12] = result12;
      ((uint*)target)[13] = result13;
      ((uint*)target)[14] = result14;
      ((uint*)target)[15] = result15;
    }
    
#endif

  }


#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  private static ulong _Not(ulong operand) => ~operand;


#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  private static uint _Not(uint operand) => ~operand;

#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  private static ushort _Not(ushort operand) => (ushort)~operand;

#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  private static byte _Not(byte operand) => (byte)~operand;

}

