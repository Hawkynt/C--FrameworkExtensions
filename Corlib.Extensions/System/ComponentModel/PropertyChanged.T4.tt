<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
#region (c)2010-2042 Hawkynt
/*
  This file is part of Hawkynt's .NET Framework extensions.

    Hawkynt's .NET Framework extensions are free software: 
    you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Hawkynt's .NET Framework extensions is distributed in the hope that 
    it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
    warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
    the GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Hawkynt's .NET Framework extensions.  
    If not, see <http://www.gnu.org/licenses/>.
*/
#endregion

/* ATTENTION: This file is generated by a tool. All changes will be reverted upon next run ! */

using System.Runtime.CompilerServices;
using Guard;

namespace System.ComponentModel;

public static partial class PropertyChangedExtensions {

  /// <summary>
  /// The synchornization context to use for all safe invocations if any.
  /// </summary>
  public static ISynchronizeInvoke SynchronizationContext {get;set;}

  /// <summary>
  /// Safely invokes the event.
  /// </summary>
  /// <param name="this">This event.</param>
  /// <param name="sender">The sender.</param>
  /// <param name="e">The <see cref="System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
  public static void SafeInvoke(this PropertyChangedEventHandler @this, object sender, PropertyChangedEventArgs e) {
    if (@this == null)
      return;

    var context = SynchronizationContext;
    if (context != null) {
      context.Invoke(new Action(() => @this(sender, e)), null);
      return;
    }

    foreach (var subscriber in @this.GetInvocationList()) {
      if (subscriber.Target is ISynchronizeInvoke { InvokeRequired: true } sync) {
        sync.Invoke(subscriber, new[] { sender, e });
        continue;
      }
        
      subscriber.DynamicInvoke(sender, e);
    }
  }

<#foreach(var type in new[]{"bool","byte","sbyte","char","short","ushort","int","uint","long","ulong","float","double","decimal","string"}){#>

  /// <summary>
  /// Checks if a property already matches a desired value.  Sets the property and
  /// notifies listeners only when necessary.
  /// </summary>
  /// <typeparam name="This">Type of the object.</typeparam>
  /// <param name="this">This object.</param>
  /// <param name="onPropertyChanged">The property changed event invocator.</param>
  /// <param name="backingField">Reference to a property with both getter and setter.</param>
  /// <param name="value">Desired value for the property.</param>
  /// <param name="propertyName">Name of the property used to notify listeners.  This
  /// value is optional and can be provided automatically when invoked from compilers that
  /// support CallerMemberName.</param>
  /// <returns>
  /// <see langword="true"/> if the value was changed, <see langword="false"/> if the existing value matched the
  /// desired value.
  /// </returns>
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static bool SetProperty<This>(
    this This @this, 
    Action<string> onPropertyChanged, 
    ref <#=type#> backingField, 
    <#=type#> value, 
    [CallerMemberName]string propertyName = null
  ) where This:INotifyPropertyChanged {
    Against.ArgumentIsNull(onPropertyChanged);
    Against.ArgumentIsNull(propertyName);

<#if(type=="float"||type=="double"){#>
    // ReSharper disable once CompareOfFloatsByEqualityOperator
<#}#>
    if (backingField == value)
      return false;

    backingField = value;
    onPropertyChanged(propertyName);
    return true;
  }

<#}#>

  /// <summary>
  /// Checks if a property already matches a desired value.  Sets the property and
  /// notifies listeners only when necessary.
  /// </summary>
  /// <typeparam name="This">Type of the object.</typeparam>
  /// <typeparam name="T">Type of the property.</typeparam>
  /// <param name="this">This object.</param>
  /// <param name="onPropertyChanged">The property changed event invocator.</param>
  /// <param name="backingField">Reference to a property with both getter and setter.</param>
  /// <param name="value">Desired value for the property.</param>
  /// <param name="propertyName">Name of the property used to notify listeners.  This
  /// value is optional and can be provided automatically when invoked from compilers that
  /// support CallerMemberName.</param>
  /// <returns>
  /// <see langword="true"/> if the value was changed, <see langword="false"/> if the existing value matched the
  /// desired value.
  /// </returns>
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static bool SetProperty<This,T>(
    this This @this, 
    Action<string> onPropertyChanged, 
    ref T backingField, 
    T value, 
    [CallerMemberName]string propertyName = null
  ) where This:INotifyPropertyChanged {
    Against.ArgumentIsNull(onPropertyChanged);
    Against.ArgumentIsNull(propertyName);

    if (Equals(backingField, value))
      return false;

    backingField = value;
    onPropertyChanged(propertyName);
    return true;
  }
}
