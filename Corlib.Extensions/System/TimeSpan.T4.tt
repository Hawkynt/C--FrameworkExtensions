<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
#region (c)2010-2042 Hawkynt

// This file is part of Hawkynt's .NET Framework extensions.
// 
// Hawkynt's .NET Framework extensions are free software:
// you can redistribute and/or modify it under the terms
// given in the LICENSE file.
// 
// Hawkynt's .NET Framework extensions is distributed in the hope that
// it will be useful, but WITHOUT ANY WARRANTY without even the implied
// warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the LICENSE file for more details.
// 
// You should have received a copy of the License along with Hawkynt's
// .NET Framework extensions. If not, see
// <https://github.com/Hawkynt/C--FrameworkExtensions/blob/master/LICENSE>.

#endregion

/* ATTENTION: This file is generated by a tool. All changes will be reverted upon next run ! */

using System.Diagnostics;
#if SUPPORTS_INLINING
using System.Runtime.CompilerServices;
#endif

// ReSharper disable RedundantCast

namespace System;

public static partial class TimeSpanExtensions {
    
<#foreach(var type in new[]{"sbyte","byte","short","ushort","int","uint","long","ulong","float","double","decimal"}){#>
    
  /// <summary>
  /// Multiplies the time by a given factor.
  /// </summary>
  /// <param name="this">This TimeSpan.</param>
  /// <param name="multiplier">The multiplier.</param>
  /// <returns>A multiple of the original timespan.</returns>
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static TimeSpan MultipliedWith(this TimeSpan @this, <#=type#> multiplier) => TimeSpan.FromTicks((long)(@this.Ticks * <#=(type == "ulong" ? "(double)" : "")#>multiplier));

  /// <summary>
  /// Divides the time by a divisor.
  /// </summary>
  /// <param name="this">This TimeSpan.</param>
  /// <param name="divisor">The divisor.</param>
  /// <returns>A fraction of the original timespan.</returns>
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static TimeSpan DividedBy(this TimeSpan @this, <#=type#> divisor) => TimeSpan.FromTicks((long)(@this.Ticks / <#=(type == "ulong" ? "(double)" : "")#>divisor));
    
  /// <summary>
  /// Creates a timespan from the given milliseconds.
  /// </summary>
  /// <param name="this">This Number of milliseconds.</param>
  /// <returns>A TimeSpan instance.</returns>
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static TimeSpan Milliseconds(this <#=type#> @this) => TimeSpan.FromMilliseconds(<#=(type == "decimal" ? "(double)" : "")#>@this);
    
  /// <summary>
  /// Creates a timespan from the given seconds.
  /// </summary>
  /// <param name="this">This Number of seconds.</param>
  /// <returns>A TimeSpan instance.</returns>
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static TimeSpan Seconds(this <#=type#> @this) => TimeSpan.FromSeconds(<#=(type == "decimal" ? "(double)" : "")#>@this);
    
  /// <summary>
  /// Creates a timespan from the given minutes.
  /// </summary>
  /// <param name="this">This Number of minutes.</param>
  /// <returns>A TimeSpan instance.</returns>
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static TimeSpan Minutes(this <#=type#> @this) => TimeSpan.FromMinutes(<#=(type == "decimal" ? "(double)" : "")#>@this);
    
  /// <summary>
  /// Creates a timespan from the given hours.
  /// </summary>
  /// <param name="this">This Number of hours.</param>
  /// <returns>A TimeSpan instance.</returns>
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static TimeSpan Hours(this <#=type#> @this) => TimeSpan.FromHours(<#=(type == "decimal" ? "(double)" : "")#>@this);
    
  /// <summary>
  /// Creates a timespan from the given days.
  /// </summary>
  /// <param name="this">This Number of days.</param>
  /// <returns>A TimeSpan instance.</returns>
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static TimeSpan Days(this <#=type#> @this) => TimeSpan.FromDays(<#=(type == "decimal" ? "(double)" : "")#>@this);
    
  /// <summary>
  /// Creates a timespan from the given weeks.
  /// </summary>
  /// <param name="this">This Number of weeks.</param>
  /// <returns>A TimeSpan instance.</returns>
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static TimeSpan Weeks(this <#=type#> @this) => TimeSpan.FromDays(7 * <#=(type == "decimal" ? "(double)" : "")#>@this);
    
<#}#>

  /// <summary>
  /// Divides the time by a divisor.
  /// </summary>
  /// <param name="this">This TimeSpan.</param>
  /// <param name="divisor">The divisor.</param>
  /// <returns>A fraction of the original timespan.</returns>
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static double DividedBy(this TimeSpan @this, TimeSpan divisor) => @this.Ticks / (double)divisor.Ticks;
    
  /// <summary>
  /// Adds the given TimeSpan to the current date/time.
  /// </summary>
  /// <param name="this">This TimeSpan.</param>
  /// <returns>The resulting DateTime instance.</returns>
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static DateTime FromNow(this TimeSpan @this) => DateTime.Now + @this;
    
  /// <summary>
  /// Adds the given TimeSpan to the current date/time.
  /// </summary>
  /// <param name="this">This TimeSpan.</param>
  /// <returns>The resulting DateTime instance.</returns>
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static DateTime FromUtcNow(this TimeSpan @this) => DateTime.UtcNow + @this;
 
  /// <summary>
  /// Adds the given TimeSpan to the current Stopwatch TimeStamp.
  /// </summary>
  /// <param name="this">This TimeSpan.</param>
  /// <returns>The resulting TimeStamp.</returns>
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static long FromStopwatchTimeStamp(this TimeSpan @this) => (long)(Stopwatch.GetTimestamp() + @this.TotalSeconds * Stopwatch.Frequency);
    
  /// <summary>
  /// Returns the current iteration of the given timespan.
  /// </summary>
  /// <param name="this">This TimeSpan</param>
  /// <returns>The current iteration count</returns>
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static double CurrenIteration(this TimeSpan @this) => Stopwatch.GetTimestamp() / (double)Stopwatch.Frequency / @this.TotalSeconds;
    
  /// <summary>
  /// Returns the current iteration of the given timespan.
  /// </summary>
  /// <param name="this">This TimeSpan</param>
  /// <param name="maxIterations">The maximum number of iteration before wrap-around</param>
  /// <returns>The current iteration count</returns>
#if SUPPORTS_INLINING
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
  public static double CurrenIteration(this TimeSpan @this, ulong maxIterations) => CurrenIteration(@this) % maxIterations;
    
  /// <summary>
  /// Returns the current drift.
  /// </summary>
  /// <param name="this">This TimeSpan</param>
  /// <returns>The time passed since start of the current iteration</returns>
  public static TimeSpan CurrenDrift(this TimeSpan @this) {
    var currentSecond = Stopwatch.GetTimestamp() / (double) Stopwatch.Frequency;
    var iteration = currentSecond / @this.TotalSeconds;
    var result = iteration - (int) iteration;
    return TimeSpan.FromSeconds(result);
  }

}
