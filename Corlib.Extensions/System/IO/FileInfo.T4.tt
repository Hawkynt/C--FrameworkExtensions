<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
#region (c)2010-2042 Hawkynt
/*
  This file is part of Hawkynt's .NET Framework extensions.

    Hawkynt's .NET Framework extensions are free software:
    you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Hawkynt's .NET Framework extensions is distributed in the hope that
    it will be useful, but WITHOUT ANY WARRANTY; without even the implied
    warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
    the GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Hawkynt's .NET Framework extensions.
    If not, see <http://www.gnu.org/licenses/>.
*/
#endregion

/* ATTENTION: This file is generated by a tool. All changes will be reverted upon next run ! */
using System.Text;

// ReSharper disable MemberCanBePrivate.Global
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedParameter.Global

namespace System.IO;

public static partial class FileInfoExtensions {

<#=GenerateDefaultValueStubs("string[]",@"
  public static string[] ReadAllLinesOrDefault(this FileInfo @this{0} {1}) 
    => TryReadAllLines(@this, out var result) ? result : {2}
  ;
")#>
<#=GenerateDefaultValueStubs("string[]",@"
  public static string[] ReadAllLinesOrDefault(this FileInfo @this, Encoding encoding{0} {1}) 
    => TryReadAllLines(@this, encoding, out var result) ? result : {2}
  ;
")#>
<#=GenerateDefaultValueStubs("byte[]",@"
  public static byte[] ReadAllBytesOrDefault(this FileInfo @this{0} {1})
    => TryReadAllBytes(@this, out var result) ? result : {2}
  ;
")#>

}
<#+
string GenerateDefaultValueStubs(string typeName,string code) {
  var result=new System.Text.StringBuilder();
  result.Append(string.Format(code,"","","default"));
  result.Append(string.Format(code,", "+typeName,"defaultValue","defaultValue"));
  result.Append(string.Format(code,", Func<"+typeName+">","defaultValueFactory","defaultValueFactory()"));
  result.Append(string.Format(code,", Func<FileInfo, "+typeName+">","defaultValueFactory","defaultValueFactory(@this)"));
  return result.ToString();
}
#>